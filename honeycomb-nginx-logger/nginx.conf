# escape=default converts " to \x22; escape=json converts " to '\"'.
log_format honeycomb-mirror escape=none '$dataset $inflated_request_body';

# Without variables_hash_max_size, I get:
#
# nginx: [warn] could not build optimal variables_hash, you should increase either variables_hash_max_size: 1024 or variables_hash_bucket_size: 64; ignoring variables_hash_bucket_size
variables_hash_max_size 2048;

server {
  listen 8010;
  server_name honeycomb-proxy;

  # The dataset capture group can be either:
  # - a list of datasets you want to capture, ie:
  #   'sandbox|some-other-dataset', or
  # - '.*' (to capture _all_ datasets)
  #
  # It's a named group so we can tag each log line with its dataset. If this is
  # run in docker, we'll overwrite it on startup with DATASETS_TO_LOG - see
  # startup.sh
  #
  # These two endpoints - /a/batch/:dataset and /1/events/:dataset - are
  # documented at https://docs.honeycomb.io/api/events/
  location ~ ^/1/(batch|events)/(?<dataset>DATASETS_TO_LOG)$ {
    # 10KB was in the original # inflate_body.lua gist
    # (https://gist.github.com/davidcaste/05b2f9461ebe4a3bb3fc). Unlike
    # max_body_size, max_chunk_size appears to be purely internal to
    # inflate_body.lua (and not related to, say, http-level chunking).
    set $max_chunk_size 10240; # 10KB

    # max_body_size is 5MB per https://docs.honeycomb.io/api/events/; I made it
    # six just to have some headroom
    set $max_body_size 6291456;

    # Get the inflated/decompressed request body and log it
    set $inflated_request_body '{"error": true, "msg": "inflated_request_body not yet set, probably a bug in inflate_body.lua}';
    rewrite_by_lua_file inflate_body.lua;
    access_log /dev/stdout honeycomb-mirror;

    # Send the request along to honeycomb
    proxy_set_header Host api.honeycomb.io;
    proxy_pass https://api.honeycomb.io:443;
  }

  # Catch-all - these get proxied to honeycomb but not logged
  location / {
    access_log off;
    proxy_set_header Host api.honeycomb.io;
    proxy_pass https://api.honeycomb.io:443;
  }
}
