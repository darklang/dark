==================
Enum - no args
==================

MyEnum.NoArgs()

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (symbol)
      )
    )
  )
)


==================
Enum - with one arg
==================

MyEnum.OneArg(1L)

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
        (symbol)
      )
    )
  )
)


==================
Enum - with tuple as arg
==================

MyEnum.TwoArgs((1L, 2L))

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (enum_fields
          (expression
            (simple_expression
              (tuple_literal
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                (symbol)
              )
            )
          )
        )
        (symbol)
      )
    )
  )
)


==================
Enum - with two args
==================

MyEnum.TwoArgs(1L, 2L)

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name
          (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (enum_fields
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
        (symbol)
      )
    )
  )
)


==================
Enum - fully qualified
==================

Stdlib.Option.Option.None()

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name
          (module_identifier)
          (symbol)
          (module_identifier)
          (symbol)
          (type_identifier)
        )
        (symbol)
        (enum_case_identifier)
        (symbol)
        (symbol)
      )
    )
  )
)


==================
Enum - fully qualified with args
==================

Stdlib.Option.Option.Some(1L)

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
        (symbol)
      )
    )
  )
)

==================
Enum - fully qualified with indented args
==================

Stdlib.Option.Option.Some(
  1L
)

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
        (symbol)
        (enum_case_identifier)
        (symbol)
        (indent)
        (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
        (dedent)
        (symbol)
      )
    )
  )
)



==================
Enum - with two args no parens and indented
==================

MyEnum.TwoArgs(
  1L,
  2L
)

---

(source_file
  (expression
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
        (symbol)
        (indent)
        (enum_fields
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
        )
        (dedent)
        (symbol)
      )
    )
  )
)


==================
test
==================

(parse
  """
    [ [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9] ]""")
==
(parsedOk
  Json.Array(
    [ Json.Array([ Json.Number(1.0); Json.Number(2.0); Json.Number(3.0) ])
      Json.Array([ Json.Number(4.0); Json.Number(5.0); Json.Number(6.0) ])
      Json.Array([ Json.Number(7.0); Json.Number(8.0); Json.Number(9.0) ]) ]
  )
)


(format
  Json.Array(
    [ Json.Array([ Json.Number(1.0); Json.Number(2.0); Json.Number(3.0) ])
      Json.Array([ Json.Number(4.0); Json.Number(5.0); Json.Number(6.0) ])
      Json.Array([ Json.Number(7.0); Json.Number(8.0); Json.Number(9.0) ]) ]
  )
) == "[[1,2,3],[4,5,6],[7,8,9]]"

---
