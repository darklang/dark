let listDirectoryRecursive (dir: String) : List<String> =
  let contents = Builtin.Directory.list dir

  let (files, dirs) =
    contents |> Builtin.List.partition (fun x -> Builtin.File.isNormal x)

  let nested =
    dirs
    |> Builtin.List.map (fun d -> listDirectoryRecursive d)
    |> Builtin.LocalExec.BuiltIns.List.flatten

  dirs |> Builtin.List.append files |> Builtin.List.append nested


// Packages
let listPackageFilesOnDisk (dir: String) : List<String> =
  dir
  |> listDirectoryRecursive
  |> Builtin.List.filter (fun x ->
    x |> Builtin.LocalExec.BuiltIns.String.endsWith ".dark")




let saveItemToCanvas
  (json: String)
  (name: String)
  : PACKAGE.Darklang.Stdlib.Result.Result<Unit, String> =
  let response =
    Builtin.HttpClient.request
      "POST"
      $"http://dark-packages.dlio.localhost:11003/{name}s"
      []
      (Builtin.String.toBytes json)

  let errMsg = $"Error saving {name} to canvas"

  match response with
  | Ok response ->
    match response.statusCode with
    | 200 -> PACKAGE.Darklang.Stdlib.Result.Result.Ok()
    | _ ->
      Builtin.print $"Type: {name}; Json: {json}"
      Builtin.print $"Status: {Builtin.Int.toString response.statusCode}"
      Builtin.print $"Body: {response.body |> Builtin.String.fromBytes}"
      Builtin.print errMsg
      PACKAGE.Darklang.Stdlib.Result.Result.Error errMsg
  | Error err ->
    Builtin.print $"Type: {name}; Json: {json}"
    Builtin.print err
    Builtin.print errMsg
    PACKAGE.Darklang.Stdlib.Result.Result.Error errMsg



let loadPackageFileIntoDarkCanvas
  (filename: String)
  : PACKAGE.Darklang.Stdlib.Result.Result<Unit, String> =
  let package =
    filename
    |> Builtin.File.read
    |> Builtin.unwrap
    |> Builtin.String.fromBytes
    |> Builtin.LocalExec.Packages.parse filename
    |> Builtin.unwrap

  let fnResults =
    package.fns
    |> Builtin.List.map (fun fn ->
      fn
      |> Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn>
      |> Builtin.unwrap
      |> saveItemToCanvas "function")

  let typeResults =
    package.types
    |> Builtin.List.map (fun t ->
      t
      |> Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType>
      |> Builtin.unwrap
      |> saveItemToCanvas "type")

  let constantResults =
    package.constants
    |> Builtin.List.map (fun c ->
      c
      |> Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant>
      |> Builtin.unwrap
      |> saveItemToCanvas "constant")

  // Flatten all the result lists into one list
  let allResults =
    [ fnResults; typeResults; constantResults ]
    |> PACKAGE.Darklang.Stdlib.List.flatten

  let firstError =
    Builtin.List.findFirst allResults (fun r ->
      match r with
      | Error _ -> true
      | Ok _ -> false)

  // Find the first error in the flattened list
  match firstError with
  | Some(Error err) -> PACKAGE.Darklang.Stdlib.Result.Result.Error err
  | _ -> PACKAGE.Darklang.Stdlib.Result.Result.Ok()


let printPackageFunction (p: Builtin.LocalExec.Packages.Function) : Unit =
  let modules = p.modules |> Builtin.String.join "."

  Builtin.print
    $"Package Function {p.owner}.{modules}.{p.name}_v{Builtin.Int.toString_v0 p.version}"

let printPackageType (p: Builtin.LocalExec.Packages.Type) : Unit =
  let modules = p.modules |> Builtin.String.join "."

  Builtin.print
    $"Package Type {p.owner}.{modules}.{p.name}_v{Builtin.Int.toString_v0 p.version}"

let printPackageConstant (p: Builtin.LocalExec.Packages.Constant) : Unit =
  let modules = p.modules |> Builtin.String.join "."

  Builtin.print
    $"Package Constant {p.owner}.{modules}.{p.name}_v{Builtin.Int.toString_v0 p.version}"

let printAllPackagesInDb () : Unit =
  let functions = Builtin.LocalExec.Packages.listFunctions ()

  functions
  |> Builtin.LocalExec.BuiltIns.List.iter (fun p -> printPackageFunction p)

  let types = Builtin.LocalExec.Packages.listTypes ()
  types |> Builtin.LocalExec.BuiltIns.List.iter (fun p -> printPackageType p)

  let constants = Builtin.LocalExec.Packages.listConstants ()

  constants
  |> Builtin.LocalExec.BuiltIns.List.iter (fun p -> printPackageConstant p)


// parse args and execute
type CliOptions =
  | Help
  | LoadPackagesIntoDarkCanvas
  | ListPackages
  | BadOption of String

let usage () : String =
  "Usage: LocalExec [options]

    Options:
      -h, --help          Show this help message and exit
      load-packages-dark  Load packages from disk into dark packages canvas
      list-packages       List packages
  "


let parseArgs (args: List<String>) : CliOptions =
  match args with
  | [] -> CliOptions.Help
  | [ "-h" ] -> CliOptions.Help
  | [ "--help" ] -> CliOptions.Help

  | [ "list-packages" ] -> CliOptions.ListPackages
  | [ "load-packages" ] ->
    CliOptions.BadOption
      "`load-packages` now executes in F# (not sure how you got here)"
  | [ "load-packages-dark" ] -> CliOptions.LoadPackagesIntoDarkCanvas

  | _ -> CliOptions.BadOption "Invalid arguments"



let main (args: List<String>) : Int =
  match parseArgs args with
  | Help ->
    Builtin.print (usage ())
    0

  | ListPackages ->
    printAllPackagesInDb ()
    0

  | LoadPackagesIntoDarkCanvas ->
    let files = listPackageFilesOnDisk "/home/dark/app/packages"

    // TODO: clear packages from dark canvas first?

    // Wait for canvas to be ready
    let available =
      Builtin.List.fold
        (PACKAGE.Darklang.Stdlib.List.range 0 10)
        (PACKAGE.Darklang.Stdlib.Result.Result.Error "Not started")
        (fun found num ->
          match found with
          | Ok() -> PACKAGE.Darklang.Stdlib.Result.Result.Ok()
          | Error _ ->
            (Builtin.HttpClient.request
              "GET"
              ("http://dark-packages.dlio.localhost:11003/health")
              []
              Builtin.Bytes.empty)
            |> PACKAGE.Darklang.Stdlib.Result.map (fun _ -> ())
            |> PACKAGE.Darklang.Stdlib.Result.mapError (fun err ->
              Builtin.print $"Error: {err}"
              Time.sleep 1000.0
              err))


    match available with
    | Error msg ->
      Builtin.print $"Error waiting for dark packages canvas: {msg}"
      1
    | Ok() ->
      Builtin.print "Dark packages canvas is ready"

      let result =
        Builtin.List.fold
          files
          (PACKAGE.Darklang.Stdlib.Result.Result.Ok())
          (fun (acc, f) ->
            Builtin.print $"Loading {f}"

            match acc with
            | Error _err -> acc
            | Ok() ->
              match loadPackageFileIntoDarkCanvas f with
              | Error err ->
                PACKAGE.Darklang.Stdlib.Result.Result.Error(
                  $"Failed to load packages from {f}:\n" ++ err
                )
              | Ok() -> PACKAGE.Darklang.Stdlib.Result.Result.Ok())

      match result with
      | Error err ->
        Builtin.print err
        1
      | Ok() ->
        Builtin.print "Done loading packages from disk"
        printAllPackagesInDb ()
        0

  | BadOption msg ->
    Builtin.print ("Error: " ++ msg)
    1

main args