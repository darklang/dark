open Core_kernel
open Lib
open Types.RuntimeT

let fns : Lib.shortfn list =
  [ { pns = ["DarkInternal::checkAccess"]
    ; ins = []
    ; p = []
    ; r = TNull
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::checkAllCanvases"]
    ; ins = []
    ; p = []
    ; r = TNull
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = true }
  ; { pns = ["DarkInternal::migrateAllCanvases"]
    ; ins = []
    ; p = []
    ; r = TNull
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::cleanupOldTraces"]
    ; ins = []
    ; p = []
    ; r = TNull
    ; d = "Deprecated, use v1"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = true }
  ; { pns = ["DarkInternal::cleanupOldTraces_v1"]
    ; ins = []
    ; p = [par "host" TStr]
    ; r = TNull
    ; d = "Cleanup the old traces from a canvas"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::checkCanvas"]
    ; ins = []
    ; p = [par "host" TStr]
    ; r = TBool
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::getAllCanvases"]
    ; ins = []
    ; p = []
    ; r = TList
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::canvasAsText"]
    ; ins = []
    ; p = [par "host" TStr]
    ; r = TStr
    ; d = "TODO"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::handlers"]
    ; ins = []
    ; p = [par "host" TStr]
    ; r = TList
    ; d = "Returns a list of toplevel ids of handlers in `host`"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false }
  ; { pns = ["DarkInternal::canLoadTraces"]
    ; ins = []
    ; p = [par "host" TStr; par "tlid" TStr]
    ; r = TBool
    ; d =
        "Takes a `host` and a `tlid` and returns true iff. we can load+parse traces for the handler identified by `tlid`, and false otherwise"
    ; f = NotClientAvailable
    ; pr = None
    ; ps = false
    ; dep = false } ]
