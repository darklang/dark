Stdlib.UInt8.max 5uy 6uy == 6uy
Stdlib.UInt8.max 10uy 1uy == 10uy
Stdlib.UInt8.max 0uy 6uy == 6uy
Stdlib.UInt8.max 255uy 0uy == 255uy

Stdlib.UInt8.min 5uy 6uy == 5uy
Stdlib.UInt8.min 10uy 10uy == 10uy
Stdlib.UInt8.min 255uy 0uy == 0uy

Stdlib.UInt8.clamp 1uy 2uy 1uy == 1uy
Stdlib.UInt8.clamp 3uy 0uy 2uy == 2uy
Stdlib.UInt8.clamp 100uy 0uy 0uy == 0uy
Stdlib.UInt8.clamp 100uy 0uy 1uy == 1uy
Stdlib.UInt8.clamp 100uy 1uy 0uy == 1uy


Stdlib.UInt8.add 10uy 9uy == 19uy
Stdlib.UInt8.add 88uy 9uy == 97uy
Stdlib.UInt8.add 1uy 0uy == 1uy
Stdlib.UInt8.add 254uy 1uy == 255uy

Stdlib.UInt8.add 255uy 1uy == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt8.subtract 10uy 9uy == 1uy
Stdlib.UInt8.subtract 88uy 9uy == 79uy

Stdlib.UInt8.subtract 0uy 1uy == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt8.subtract 1uy 0uy == 1uy
Stdlib.UInt8.subtract 255uy 1uy == 254uy

Stdlib.UInt8.multiply 8uy 8uy == 64uy
Stdlib.UInt8.multiply 8uy 0uy == 0uy
Stdlib.UInt8.multiply 127uy 2uy == 254uy

Stdlib.UInt8.multiply 128uy 2uy == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt8.multiply 255uy 2uy == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt8.power 2uy 3uy == 8uy
Stdlib.UInt8.power 0uy 1uy == 0uy
Stdlib.UInt8.power 1uy 0uy == 1uy
Stdlib.UInt8.power 0uy 0uy == 1uy
Stdlib.UInt8.power 1uy 255uy == 1uy

Stdlib.UInt8.power 16uy 2uy == Builtin.testDerrorMessage "Out of range"


Stdlib.UInt8.divide 10uy 5uy == 2uy
Stdlib.UInt8.divide 17uy 3uy == 5uy
Stdlib.UInt8.divide 8uy 5uy == 1uy
Stdlib.UInt8.divide 0uy 1uy == 0uy
Stdlib.UInt8.divide 255uy 2uy == 127uy

Stdlib.UInt8.divide 1uy 0uy == Builtin.testDerrorMessage "Division by zero"

Stdlib.UInt8.greaterThan 20uy 1uy == true

Stdlib.UInt8.greaterThanOrEqualTo 0uy 1uy == false
Stdlib.UInt8.greaterThanOrEqualTo 1uy 0uy == true
Stdlib.UInt8.greaterThanOrEqualTo 6uy 1uy == true
Stdlib.UInt8.greaterThanOrEqualTo 6uy 8uy == false
Stdlib.UInt8.greaterThanOrEqualTo 255uy 0uy == true
Stdlib.UInt8.greaterThanOrEqualTo 0uy 255uy == false

Stdlib.UInt8.lessThanOrEqualTo 6uy 8uy == true
Stdlib.UInt8.lessThanOrEqualTo 10uy 1uy == false
Stdlib.UInt8.lessThanOrEqualTo 0uy 1uy == true
Stdlib.UInt8.lessThanOrEqualTo 1uy 0uy == false
Stdlib.UInt8.lessThanOrEqualTo 255uy 0uy == false
Stdlib.UInt8.lessThanOrEqualTo 0uy 255uy == true
Stdlib.UInt8.lessThanOrEqualTo 255uy 255uy == true

Stdlib.UInt8.lessThan 6uy 8uy == true
Stdlib.UInt8.lessThan 10uy 1uy == false
Stdlib.UInt8.lessThan 0uy 1uy == true
Stdlib.UInt8.lessThan 1uy 0uy == false
Stdlib.UInt8.lessThan 0uy 255uy == true
Stdlib.UInt8.lessThan 255uy 255uy == false

Stdlib.UInt8.toString 120uy == "120"
Stdlib.UInt8.toString 1uy == "1"
Stdlib.UInt8.toString 0uy == "0" // UInt8 lower limit
Stdlib.UInt8.toString 255uy == "255" // UInt8 upper limit

Stdlib.UInt8.toFloat 2uy == 2.0
Stdlib.UInt8.toFloat 0uy == 0.0

Stdlib.UInt8.sqrt 4uy == 2.0
Stdlib.UInt8.sqrt 100uy == 10.0
Stdlib.UInt8.sqrt 86uy == 9.273618495495704

Stdlib.UInt8.mod 15uy 5uy == 0uy
Stdlib.UInt8.mod 15uy 6uy == 3uy
Stdlib.UInt8.mod 0uy 15uy == 0uy
Stdlib.UInt8.mod 1uy 2uy == 1uy
Stdlib.UInt8.mod 128uy 53uy == 22uy
Stdlib.UInt8.mod 255uy 3uy == 0uy

Stdlib.UInt8.mod 5uy 0uy == Builtin.testDerrorMessage "Zero modulus"


(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt8.random 1uy 2uy)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt8.greaterThanOrEqualTo x 1uy)
  && (Stdlib.UInt8.lessThanOrEqualTo x 2uy)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt8.random 10uy 20uy)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt8.greaterThanOrEqualTo x 10uy)
  && (Stdlib.UInt8.lessThanOrEqualTo x 20uy)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt8.random 2uy 1uy)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt8.greaterThanOrEqualTo x 1uy)
  && (Stdlib.UInt8.lessThanOrEqualTo x 2uy)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt8.random 20uy 10uy)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt8.greaterThanOrEqualTo x 10uy)
  && (Stdlib.UInt8.lessThanOrEqualTo x 20uy)) == [ true; true; true; true; true ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt8.random 0uy 1uy)
 |> Stdlib.List.unique) == [ 0uy; 1uy ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt8.random 0uy 2uy)
 |> Stdlib.List.unique) == [ 0uy; 1uy; 2uy ]

Stdlib.UInt8.sum [ 1uy; 2uy ] == 3uy

Stdlib.UInt8.sum [ 1uy; 255uy ] == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt8.parse "-129" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.OutOfRange())

Stdlib.UInt8.parse "256" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.OutOfRange())

Stdlib.UInt8.parse "256uy" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "1 2 3" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "+ 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "- 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "0xA" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "0x123" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "0b0100" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "PACKAGE.Darklang.Stdlib.Math.pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "1.23E+04" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "1I" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "one" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())

Stdlib.UInt8.parse "XIV" == Stdlib.Result.Result.Error(
  Stdlib.UInt8.ParseError.BadFormat())


Stdlib.UInt8.fromInt8 0y == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromInt8 1y == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromInt8 127y == Stdlib.Option.Option.Some(127uy)

Stdlib.UInt8.fromInt8 (-128y) == Stdlib.Option.Option.None()

Stdlib.UInt8.fromInt16 0s == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromInt16 1s == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromInt16 255s == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromInt16 256s == Stdlib.Option.Option.None()
Stdlib.UInt8.fromInt16 (-1s) == Stdlib.Option.Option.None()

Stdlib.UInt8.fromUInt16 0us == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromUInt16 1us == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromUInt16 255us == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromUInt16 256us == Stdlib.Option.Option.None()

Stdlib.UInt8.fromInt32 0l == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromInt32 1l == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromInt32 255l == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromInt32 256l == Stdlib.Option.Option.None()
Stdlib.UInt8.fromInt32 (-1l) == Stdlib.Option.Option.None()

Stdlib.UInt8.fromUInt32 0ul == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromUInt32 1ul == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromUInt32 255ul == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromUInt32 256ul == Stdlib.Option.Option.None()

Stdlib.UInt8.fromInt64 0L == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromInt64 1L == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromInt64 255L == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromInt64 256L == Stdlib.Option.Option.None()
Stdlib.UInt8.fromInt64 (-1L) == Stdlib.Option.Option.None()

Stdlib.UInt8.fromUInt64 0UL == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromUInt64 1UL == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromUInt64 255UL == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromUInt64 256UL == Stdlib.Option.Option.None()

Stdlib.UInt8.fromInt128 0Q == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromInt128 1Q == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromInt128 255Q == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromInt128 256Q == Stdlib.Option.Option.None()
Stdlib.UInt8.fromInt128 (-1Q) == Stdlib.Option.Option.None()

Stdlib.UInt8.fromUInt128 0Z == Stdlib.Option.Option.Some(0uy)

Stdlib.UInt8.fromUInt128 1Z == Stdlib.Option.Option.Some(1uy)

Stdlib.UInt8.fromUInt128 255Z == Stdlib.Option.Option.Some(255uy)

Stdlib.UInt8.fromUInt128 256Z == Stdlib.Option.Option.None()