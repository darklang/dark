// CLEANUP move all these to LibMisc

module Equals =
  type ERec = { x: Int; y: Int }
  type ERec2 = ERec

  type EEnum =
    | E1
    | E2
    | E3 of Int

  type EEnum2 = EEnum


  (5 == 5) = true
  (5 != 6) = true

  (5.6 == 5.6) = true
  (-55555555555555555555555555555.5 == -55555555555555555555555555555.5) = true
  (5.6 != 5.7) = true

  ("asd" == "asd") = true
  ("asd" != "sad") = true

  (true == true) = true
  (false == false) = true
  (true != false) = true

  (() == ()) = true

  ([ 1; 2; 3 ] == [ 1; 2; 3 ]) = true
  ([ 1; 2; 3 ] != [ 3; 2; 1 ]) = true

  ((PACKAGE.Darklang.Stdlib.String.toBytes_v0 "üßëüèΩ‚Äçü¶∞üßëüèº‚Äçüíªüßëüèª‚Äçüçº")
   == (PACKAGE.Darklang.Stdlib.String.toBytes_v0 "üßëüèΩ‚Äçü¶∞üßëüèº‚Äçüíªüßëüèª‚Äçüçº")) = true

  ((PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z")
   == (PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z")) = true

  ((PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:37Z")
   != (PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z")) = true

  (PACKAGE.Darklang.Stdlib.Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d"
   == PACKAGE.Darklang.Stdlib.Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d") = true

  (PACKAGE.Darklang.Stdlib.Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2e"
   != PACKAGE.Darklang.Stdlib.Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d") = true

  (fun x -> y) = (fun x -> y)
  ((fun x -> let y = 1 in y) == (fun x -> let y = 1 in y)) = true
  ((fun x -> let y = 1 in y) != (fun x -> let y = 2 in x)) = true

  (ERec { x = 6; y = 7 } == ERec { x = 6; y = 7 }) = true
  (ERec { x = 6; y = 7 } == ERec { y = 7; x = 6 }) = true
  (ERec { x = 6; y = 7 } != ERec { x = 7; y = 6 }) = true
  (ERec { x = 6; y = 7 } == ERec2 { y = 7; x = 6 }) = true

  (EEnum.E1 == EEnum.E1) = true
  (EEnum.E1 != EEnum.E2) = true
  (EEnum.E3 5 == EEnum.E3 5) = true
  (EEnum.E3 5 != EEnum.E3 6) = true
  // aliases
  (EEnum2.E1 == EEnum.E1) = true
  (EEnum2.E1 != EEnum.E2) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.None
   == PACKAGE.Darklang.Stdlib.Option.Option.None) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.None
   != PACKAGE.Darklang.Stdlib.Option.Option.Some
     PACKAGE.Darklang.Stdlib.Option.Option.None) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.Some 5
   == PACKAGE.Darklang.Stdlib.Option.Option.Some 5) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.Some 5
   != PACKAGE.Darklang.Stdlib.Option.Option.Some 6) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.Some(
    PACKAGE.Darklang.Stdlib.Option.Option.Some 0
   )
   != PACKAGE.Darklang.Stdlib.Option.Option.Some(
     PACKAGE.Darklang.Stdlib.Option.Option.Some 1
   )) = true

  (PACKAGE.Darklang.Stdlib.Option.Option.Some(
    PACKAGE.Darklang.Stdlib.Option.Option.Some 0
   )
   == PACKAGE.Darklang.Stdlib.Option.Option.Some(
     PACKAGE.Darklang.Stdlib.Option.Option.Some 0
   )) = true

  (PACKAGE.Darklang.Stdlib.Result.Result.Error 0
   == PACKAGE.Darklang.Stdlib.Result.Result.Error 0) = true

  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 0
   == PACKAGE.Darklang.Stdlib.Result.Result.Ok 0) = true

  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 0
   != PACKAGE.Darklang.Stdlib.Result.Result.Error 0) = true


  type MyDBType = { x: String; y: String }

  [<DB>]
  type MyDB = MyDBType

  (MyDB == MyDB) = true

  module TypeErrors =
    (5.7 != 6) = Builtin.Test.derrorMessage "Both values must be the same type"
    (5.7 != 5) = Builtin.Test.derrorMessage "Both values must be the same type"

    (Builtin.Test.runtimeError "test" != Builtin.Test.runtimeError "different msg") = Builtin.Test.derrorMessage
      "test"

    (() != PACKAGE.Darklang.Stdlib.Option.Option.None) = Builtin.Test.derrorMessage
      "Both values must be the same type"

    (() != false) = Builtin.Test.derrorMessage "Both values must be the same type"
    (() != 0) = Builtin.Test.derrorMessage "Both values must be the same type"
    (() != 0.0) = Builtin.Test.derrorMessage "Both values must be the same type"
    (MyDB != 5) = Builtin.Test.derrorMessage "Both values must be the same type"

  // Other ways to call it
  PACKAGE.Darklang.Stdlib.equals_v0 1 1 = true
  (==) 1 1 = true
  1 == 1 = true


module NotEquals =
  PACKAGE.Darklang.Stdlib.notEquals_v0 1 1 = false
  PACKAGE.Darklang.Stdlib.notEquals_v0 "abc" "abc" = false
  PACKAGE.Darklang.Stdlib.notEquals_v0 "abd" "abc" = true

  PACKAGE.Darklang.Stdlib.notEquals_v0
    (PACKAGE.Darklang.Stdlib.DateTime.parse "2021-07-28T22:42:36Z")
    (PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z") = true

  (!=) 1 1 = false
  (!=) "abc" "abc" = false
  (!=) "abd" "abc" = true

  (!=)
    (PACKAGE.Darklang.Stdlib.DateTime.parse "2021-07-28T22:42:36Z")
    (PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z") = true

  1 != 1 = false
  "abc" != "abc" = false
  "abd" != "abc" = true

  (PACKAGE.Darklang.Stdlib.DateTime.parse "2021-07-28T22:42:36Z")
  != (PACKAGE.Darklang.Stdlib.DateTime.parse "2019-07-28T22:42:36Z") = true


// Moving to packages
// AWS.urlencode_v0 "%" = ""
// AWS.urlencode_v0 "%%" = ""
// AWS.urlencode_v0 "%A" = "A"
// AWS.urlencode_v0 "%AA" = "%AA"
// AWS.urlencode_v0 "" = ""
// AWS.urlencode_v0 "ÊÆ¢" = "%E6%AE%A2"
// AWS.urlencode_v0 "https://google.com?q=left shark&l=en" = "https%3A//google.com%3Fq%3Dleft%20shark%26l%3Den" // Test fails without a comment here
// AWS.urlencode_v0 "⁄Ø⁄ÜŸæ⁄ò" = "%DA%AF%DA%86%D9%BE%DA%98"
// AWS.urlencode_v0 "<foo val=‚Äùbar‚Äú />" = "%3Cfoo%20val%3D%E2%80%9Dbar%E2%80%9C%20/%3E"
// AWS.urlencode_v0 "Ë°®„Éù„ÅÇAÈ∑ó≈í√©Ôº¢ÈÄç√ú√ü¬™ƒÖ√±‰∏Ç„êÄ†ÄÄ" = "%E8%A1%A8%E3%83%9D%E3%81%82A%E9%B7%97%C5%92%C3%A9%EF%BC%A2%E9%80%8D%C3%9C%C3%9F%C2%AA%C4%85%C3%B1%E4%B8%82%E3%90%80%F0%A0%80%80"
// Twitter.urlencode_v0 "https://google.com?q=left shark&l=en" = "https%3A%2F%2Fgoogle.com%3Fq%3Dleft%20shark%26l%3Den" // URL percent encoding