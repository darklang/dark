let c (arg: String) : Char =
  (Builtin.testToChar arg) |> Builtin.unwrap

module Equality =
  "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  "Είναι προικισμένοι με λογική" == "Είναι προικισμένοι με λογική"
  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

module Append =
  "" ++ "" == ""
  // TODO parser
  // "a" ++ "̂" == "â"
  "hello" ++ " world" == "hello world"
  "ᄀ" ++ "ᅡᆨ" == "각"
  "" ++ "a" == "a"
  "a" ++ "" == "a"

  // Stdlib.String.append "a" "̂" == "â"
  Stdlib.String.append "" "" == ""
  Stdlib.String.append "hello" " world" == "hello world"
  Stdlib.String.append "hello" "world" == "helloworld" // Stdlib.String.append works for ASCII range
  Stdlib.String.append "ᄀ" "ᅡᆨ" == "각"
  Stdlib.String.append "żółw" "😄" == "żółw😄" // Stdlib.String.append works on non-ascii strings
  Stdlib.String.append "🧑🏼‍💻" "🧑🏻‍🍼" == "🧑🏼‍💻🧑🏻‍🍼"

  Stdlib.String.append "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽👱👱🏻👱🏼👱🏽👱🏾👱🏿"

  Stdlib.String.append "🧟‍♂️🧟‍♀️" "🧟‍♂️" == "🧟‍♂️🧟‍♀️🧟‍♂️"

  Stdlib.String.append "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "👨‍❤️‍💋‍👨"
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇👨‍❤️‍💋‍👨"


module Join =
  (Stdlib.String.join [ "a"; "b"; "c"; "d" ] "|") == "a|b|c|d"

  // (Stdlib.String.join [ "a"; "̂" ] "") |> Stdlib.String.base64UrlEncode == "w6I"

  Stdlib.String.join [ "hello"; " world" ] "" == "hello world"
  Stdlib.String.join [ "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"; "🧟‍♀️" ] "" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽🧟‍♀️"

  Stdlib.String.join [ "👱👱🏻👱🏼👱🏽👱🏾👱🏿"; "👨‍❤️‍💋‍👨"; "﷽﷽﷽" ] ""
  == "👱👱🏻👱🏼👱🏽👱🏾👱🏿👨‍❤️‍💋‍👨﷽﷽﷽"

  Stdlib.String.join [ "🧟‍♀️🧟‍♂️"; "🧟‍♀️🧑🏽‍🦰" ] ""
  == "🧟‍♀️🧟‍♂️🧟‍♀️🧑🏽‍🦰"

  "🏳️⚧️‍️" == "🏳️‍⚧️"

  // TODO parser
  // Stdlib.String.join [ "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️"; "‍⚧️‍️🇵🇷" ] "" == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.join [ "🧟‍♀️🧟‍♂️‍"; "🧟‍♀️🧑🏽‍🦰‍‍" ] ""
  == "🧟‍♀️🧟‍♂️‍🧟‍♀️🧑🏽‍🦰‍‍"

  Stdlib.String.join [ "🧑🏽‍🦰‍"; "🧑🏼‍💻‍‍" ] "" == "🧑🏽‍🦰‍🧑🏼‍💻‍‍"

module ToBytes =
  Stdlib.List.length (Stdlib.String.toBytes "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿") == 62L

  Stdlib.List.length (Stdlib.String.toBytes "😄APPLE🍏") == 13L

  Stdlib.List.length (Stdlib.String.toBytes "Είναι προικισμένοι με λογική") == 53L

  Stdlib.List.length (Stdlib.String.toBytes "") == 0L

  Stdlib.List.length (Stdlib.String.toBytes "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿") == 62L

  Stdlib.List.length (Stdlib.String.toBytes "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽") == 48L

  Stdlib.List.length (Stdlib.String.toBytes "👱👱🏻👱🏼👱🏽👱🏾👱🏿") == 44L

  Stdlib.List.length (Stdlib.String.toBytes "🧟‍♀️🧟‍♂️") == 26L

  Stdlib.List.length (Stdlib.String.toBytes "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷")
  == 82L

  Stdlib.List.length (Stdlib.String.toBytes "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇") == 49L

  Stdlib.List.length (Stdlib.String.toBytes "") == 0L


module FromBytesWithReplacement =
  Stdlib.String.fromBytesWithReplacement (
    (Stdlib.Base64.decode "w6I") |> Builtin.unwrap
  )
  == "â"

  Stdlib.String.fromBytesWithReplacement (
    (Stdlib.Base64.decode "aGVsbG8g8J+YgA==") |> Builtin.unwrap
  )
  == "hello 😀"

  Stdlib.String.fromBytesWithReplacement (
    (Stdlib.Base64.decode "ww==") |> Builtin.unwrap
  )
  == "�"

  Stdlib.String.fromBytesWithReplacement (
    (Stdlib.Base64.decode "7aCA") |> Builtin.unwrap
  )
  == "���"

  Stdlib.String.fromBytesWithReplacement (
    (Stdlib.Base64.decode "aMM=") |> Builtin.unwrap
  )
  == "h�"


module FromBytes =
  Stdlib.String.fromBytes ((Stdlib.Base64.decode "w6I") |> Builtin.unwrap)
  == Stdlib.Option.Option.Some("â")

  Stdlib.String.fromBytes (
    (Stdlib.Base64.decode "aGVsbG8g8J+YgA==") |> Builtin.unwrap
  )
  == Stdlib.Option.Option.Some("hello 😀")

  Stdlib.String.fromBytes ((Stdlib.Base64.decode "ww==") |> Builtin.unwrap)
  == Stdlib.Option.Option.None()

  Stdlib.String.fromBytes ((Stdlib.Base64.decode "7aCA") |> Builtin.unwrap)
  == Stdlib.Option.Option.None()

  Stdlib.String.fromBytes ((Stdlib.Base64.decode "aMM=") |> Builtin.unwrap)
  == Stdlib.Option.Option.None()


module StartsWith =
  Stdlib.String.startsWith "a string" "a s" == true
  Stdlib.String.startsWith "a string" " s" == false
  Stdlib.String.startsWith "żółw" "żó" == true
  Stdlib.String.startsWith "żółw" "r22" == false
  Stdlib.String.startsWith "👩🏻‍🚀🍇" "🍇" == false
  Stdlib.String.startsWith "123456" "123" == true
  Stdlib.String.startsWith "" "" == true
  Stdlib.String.startsWith "E" "\u0014\u0004" == false

  Stdlib.String.startsWith "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏾‍🦰" == false

  Stdlib.String.startsWith "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚"
  == true

  Stdlib.String.startsWith "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽﷽﷽" == true
  Stdlib.String.startsWith "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏿" == false
  Stdlib.String.startsWith "🧟‍♀️🧟‍♂️" "🧟‍♂️" == false

  Stdlib.String.startsWith
    "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
    "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️"
  == true

  Stdlib.String.startsWith "a string" "" == true



module EndsWith =
  Stdlib.String.endsWith "a string" "in" == false
  Stdlib.String.endsWith "a string" "ing" == true
  Stdlib.String.endsWith "a string" "" == true
  Stdlib.String.endsWith "żółw" "żó" == false
  Stdlib.String.endsWith "żółw" "łw" == true
  Stdlib.String.endsWith "👩🏻‍🚀🍇" "🍇" == true
  Stdlib.String.endsWith "123456" "56" == true
  Stdlib.String.endsWith "" "" == true
  Stdlib.String.endsWith "E" "\u0014\u0004" == false
  Stdlib.String.endsWith "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "✋✋🏿✋🏿" == false

  Stdlib.String.endsWith "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "ǧ̗͚̚o̙̔ͮ̇͐̇" == true

  Stdlib.String.endsWith "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "12xsd" == false
  Stdlib.String.endsWith "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "﷽" == false
  Stdlib.String.endsWith "🧟‍♀️🧟‍♂️" "🧟‍♀️" == false

  Stdlib.String.endsWith "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "🏳️‍⚧️‍️🇵🇷"
  == true


module Map =
  Stdlib.String.map "a string" (fun x -> x) == "a string"

  Stdlib.String.map "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" (fun x -> x)
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.map "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" (fun x -> x) == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"

  Stdlib.String.map "👱👱🏻👱🏼👱🏽👱🏾👱🏿" (fun x -> x)
  == "👱👱🏻👱🏼👱🏽👱🏾👱🏿"

  Stdlib.String.map "🧟‍♀️🧟‍♂️" (fun x -> x) == "🧟‍♀️🧟‍♂️"

  Stdlib.String.map "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" (fun x -> x)
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.map "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" (fun x -> 'c') == "cccc"

  Stdlib.String.map "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" (fun x -> 5L)
  == Builtin.testDerrorMessage
    """Function return value should be a Char. However, an Int64 (5) was returned instead.

Expected: Char
Actual: an Int64: 5"""

  // Check that map executes the right number of times
  (let v =
    Stdlib.String.map "a string" (fun x ->
      let _ = Builtin.testIncrementSideEffectCounter false
      'c')

   (v, Builtin.testSideEffectCount ()))
  == ("cccccccc", 8L)



module FromChar =
  Stdlib.String.fromChar 'a' == "a"
  Stdlib.String.fromChar (c "1") == "1"
  Stdlib.String.fromChar (c "👩‍👩‍👧‍👦") == "👩‍👩‍👧‍👦"
  Stdlib.String.fromChar (c "🏳️‍⚧️‍️") == "🏳️‍⚧️‍️"
  Stdlib.String.fromChar (c "👱🏾") == "👱🏾"
  Stdlib.String.fromChar (c "Z̤͔ͧ̑̓") == "Z̤͔ͧ̑̓"



module Base64Decode =
  Stdlib.String.base64Decode "random string"
  == Stdlib.Result.Result.Error("Not a valid base64 string")

  Stdlib.String.base64Decode "illegal chars&@:"
  == Stdlib.Result.Result.Error("Not a valid base64 string")

  Stdlib.String.base64Decode "Kw" == Stdlib.Result.Result.Ok("+")

  Stdlib.String.base64Decode "yLo" == Stdlib.Result.Result.Ok("Ⱥ")

  Stdlib.String.base64Decode "xbzDs8WCdw" == Stdlib.Result.Result.Ok("żółw")

  Stdlib.String.base64Decode "LyotKygmQDk4NTIx"
  == Stdlib.Result.Result.Ok("/*-+(&@98521")

  Stdlib.String.base64Decode "" == Stdlib.Result.Result.Ok("") // empty case


  // Test cases from the spec with padding added
  Stdlib.String.base64Decode "Zg" == Stdlib.Result.Result.Ok("f")

  Stdlib.String.base64Decode "Zg==" == Stdlib.Result.Result.Ok("f")

  Stdlib.String.base64Decode "Zm8" == Stdlib.Result.Result.Ok("fo")

  Stdlib.String.base64Decode "Zm8=" == Stdlib.Result.Result.Ok("fo")

  Stdlib.String.base64Decode "Zm9v" == Stdlib.Result.Result.Ok("foo")

  Stdlib.String.base64Decode "Zm9vYg" == Stdlib.Result.Result.Ok("foob")

  Stdlib.String.base64Decode "Zm9vYg==" == Stdlib.Result.Result.Ok("foob")

  Stdlib.String.base64Decode "Zm9vYmE" == Stdlib.Result.Result.Ok("fooba")

  Stdlib.String.base64Decode "Zm9vYmE=" == Stdlib.Result.Result.Ok("fooba")

  Stdlib.String.base64Decode "Zm9vYmFy" == Stdlib.Result.Result.Ok("foobar")


  // "Impossible cases" from apache
  // https://commons.apache.org/proper/commons-codec/xref-test/org/apache/commons/codec/binary/Base64Test.html
  Stdlib.String.base64Decode "ZE==" == Stdlib.Result.Result.Ok("d")

  Stdlib.String.base64Decode "ZmC=" == Stdlib.Result.Result.Ok("f`")

  Stdlib.String.base64Decode "Zm9vYE==" == Stdlib.Result.Result.Ok("foo`")

  Stdlib.String.base64Decode "Zm9vYmC=" == Stdlib.Result.Result.Ok("foob`")

  Stdlib.String.base64Decode
    "ZnJvbT0wNi8wNy8yMDEzIHF1ZXJ5PSLOms6xzrvPjs-CIM6_z4HOr8-DzrHPhM61Ig"
  == Stdlib.Result.Result.Ok("from=06/07/2013 query=\"Καλώς ορίσατε\"")

  Stdlib.String.base64Decode
    "8J-RsfCfkbHwn4-78J-RsfCfj7zwn5Gx8J-PvfCfkbHwn4--8J-RsfCfj78"
  == Stdlib.Result.Result.Ok("👱👱🏻👱🏼👱🏽👱🏾👱🏿")


  Stdlib.String.base64Decode "-p"
  == Stdlib.Result.Result.Error("Invalid UTF-8 string")

  Stdlib.String.base64Decode "lI"
  == Stdlib.Result.Result.Error("Invalid UTF-8 string")

  Stdlib.String.base64Decode "5Sk"
  == Stdlib.Result.Result.Error("Invalid UTF-8 string")


module Base64UrlEncode =
  Stdlib.String.base64UrlEncode "+" == "Kw"
  Stdlib.String.base64UrlEncode "Ⱥ" == "yLo"
  Stdlib.String.base64UrlEncode "żółw" == "xbzDs8WCdw"
  Stdlib.String.base64UrlEncode "/*-+(&@98521" == "LyotKygmQDk4NTIx"
  Stdlib.String.base64UrlEncode "" == ""
  Stdlib.String.base64UrlEncode "f" == "Zg"
  Stdlib.String.base64UrlEncode "fo" == "Zm8"
  Stdlib.String.base64UrlEncode "foo" == "Zm9v"
  Stdlib.String.base64UrlEncode "foob" == "Zm9vYg"
  Stdlib.String.base64UrlEncode "fooba" == "Zm9vYmE"
  Stdlib.String.base64UrlEncode "foobar" == "Zm9vYmFy"
  Stdlib.String.base64UrlEncode "Hello World" == "SGVsbG8gV29ybGQ"

  Stdlib.String.base64UrlEncode "from=06/07/2013 query=\"Καλώς ορίσατε\""
  == "ZnJvbT0wNi8wNy8yMDEzIHF1ZXJ5PSLOms6xzrvPjs-CIM6_z4HOr8-DzrHPhM61Ig"

  Stdlib.String.base64UrlEncode "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  == "8J-RsfCfkbHwn4-78J-RsfCfj7zwn5Gx8J-PvfCfkbHwn4--8J-RsfCfj78"


module Base64Encode =
  Stdlib.String.base64Encode "+" == "Kw=="
  Stdlib.String.base64Encode "Ⱥ" == "yLo="
  Stdlib.String.base64Encode "żółw" == "xbzDs8WCdw=="
  Stdlib.String.base64Encode "/*-+(&@98521" == "LyotKygmQDk4NTIx"
  Stdlib.String.base64Encode "" == ""
  Stdlib.String.base64Encode "f" == "Zg=="
  Stdlib.String.base64Encode "fo" == "Zm8="
  Stdlib.String.base64Encode "foo" == "Zm9v"
  Stdlib.String.base64Encode "foob" == "Zm9vYg=="
  Stdlib.String.base64Encode "fooba" == "Zm9vYmE="
  Stdlib.String.base64Encode "foobar" == "Zm9vYmFy"
  Stdlib.String.base64Encode "Hello World" == "SGVsbG8gV29ybGQ="

  Stdlib.String.base64Encode "from=06/07/2013 query=\"Καλώς ορίσατε\""
  == "ZnJvbT0wNi8wNy8yMDEzIHF1ZXJ5PSLOms6xzrvPjs+CIM6/z4HOr8+DzrHPhM61Ig=="

  Stdlib.String.base64Encode "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  == "8J+RsfCfkbHwn4+78J+RsfCfj7zwn5Gx8J+PvfCfkbHwn4++8J+RsfCfj78="


module Digest =
  Stdlib.String.digest ""
  == "OLBgp1GsljhM2TJ-sbHjaiH9txEUvgdDTAzHv2P24donTt6_529l-9Ua0vFImLlb"

  Stdlib.String.digest "😄"
  == "Z2Y7YuyYHR9miKrg6mLtxSTaHRpGZuaenmGQl3QFY58pwhPCK2bIYxJQ728ChJwA"

  Stdlib.String.digest "ελπίδα"
  == "j4uJEeBe6g8QrzbuxoI2roUgapGQiExE8CWEQqZao61eZVN1iSZ8cV39IM1nGqsa"

  Stdlib.String.digest "/*-+(&@98521"
  == "wSGXFkLMpPufNoF2mUBAjT4YlUEb9cl0Iliy4qohwt1XFpg51PRJVTWndn5PewSr"

  Stdlib.String.digest "👩🏻‍🚀🍇"
  == "hVrNUSbFOfYXwZe6zQRUFFfGPe90qr-aROG2n-hMk8kAC-xodOyHOqecLWb9HIKJ"

  Stdlib.String.digest "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿"
  == "7Fo0ImavUzoUM_9kdjucgh6pYAHk5VovpTOUObvxacS31QoCTkcE4rpcQbJJpshE"

  Stdlib.String.digest "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  == "U2v72uGbUR_UIiD5qF6L21pKzYi4B6OB76HGtbpM0o-2_4YB3ytPjJ7w9png3L9k"

  Stdlib.String.digest "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  == "c1Wm67axXlBaejcJZxct80MvexdTtyyrTK9J9-_4RqgP1pf4Bk9SoMZpsnXpvLIx"

  Stdlib.String.digest "🧟‍♀️🧟‍♂️"
  == "FBnrDureCzgPeGP9qOuW1BIiF2Wz5WejO5XtJWa81qCxcD6cZ4A_WAB0ZJzhOErc"

  Stdlib.String.digest "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
  == "3QFqrhTPpxeje6XUNObFt2eJZZ1t0pAcX42AFdFVv42hco0bTOopQK3py4KMBT0m"


module Random =
  (Stdlib.String.random 5L) == (Stdlib.String.random 5L) == false

  Stdlib.String.random -1L
  == Stdlib.Result.Result.Error("Expected `length` to be positive, but it was `-1`")

  Stdlib.String.length ((Stdlib.String.random 10L) |> Builtin.unwrap) == 10L

  Stdlib.String.length ((Stdlib.String.random 5L) |> Builtin.unwrap) == 5L

  Stdlib.String.length ((Stdlib.String.random 0L) |> Builtin.unwrap) == 0L


module HtmlEscape =
  Stdlib.String.htmlEscape "test<>&\"" == "test&lt;&gt;&amp;&quot;" // HTML escaping works reasonably

  Stdlib.String.htmlEscape
    "<html><head></head><body><h1>This is f#</h1></body></html>"
  == "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is f#&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;" // HTML escaping works reasonably

  Stdlib.String.htmlEscape
    "<html><head><!-- head definitions go here --></head><body><!-- the content goes here --></body></html>"
  == "&lt;html&gt;&lt;head&gt;&lt;!-- head definitions go here --&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- the content goes here --&gt;&lt;/body&gt;&lt;/html&gt;"

  Stdlib.String.htmlEscape "" == ""
  Stdlib.String.htmlEscape "😄" == "😄"

  Stdlib.String.htmlEscape "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.htmlEscape "<html><head></head><body><h1>﷽﷽﷽﷽﷽</h1></body></html>"
  == "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;﷽﷽﷽﷽﷽&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"

  Stdlib.String.htmlEscape "<head>🧟‍♀️🧟‍♂️</head>"
  == "&lt;head&gt;🧟‍♀️🧟‍♂️&lt;/head&gt;"

  Stdlib.String.htmlEscape "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"


module IsEmpty =
  Stdlib.String.isEmpty "" == true
  Stdlib.String.isEmpty "a" == false
  Stdlib.String.isEmpty "🧑🏼‍💻🧑🏻‍🍼" == false
  Stdlib.String.isEmpty "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" == false
  Stdlib.String.isEmpty "﷽﷽﷽﷽﷽" == false
  Stdlib.String.isEmpty "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == false
  Stdlib.String.isEmpty "🧟‍♀️🧟‍♂️" == false
  Stdlib.String.isEmpty "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" == false


module NewLine =
  Stdlib.String.newline == "\n"


module Length =
  Stdlib.String.length "😄" == 1L
  Stdlib.String.length "" == 0L
  Stdlib.String.length "abcdef" == 6L
  Stdlib.String.length "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" == 6L
  Stdlib.String.length "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" == 5L
  Stdlib.String.length "﷽﷽﷽﷽﷽" == 5L
  Stdlib.String.length "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == 6L
  Stdlib.String.length "🧟‍♀️🧟‍♂️" == 2L
  Stdlib.String.length "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" == 4L


module Prepend =
  Stdlib.String.prepend "hello" "world" == "worldhello" // Stdlib.String.prepend works for ASCII range
  Stdlib.String.prepend "hello" "" == "hello"
  Stdlib.String.prepend "" "hello" == "hello"
  Stdlib.String.prepend "żółw" "😄" == "😄żółw" // Stdlib.String.prepend works on non-ascii strings
  Stdlib.String.prepend "123" "456" == "456123"
  Stdlib.String.prepend "óñÜá" "abc" == "abcóñÜá"

  Stdlib.String.prepend "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓"
  == "Z̤͔ͧ̑̓Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.prepend "﷽﷽﷽﷽﷽" "👨‍❤️‍💋‍👨" == "👨‍❤️‍💋‍👨﷽﷽﷽﷽﷽"
  Stdlib.String.prepend "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"

  Stdlib.String.prepend "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "✋🏻"
  == "✋🏻👱👱🏻👱🏼👱🏽👱🏾👱🏿"

  Stdlib.String.prepend "🧟‍♀️🧟‍♂️" "🧟‍♂️" == "🧟‍♂️🧟‍♀️🧟‍♂️"

  Stdlib.String.prepend "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👨‍❤️‍💋‍👨"
  == "👨‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.prepend "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧟‍♂️"
  == "🧟‍♂️żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"


module ReplaceAll =
  Stdlib.String.replaceAll "abcABCcbaCBA" "b" "x" == "axcABCcxaCBA"
  Stdlib.String.replaceAll "abcABCcbaCBA" "" "x" == "xaxbxcxAxBxCxcxbxaxCxBxAx"
  Stdlib.String.replaceAll "" "" "&" == "&"
  Stdlib.String.replaceAll "abcABCcbaCBA" "b" "" == "acABCcaCBA"

  Stdlib.String.replaceAll "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "ä͖̭̈̇" "$"
  == "Z̤͔ͧ̑̓$lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.replaceAll "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽" "$" == "$$$$$$$$"

  Stdlib.String.replaceAll "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏽" "✋🏻"
  == "👱👱🏻👱🏼✋🏻👱🏾👱🏿"

  Stdlib.String.replaceAll "🧟‍♀️🧟‍♂️" "🧟‍♂️" "🧑🏽‍🦰" == "🧟‍♀️🧑🏽‍🦰"

  Stdlib.String.replaceAll
    "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
    "👨‍❤️‍💋‍👨"
    "👨‍❤️‍💋‍👨"
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.replaceAll "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏻‍🍼" "🧟‍♂️"
  == "żółw🧑🏽‍🦰🧟‍♂️✋✋🏻✋🏿"


module Slugify =
  Builtin.stringSlugify
    "  M@y  'super'  Really- exce+llent *Uber_ ama\"zing* ~very   5x5 ~ \"clever\" thing: coffee😭!"
  == "my-super-really-excellent-uber-amazing-very-5x5-clever-thing-coffee"

  Builtin.stringSlugify
    "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭!"
  == "my-super-really-excellent-uber-amazing-very-clever-thing-coffee"

  Builtin.stringSlugify "" == ""
  Builtin.stringSlugify "ABCD-45646sassa" == "abcd-45646sassa"
  Builtin.stringSlugify "ddsd516ds125sd12sd12Ü" == "ddsd516ds125sd12sd12"
  Builtin.stringSlugify "q=\u0002$\u001a<+MC" == "qmc"
  Builtin.stringSlugify "🎁🎄Ǣʚ231" == "231"
  Builtin.stringSlugify "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" == ""
  Builtin.stringSlugify "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" == "zlo"
  Builtin.stringSlugify "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == ""
  Builtin.stringSlugify "🧟‍♀️🧟‍♂️" == ""
  Builtin.stringSlugify "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" == ""

  Builtin.stringSlugify
    "b\x01c\x02d\x03e\x04f\x05g\x06h\x07i\x08j\x09k\x0Al\x0Bm\x0Cn\x0Do\x0Ep\x0Fq"
  == "bcdefghij-k-lm-n-opq"

  Builtin.stringSlugify
    "a\x10b\x11c\x12d\x13e\x14f\x15g\x16h\x17i\x18j\x19k\x1Al\x1Bm\x1Cn\x1Do\x1Ep\x1Fq"
  == "abcdefghijklmnopq"

  Builtin.stringSlugify "!\"#$%&'()*+,-./" == "-"
  Builtin.stringSlugify ":;<=>?@" == ""
  Builtin.stringSlugify "[\\]^_`" == "-"
  Builtin.stringSlugify "{|}~\x7F" == ""


module FromList =
  Stdlib.String.fromList [] == ""
  Stdlib.String.fromList [ c "a" ] == "a"

  Stdlib.String.fromList [ c "👩‍👩‍👧‍👦"; c "🏳️‍⚧️‍️"; c "👱🏾"; c "Z̤͔ͧ̑̓" ]
  == "👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓"

  Stdlib.String.fromList [ "a" ]
  == Builtin.testDerrorMessage
    """PACKAGE.Darklang.Stdlib.String.fromList's 1st argument (`lst`) should be a List<Char>. However, a List<String> ([  \"a\"]) was passed instead.

Expected: (lst: List<Char>)
Actual: a List<String>: [\n  \"a\"\n]"""


module ToList =
  Stdlib.String.toList "" == []
  Stdlib.String.toList "ab" == [ 'a'; 'b' ]
  Stdlib.String.toList "👨‍👩‍👧‍👦" == [ c "👨‍👩‍👧‍👦" ]

  Stdlib.String.toList "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  == [ (c "Z̤͔ͧ̑̓") (c "ä͖̭̈̇") (c "lͮ̒ͫ") (c "ǧ̗͚̚") (c "o̙̔ͮ̇͐̇") ]


  Stdlib.String.toList "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  == [ (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽")
       (c "﷽") ]

  Stdlib.String.toList "🧟‍♀️🧟‍♂️" == [ c "🧟‍♀️"; c "🧟‍♂️" ]

  Stdlib.String.toList "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  == [ (c "👱") (c "👱🏻") (c "👱🏼") (c "👱🏽") (c "👱🏾") (c "👱🏿") ]


  Stdlib.String.toList "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  == [ (c "ż")
         (c "ó")
         (c "ł")
         (c "w")
         (c "🧑🏽‍🦰")
         (c "🧑🏻‍🍼")
         (c "✋")
         (c "✋🏻")
         (c "✋🏿") ]

  ("ab1" |> Stdlib.String.toList |> Stdlib.String.fromList) == "ab1"

  ("@Ǣá1" |> Stdlib.String.toList |> Stdlib.String.fromList) == "@Ǣá1"

  ("👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓"
   |> Stdlib.String.toList
   |> Stdlib.String.fromList)
  == "👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓"


module Split =
  Stdlib.String.split "hello world" "notfound" == [ "hello world" ]
  Stdlib.String.split "hello😄world" "😄" == [ "hello"; "world" ]
  Stdlib.String.split "hello&&&&world" "&&&&" == [ "hello"; "world" ]

  Stdlib.String.split "hello34564world34564sun" "😄"
  == [ "hello34564world34564sun" ]

  Stdlib.String.split "hello34564world34564sun" "34564"
  == [ "hello"; "world"; "sun" ]

  Stdlib.String.split "" "34564" == [ "" ]
  Stdlib.String.split "34564" "" == [ "3"; "4"; "5"; "6"; "4" ]

  Stdlib.String.split "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏻‍🍼"
  == [ "🧑🏽‍🦰🧑🏼‍💻" "✋✋🏻✋🏿" ]

  Stdlib.String.split "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  == [ "" "" ]

  Stdlib.String.split "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽﷽﷽" == [ ""; ""; ""; ""; "" ]

  Stdlib.String.split "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏼👱🏽"
  == [ "👱👱🏻"; "👱🏾👱🏿" ]

  Stdlib.String.split "🧟‍♀️🧟‍♂️" "👱🏽" == [ "🧟‍♀️🧟‍♂️" ]

  Stdlib.String.split "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👩‍👩‍👧‍👦"
  == [ "👨‍❤️‍💋‍👨" "🏳️‍⚧️‍️🇵🇷" ]

  Stdlib.String.split "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏽‍🦰"
  == [ "żółw" "🧑🏻‍🍼✋✋🏻✋🏿" ]

  Stdlib.String.split "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ"
  == [ "" "ǧ̗͚̚o̙̔ͮ̇͐̇" ]

  Stdlib.String.split "666666" "6" == [ ""; ""; ""; ""; ""; ""; "" ]
  Stdlib.String.split "55555" "5" == [ ""; ""; ""; ""; ""; "" ]
  Stdlib.String.split "4444" "4" == [ ""; ""; ""; ""; "" ]
  Stdlib.String.split "333" "3" == [ ""; ""; ""; "" ]
  Stdlib.String.split "22" "2" == [ ""; ""; "" ]
  Stdlib.String.split "1" "1" == [ ""; "" ]
  Stdlib.String.split "" "" == []

  Stdlib.String.split "666666x" "6" == [ ""; ""; ""; ""; ""; ""; "x" ]

  Stdlib.String.split "55555x" "5" == [ ""; ""; ""; ""; ""; "x" ]
  Stdlib.String.split "4444x" "4" == [ ""; ""; ""; ""; "x" ]
  Stdlib.String.split "333x" "3" == [ ""; ""; ""; "x" ]
  Stdlib.String.split "22x" "2" == [ ""; ""; "x" ]
  Stdlib.String.split "1x" "1" == [ ""; "x" ]

  Stdlib.String.split "x666666" "6" == [ "x"; ""; ""; ""; ""; ""; "" ]

  Stdlib.String.split "x55555" "5" == [ "x"; ""; ""; ""; ""; "" ]
  Stdlib.String.split "x4444" "4" == [ "x"; ""; ""; ""; "" ]
  Stdlib.String.split "x333" "3" == [ "x"; ""; ""; "" ]
  Stdlib.String.split "x22" "2" == [ "x"; ""; "" ]
  Stdlib.String.split "x1" "1" == [ "x"; "" ]

  Stdlib.String.split "x666666y" "6" == [ "x"; ""; ""; ""; ""; ""; "y" ]

  Stdlib.String.split "x55555y" "5" == [ "x"; ""; ""; ""; ""; "y" ]
  Stdlib.String.split "x4444y" "4" == [ "x"; ""; ""; ""; "y" ]
  Stdlib.String.split "x333y" "3" == [ "x"; ""; ""; "y" ]
  Stdlib.String.split "x22y" "2" == [ "x"; ""; "y" ]
  Stdlib.String.split "x1y" "1" == [ "x"; "y" ]

  Stdlib.String.split "6a6aa6aaa6aaaa" "a"
  == [ "6"; "6"; ""; "6"; ""; ""; "6"; ""; ""; ""; "" ]

  Stdlib.String.split "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" ""
  == [ "👨‍❤️‍💋‍👨" "👩‍👩‍👧‍👦" "🏳️‍⚧️‍️" "🇵🇷" ]

  Stdlib.String.split "👨‍👩‍👧‍👦" "👩" == [ "👨‍👩‍👧‍👦" ]


module ToLowercase =
  Stdlib.String.toLowercase "HELLO😄WORLD" == "hello😄world"
  Stdlib.String.toLowercase "" == ""
  Stdlib.String.toLowercase "ABCDEF" == "abcdef" // Stdlib.String.toLowercase works for ASCII range
  Stdlib.String.toLowercase "AB323CDEF" == "ab323cdef"
  Stdlib.String.toLowercase "SÁNCHEZ" == "sánchez" // not lowercase a
  Stdlib.String.toLowercase "sánchez" == "sánchez"
  Stdlib.String.toLowercase "ŻÓŁW" == "żółw" // Stdlib.String.toLowercase works on non-ascii strings
  Stdlib.String.toLowercase "😄ORANGE" == "😄orange"
  Stdlib.String.toLowercase "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" == "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  Stdlib.String.toLowercase "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  Stdlib.String.toLowercase "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  Stdlib.String.toLowercase "🧟‍♀️🧟‍♂️" == "🧟‍♀️🧟‍♂️"

  Stdlib.String.toLowercase "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.toLowercase "ŻÓŁW🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  == "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.toLowercase "Ჾ" == "ჾ"

  Stdlib.String.toLowercase "Z̤͔ͧ̑̓Ä͖̭̈̇Lͮ̒ͫǦ̗͚̚O̙̔ͮ̇͐̇"
  == "z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.toLowercase
    "H̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠B̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅT͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝W͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕"
  == "h̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈w̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠b̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅt͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝w͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕"



module ToUppercase =
  Stdlib.String.toUppercase "" == ""
  Stdlib.String.toUppercase "hello😄world" == "HELLO😄WORLD"
  Stdlib.String.toUppercase "abcdef" == "ABCDEF"
  Stdlib.String.toUppercase "ab323cdef" == "AB323CDEF"
  Stdlib.String.toUppercase "sánchez" == "SÁNCHEZ" // not lowercase a
  Stdlib.String.toUppercase "SÁNChEZ" == "SÁNCHEZ"
  Stdlib.String.toUppercase "żółw" == "ŻÓŁW"
  Stdlib.String.toUppercase "😄orange" == "😄ORANGE"
  Stdlib.String.toUppercase "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" == "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  Stdlib.String.toUppercase "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  Stdlib.String.toUppercase "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
  Stdlib.String.toUppercase "🧟‍♀️🧟‍♂️" == "🧟‍♀️🧟‍♂️"

  Stdlib.String.toUppercase "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.toUppercase "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  == "ŻÓŁW🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.toUppercase "ჾ" == "Ჾ"

  // TODO: There are two types of unicode case "mapping" (conversion), "simple"
  // and "full". .NET supports simple mapping, which maps a single character to a
  // single character. It does not support "full" mapping, which maps a single
  // character to multiple characters.

  // Discussed at https://github.com/dotnet/runtime/issues/30960, specifially
  // https://github.com/dotnet/runtime/issues/30960#issuecomment-535274401

  // A possible solution is to write our own case mapper, or reuse an existing
  // one. A potential candidate is
  // https://github.com/dotnet/corefxlab/tree/archive/src/System.Text.CaseFolding
  // (packaged at
  // https://dnceng.visualstudio.com/public/_packaging?_a=package&feed=dotnet-experimental&view=overview&package=System.Text.CaseFolding&version=0.1.2-alpha.21059.1&protocolType=NuGet)

  Stdlib.String.toUppercase "ﬁﬂ" == "ﬁﬂ" // should be "FIFL"
  Stdlib.String.toUppercase "և" == "և" // should be "ԵՒ"

  Stdlib.String.toUppercase "z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  == "Z̤͔ͧ̑̓Ä͖̭̈̇Lͮ̒ͫǦ̗͚̚O̙̔ͮ̇͐̇"

  Stdlib.String.toUppercase
    "H̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠B̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅT͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝W͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕"
  == "H̬̤̗̤͝E͜ ̜̥̝̻͍̟́W̕H̖̯͓O̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭A̺̪͍Į͈͕̭͙̯̜T̶̼̮S̘͙͖̕ ̠̫̠B̻͍͙͉̳ΙE̵H̵̬͇̫͙I̹͓̳̳̮͎̫̕N͟D̴̪̜̖ ̰͉̩͇͙̲͞ΙT͖̼͓̪͢H͏͓̮̻E̬̝̟Ι ̤̹̝W͙̞̝͔͇͝ΙA͏͓͔̹̼̣L̴͔̰̤̟͔Ḽ̫.͕"


module TrimEnd =
  Stdlib.String.trimEnd "      " == ""
  Stdlib.String.trimEnd "" == ""
  Stdlib.String.trimEnd "  foo  " == "  foo"
  Stdlib.String.trimEnd "  foo bar  " == "  foo bar"
  Stdlib.String.trimEnd "  foo" == "  foo"
  Stdlib.String.trimEnd " 😄foobar😄 " == " 😄foobar😄"
  Stdlib.String.trimEnd "  foo bar  " == "  foo bar"
  Stdlib.String.trimEnd "foo  " == "foo"
  Stdlib.String.trimEnd "foo" == "foo"

  Stdlib.String.trimEnd " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 "
  == " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83"

  Stdlib.String.trimEnd " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 "
  == " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84"

  Stdlib.String.trimEnd "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   "
  == "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.trimEnd "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  "
  == "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.trimEnd "       ﷽﷽  " == "       ﷽﷽"
  Stdlib.String.trimEnd " 🧟‍♀️🧟‍♂️ " == " 🧟‍♀️🧟‍♂️"

  Stdlib.String.trimEnd " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     "
  == " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.trimEnd "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  "
  == "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.trimEnd "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸" == "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸"


module TrimStart =
  Stdlib.String.trimStart " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 "
  == "\xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 "

  Stdlib.String.trimStart " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 "
  == "\xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 "

  Stdlib.String.trimStart "      " == ""
  Stdlib.String.trimStart "" == ""
  Stdlib.String.trimStart "  foo  " == "foo  "
  Stdlib.String.trimStart "  foo bar  " == "foo bar  "
  Stdlib.String.trimStart "  foo" == "foo"
  Stdlib.String.trimStart " 😄foobar😄 " == "😄foobar😄 "
  Stdlib.String.trimStart "  foo bar  " == "foo bar  "
  Stdlib.String.trimStart "foo  " == "foo  "
  Stdlib.String.trimStart "foo" == "foo"

  Stdlib.String.trimStart "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   "
  == "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   "

  Stdlib.String.trimStart "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  "
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  "

  Stdlib.String.trimStart "       ﷽﷽  " == "﷽﷽  "
  Stdlib.String.trimStart " 🧟‍♀️🧟‍♂️ " == "🧟‍♀️🧟‍♂️ "

  Stdlib.String.trimStart " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     "
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     "

  Stdlib.String.trimStart "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  "
  == "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  "


module Trim =
  Stdlib.String.trim "      " == ""
  Stdlib.String.trim "" == ""
  Stdlib.String.trim "  foo  " == "foo" // String trims both leading + trailing spaces
  Stdlib.String.trim "  foo bar  " == "foo bar" // String trims both leading + trailing spaces, leaving inner untouched
  Stdlib.String.trim "  foo" == "foo" // String trims leading spaces
  Stdlib.String.trim " 😄foobar😄 " == "😄foobar😄" // String trims both leading + trailing spaces, preserving emoji
  Stdlib.String.trim "  foo bar " == "foo bar" // String trims both leading + trailing spaces, leaving inner untouched w/ unicode spaces
  Stdlib.String.trim "foo  " == "foo" // String trims trailing spaces
  Stdlib.String.trim "foo" == "foo" // String trim noops

  Stdlib.String.trim "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   "
  == "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.trim "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  "
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.trim "       ﷽﷽" == "﷽﷽"
  Stdlib.String.trim " 🧟‍♀️🧟‍♂️ " == "🧟‍♀️🧟‍♂️"

  Stdlib.String.trim " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     "
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.trim "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
  == "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.trim " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 "
  == "\xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83"

  Stdlib.String.trim " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 "
  == "\xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84"

  Stdlib.String.trim "쉆ꥨ逴皪巌䖑ⱝዓ淋" == "쉆ꥨ逴皪巌䖑ⱝዓ淋"


module Reverse =
  Stdlib.String.reverse "abcde" == "edcba"
  Stdlib.String.reverse "0abcde" == "edcba0"
  Stdlib.String.reverse "a" == "a"
  Stdlib.String.reverse "" == ""
  Stdlib.String.reverse "ábc" == "cbá"
  Stdlib.String.reverse "🎁🧸Ǆʠ123" == "321ʠǄ🧸🎁"
  Stdlib.String.reverse "😄foobar👽" == "👽raboof😄"
  Stdlib.String.reverse "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" == "✋🏿✋🏻✋🧑🏻‍🍼🧑🏽‍🦰włóż"
  Stdlib.String.reverse "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  Stdlib.String.reverse "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == "👱🏿👱🏾👱🏽👱🏼👱🏻👱"
  Stdlib.String.reverse "🧟‍♀️🧟‍♂️" == "🧟‍♂️🧟‍♀️"

  Stdlib.String.reverse "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
  == "🇵🇷🏳️‍⚧️‍️👩‍👩‍👧‍👦👨‍❤️‍💋‍👨"

  Stdlib.String.reverse "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  == "o̙̔ͮ̇͐̇ǧ̗͚̚lͮ̒ͫä͖̭̈̇Z̤͔ͧ̑̓"


module DropFirst =
  Stdlib.String.dropFirst "abcd" -3L == "abcd"
  Stdlib.String.dropFirst "abcd" 0L == "abcd"
  Stdlib.String.dropFirst "abcd" 3L == "d"
  Stdlib.String.dropFirst "" 3L == ""
  Stdlib.String.dropFirst "abcd" 3L == "d"
  Stdlib.String.dropFirst "🍏🍒🍒" 1L == "🍒🍒"
  Stdlib.String.dropFirst "🍏🍒🍍" 2L == "🍍"
  Stdlib.String.dropFirst "🍏a🍒b🍍c" 2L == "🍒b🍍c"
  Stdlib.String.dropFirst "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 5L == "🧑🏻‍🍼✋✋🏻✋🏿"

  Stdlib.String.dropFirst "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 1L
  == "ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.dropFirst "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2L == "lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
  Stdlib.String.dropFirst "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 3L == "ǧ̗͚̚o̙̔ͮ̇͐̇"
  Stdlib.String.dropFirst "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 1L == "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
  Stdlib.String.dropFirst "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 1L == "👱🏻👱🏼👱🏽👱🏾👱🏿"
  Stdlib.String.dropFirst "🧟‍♀️🧟‍♂️" 20L == ""
  Stdlib.String.dropFirst "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 3L == "🇵🇷"


module DropLast =
  Stdlib.String.dropLast "abcd" -3L == "abcd"
  Stdlib.String.dropLast "abcd" 0L == "abcd"
  Stdlib.String.dropLast "abcd" 3L == "a"
  Stdlib.String.dropLast "" 3L == ""
  Stdlib.String.dropLast "🍏🍒🍒" 1L == "🍏🍒"
  Stdlib.String.dropLast "🍏🍒🍍" 2L == "🍏"
  Stdlib.String.dropLast "🍏a🍒b🍍c" 2L == "🍏a🍒b"
  Stdlib.String.dropLast "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2L == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ"
  Stdlib.String.dropLast "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 10L == "﷽﷽﷽﷽﷽﷽"
  Stdlib.String.dropLast "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 3L == "👱👱🏻👱🏼"
  Stdlib.String.dropLast "🧟‍♀️🧟‍♂️" 20L == ""

  Stdlib.String.dropLast "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 2L
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦"

  Stdlib.String.dropLast "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 4L == "żółw🧑🏽‍🦰"


module Last =
  Stdlib.String.last "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 4L == "🧑🏻‍🍼✋✋🏻✋🏿"
  Stdlib.String.last "abcd" -3L == ""
  Stdlib.String.last "abcd" 0L == ""
  Stdlib.String.last "" 7L == ""
  Stdlib.String.last "abcd" 1L == "d"
  Stdlib.String.last "abcd" 2L == "cd"
  Stdlib.String.last "abcd" 3L == "bcd"
  Stdlib.String.last "🍍🍍🍏" 1L == "🍏"
  Stdlib.String.last "🍊🍍🍏" 2L == "🍍🍏"
  Stdlib.String.last "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿🧑🏻‍🍼" 1L == "🧑🏻‍🍼"
  Stdlib.String.last "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2L == "ǧ̗͚̚o̙̔ͮ̇͐̇"
  Stdlib.String.last "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 2L == "﷽﷽"
  Stdlib.String.last "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 3L == "👱🏽👱🏾👱🏿"
  Stdlib.String.last "🧟‍♀️🧟‍♂️" 1L == "🧟‍♂️"
  Stdlib.String.last "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 1L == "🇵🇷"


module Contains =
  Stdlib.String.contains "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "2223" == false
  Stdlib.String.contains "👱👱🏻👱🏼👱🏽👱🏾" "👱🏿" == false
  Stdlib.String.contains "🧟‍♀️🧟‍♂️" "🧟‍♂️" == true
  Stdlib.String.contains "🧟‍♀️🧟‍♂️" "🧟‍♂️🧟‍♂️" == false

  Stdlib.String.contains "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦"
  == true

  Stdlib.String.contains "اختبار" "اختبار" == true
  Stdlib.String.contains "" "" == true
  Stdlib.String.contains "a" "" == true
  Stdlib.String.contains "" "a" == false


module Slice =
  Stdlib.String.slice "abcd" -2L 4L == "cd"
  Stdlib.String.slice "abcd" -5L -6L == ""
  Stdlib.String.slice "abcd" -5L 1L == "a"
  Stdlib.String.slice "abcd" 0L -1L == "abc"
  Stdlib.String.slice "abcd" 2L 3L == "c"
  Stdlib.String.slice "abcd" 2L 6L == "cd"
  Stdlib.String.slice "abcd" 3L 2L == ""
  Stdlib.String.slice "abcd" 5L 6L == ""
  Stdlib.String.slice "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 2L 10L == "✋✋🏻✋🏿"
  Stdlib.String.slice "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 1L 3L == "ä͖̭̈̇lͮ̒ͫ"
  Stdlib.String.slice "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 2L 6L == "﷽﷽﷽﷽"
  Stdlib.String.slice "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 2L 6L == "👱🏼👱🏽👱🏾👱🏿"
  Stdlib.String.slice "🧟‍♀️🧟‍♂️" 2L 4L == ""

  Stdlib.String.slice "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 2L 10L
  == "🏳️‍⚧️‍️🇵🇷"

  Stdlib.String.slice "abc" 0L 4503599627370498L == "abc"


module First =
  Stdlib.String.first "abcd" -3L == ""
  Stdlib.String.first "abcd" 0L == ""
  Stdlib.String.first "abcd" 1L == "a"
  Stdlib.String.first "abcd" 2L == "ab"
  Stdlib.String.first "abcd" 3L == "abc"
  Stdlib.String.first "abcd" 3000000000000000L == "abcd"
  Stdlib.String.first "" 7L == ""
  Stdlib.String.first "🍊🍍🍏" 1L == "🍊"
  Stdlib.String.first "🍊🍍🍏" 2L == "🍊🍍"
  Stdlib.String.first "🍊🍍🍏" 3L == "🍊🍍🍏"
  Stdlib.String.first "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 1L == "🧑🏽‍🦰"

  Stdlib.String.first "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 10L
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

  Stdlib.String.first "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2L == "Z̤͔ͧ̑̓ä͖̭̈̇"
  Stdlib.String.first "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 3L == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ"
  Stdlib.String.first "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 4L == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚"
  Stdlib.String.first "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 1L == "﷽"
  Stdlib.String.first "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 2L == "👱👱🏻"
  Stdlib.String.first "🧟‍♀️🧟‍♂️" 1L == "🧟‍♀️"

  Stdlib.String.first "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 3L
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️"


module PadStart =
  Stdlib.String.padStart "123" "0" 3L == Stdlib.Result.Result.Ok("123")

  Stdlib.String.padStart "123" "0" -3L == Stdlib.Result.Result.Ok("123")

  Stdlib.String.padStart "123" "_-" 4L
  == Stdlib.Result.Result.Error(
    "Expected `padWith` to be 1 character long, but it was `\"_-\"`"
  )

  Stdlib.String.padStart "123" "" 10L
  == Stdlib.Result.Result.Error(
    "Expected `padWith` to be 1 character long, but it was `\"\"`"
  )

  Stdlib.String.padStart "123" "0" 6L == Stdlib.Result.Result.Ok("000123")

  Stdlib.String.padStart "" "0" 0L == Stdlib.Result.Result.Ok("")

  Stdlib.String.padStart "123🍊🍊" "0" 3L == Stdlib.Result.Result.Ok("123🍊🍊")

  Stdlib.String.padStart "🍍🍍🍊🍊" "0" 7L
  == Stdlib.Result.Result.Ok("000🍍🍍🍊🍊")

  Stdlib.String.padStart "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "0" 10L
  == Stdlib.Result.Result.Ok("0żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿")

  Stdlib.String.padStart "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "0" 10L
  == Stdlib.Result.Result.Ok("00000Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇")

  Stdlib.String.padStart "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "0" 20L
  == Stdlib.Result.Result.Ok("0000﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽")

  Stdlib.String.padStart "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "0" 10L
  == Stdlib.Result.Result.Ok("0000👱👱🏻👱🏼👱🏽👱🏾👱🏿")

  Stdlib.String.padStart "🧟‍♀️🧟‍♂️" "0" 5L
  == Stdlib.Result.Result.Ok("000🧟‍♀️🧟‍♂️")

  Stdlib.String.padStart "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "0" 10L
  == Stdlib.Result.Result.Ok("000000👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷")

  Stdlib.String.padStart "鷝" "觌഻" 0L == Stdlib.Result.Result.Ok("鷝")


module PadEnd =
  Stdlib.String.padEnd "123" "0" 3L == Stdlib.Result.Result.Ok("123")

  Stdlib.String.padEnd "123" "0" -3L == Stdlib.Result.Result.Ok("123")

  Stdlib.String.padEnd "123" "_-" 3L
  == Stdlib.Result.Result.Error(
    "Expected `padWith` to be 1 character long, but it was `\"_-\"`"
  )

  Stdlib.String.padEnd "123" "" 10L
  == Stdlib.Result.Result.Error(
    "Expected `padWith` to be 1 character long, but it was `\"\"`"
  )

  Stdlib.String.padEnd "123" "0" 6L == Stdlib.Result.Result.Ok("123000")

  Stdlib.String.padEnd "" "0" 0L == Stdlib.Result.Result.Ok("")

  Stdlib.String.padEnd "123🍊🍊" "0" 8L == Stdlib.Result.Result.Ok("123🍊🍊000")

  Stdlib.String.padEnd "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "0" 10L
  == Stdlib.Result.Result.Ok("żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿0")

  Stdlib.String.padEnd "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "0" 10L
  == Stdlib.Result.Result.Ok("Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇00000")

  Stdlib.String.padEnd "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "0" 20L
  == Stdlib.Result.Result.Ok("﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽0000")

  Stdlib.String.padEnd "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "0" 10L
  == Stdlib.Result.Result.Ok("👱👱🏻👱🏼👱🏽👱🏾👱🏿0000")

  Stdlib.String.padEnd "🧟‍♀️🧟‍♂️" "0" 5L
  == Stdlib.Result.Result.Ok("🧟‍♀️🧟‍♂️000")

  Stdlib.String.padEnd "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "0" 10L
  == Stdlib.Result.Result.Ok("👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷000000")

  Stdlib.String.padEnd "鷝" "觌഻" 0L == Stdlib.Result.Result.Ok("鷝")


module IndexOf =
  Stdlib.String.indexOf "hello world" "world" == Stdlib.Option.Option.Some(6L)

  Stdlib.String.indexOf "hello world" "earth" == Stdlib.Option.Option.None()

  Stdlib.String.indexOf "" "" == Stdlib.Option.Option.Some(0L)

  Stdlib.String.indexOf "hello" "" == Stdlib.Option.Option.Some(0L)

  Stdlib.String.indexOf "" "hello" == Stdlib.Option.Option.None()

  Stdlib.String.indexOf "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏼👱🏽"
  == Stdlib.Option.Option.Some(6L)

  Stdlib.String.indexOf "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏼👱🏿"
  == Stdlib.Option.Option.None()

  Stdlib.String.indexOf "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👩‍👩‍👧‍👦"
  == Stdlib.Option.Option.Some(11L)

  Stdlib.String.indexOf "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏽‍🦰"
  == Stdlib.Option.Option.Some(4L)

  Stdlib.String.indexOf "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "👱🏽"
  == Stdlib.Option.Option.None()

  Stdlib.String.indexOf "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "🧑🏻‍🍼"
  == Stdlib.Option.Option.None()


module Ellipsis =
  Stdlib.String.ellipsis "hello world" 5L == "hello..."
  Stdlib.String.ellipsis "hello world" 9L == "hello wor..."
  Stdlib.String.ellipsis "hello world" 11L == "hello world"
  Stdlib.String.ellipsis "hello world" 12L == "hello world"
  Stdlib.String.ellipsis "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 5L == "👱👱🏻👱🏼👱🏽👱🏾..."

  Stdlib.String.ellipsis "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 3L
  == "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ..."

  Stdlib.String.ellipsis "👩‍👩‍👧‍👦" 2L == "👩‍👩‍👧‍👦"

  Stdlib.String.ellipsis "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷✋✋🏻✋🏿" 4L
  == "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷..."

module Head =
  Stdlib.String.head "hello world" == Stdlib.Option.Option.Some('h')

  Stdlib.String.head "" == Stdlib.Option.Option.None()
// Commented out as Fantomas doesn't like unicode "characters"
// Stdlib.String.head "👱👱🏻👱🏼👱🏽👱🏾👱🏿" == Stdlib.Option.Option.Some('👱')
// Stdlib.String.head "🧟‍♀️🧟‍♂️" == Stdlib.Option.Option.Some('🧟')
// Stdlib.String.head "👨‍❤️‍💋‍👨" == Stdlib.Option.Option.Some('👨‍❤️‍💋‍👨')

module ArticleFor =
  Stdlib.String.articleFor "apple" == "an"
  Stdlib.String.articleFor "banana" == "a"
  Stdlib.String.articleFor "🍍" == "a"
  Stdlib.String.articleFor "🍊" == "a"
  Stdlib.String.articleFor "" == ""