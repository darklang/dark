Stdlib.Int64.absoluteValue -5L == 5L
Stdlib.Int64.absoluteValue 5L == 5L

Stdlib.Int64.max 5L 6L == 6L
Stdlib.Int64.max 10L 1L == 10L
Stdlib.Int64.max -5L 6L == 6L
Stdlib.Int64.max -100L -20000L == -100L
Stdlib.Int64.max 250L -26L == 250L

Stdlib.Int64.min 5L 6L == 5L
Stdlib.Int64.min 50L -10L == -10L
Stdlib.Int64.min -5L 6L == -5L
Stdlib.Int64.min -100L -20000L == -20000L
Stdlib.Int64.min 250L -26L == -26L


Stdlib.Int64.clamp -5L -2L 5L == -2L // in bounds
Stdlib.Int64.clamp -3L -2L 1L == -2L // below min
Stdlib.Int64.clamp -5L 1L 1L == 1L // at limit
Stdlib.Int64.clamp 1L 2L 1L == 1L // above max
Stdlib.Int64.clamp 3L 0L 2L == 2L //  below in
Stdlib.Int64.clamp -100L 0L 0L == 0L
Stdlib.Int64.clamp 100L 0L 0L == 0L
Stdlib.Int64.clamp -100L 0L -1L == -1L
Stdlib.Int64.clamp 100L 0L -1L == 0L
Stdlib.Int64.clamp -100L -1L 0L == -1L
Stdlib.Int64.clamp 100L -1L 0L == 0L
Stdlib.Int64.clamp -100L 1L 0L == 0L
Stdlib.Int64.clamp 100L 1L 0L == 1L
Stdlib.Int64.clamp -2147483647L 250L -26L == -26L
Stdlib.Int64.clamp 2147483647L 250L -26L == 250L

Stdlib.Int64.negate -5L == 5L
Stdlib.Int64.negate 5L == -5L
Stdlib.Int64.negate 0L == 0L
Stdlib.Int64.negate -0L == 0L

Stdlib.Int64.remainder 15L 6L == Stdlib.Result.Result.Ok(3L)

Stdlib.Int64.remainder 20L 8L == Stdlib.Result.Result.Ok(4L)

Stdlib.Int64.remainder -20L 8L == Stdlib.Result.Result.Ok(-4L)

Stdlib.Int64.remainder -20L -8L == Stdlib.Result.Result.Ok(-4L)

Stdlib.Int64.remainder -15L 6L == Stdlib.Result.Result.Ok(-3L)

Stdlib.Int64.remainder 5L 0L == Builtin.testDerrorMessage "Division by zero"

Stdlib.List.map (Stdlib.List.range -5L 5L) (fun v ->
  Stdlib.Int64.remainder v -4L) == [  Stdlib.Result.Result.Ok(-1L)
                                      Stdlib.Result.Result.Ok(0L)
                                      Stdlib.Result.Result.Ok(-3L)
                                      Stdlib.Result.Result.Ok(-2L)
                                      Stdlib.Result.Result.Ok(-1L)
                                      Stdlib.Result.Result.Ok(0L)
                                      Stdlib.Result.Result.Ok(1L)
                                      Stdlib.Result.Result.Ok(2L)
                                      Stdlib.Result.Result.Ok(3L)
                                      Stdlib.Result.Result.Ok(0L)
                                      Stdlib.Result.Result.Ok(1L) ]

Stdlib.List.map (Stdlib.List.range -5L 5L) (fun v ->
  Stdlib.Int64.remainder v 4L) == [ Stdlib.Result.Result.Ok(-1L)
                                    Stdlib.Result.Result.Ok(0L)
                                    Stdlib.Result.Result.Ok(-3L)
                                    Stdlib.Result.Result.Ok(-2L)
                                    Stdlib.Result.Result.Ok(-1L)
                                    Stdlib.Result.Result.Ok(0L)
                                    Stdlib.Result.Result.Ok(1L)
                                    Stdlib.Result.Result.Ok(2L)
                                    Stdlib.Result.Result.Ok(3L)
                                    Stdlib.Result.Result.Ok(0L)
                                    Stdlib.Result.Result.Ok(1L) ]

Stdlib.Int64.mod 15L 5L == 0L
Stdlib.Int64.mod 15L 6L == 3L
Stdlib.Int64.mod 0L 15L == 0L
Stdlib.Int64.mod -1L 2L == 1L
Stdlib.Int64.mod -754L 53L == 41L
Stdlib.Int64.mod 9999999999998L 3L == 2L

Stdlib.Int64.mod 5L 0L == Builtin.testDerrorMessage "Zero modulus"

Stdlib.Int64.mod 5L -5L == Builtin.testDerrorMessage "Negative modulus"

// Stdlib.List.map (Stdlib.List.range -5L 5L) (fun v ->
//  Stdlib.Int64.mod v 4L) == [ 3L 0L 1L 2L 3L 0L 1L 2L 3L 0L 1L ]

15L % 5L == 0L
5L % 0L == Builtin.testDerrorMessage "Zero modulus"
5L % -5L == Builtin.testDerrorMessage "Negative modulus"

Stdlib.List.map (Stdlib.List.range -5L 5L) (fun v -> v % 4L) == [ 3L
                                                                  0L
                                                                  1L
                                                                  2L
                                                                  3L
                                                                  0L
                                                                  1L
                                                                  2L
                                                                  3L
                                                                  0L
                                                                  1L ]

Stdlib.Int64.power 8L 5L == 32768L
Stdlib.Int64.power 0L 1L == 0L
Stdlib.Int64.power 0L 0L == 1L
Stdlib.Int64.power 1L 0L == 1L
Stdlib.Int64.power 1000L 0L == 1L
Stdlib.Int64.power -8L 5L == -32768L

Stdlib.Int64.power 200L 20L == Builtin.testDerrorMessage "Out of range"

Stdlib.Int64.power 200L 7L == 12800000000000000L

Stdlib.Int64.power 1L 2147483649L == 1L

Stdlib.Int64.power -1L 2147483649L == -1L

Stdlib.Int64.power 2L -3L == Builtin.testDerrorMessage "Negative exponent"

5L ^ 2L == 25L
-8L ^ 5L == -32768L
50L ^ 2L == 2500L

Stdlib.Int64.greaterThan 20L 1L == true
20L > 1L == true

0L >= 1L == false
1L >= 0L == true
6L >= 1L == true
6L >= 8L == false
-5L >= -20L == true
-20L >= -1L == false
-20L >= -20L == true

Stdlib.Int64.greaterThanOrEqualTo 0L 1L == false
Stdlib.Int64.greaterThanOrEqualTo 1L 0L == true
Stdlib.Int64.greaterThanOrEqualTo 6L 1L == true
Stdlib.Int64.greaterThanOrEqualTo 6L 8L == false
Stdlib.Int64.greaterThanOrEqualTo -5L -20L == true
Stdlib.Int64.greaterThanOrEqualTo -20L -1L == false
Stdlib.Int64.greaterThanOrEqualTo -20L -20L == true

6L <= 8L == true
10L <= 1L == false
0L <= 1L == true
1L <= 0L == false
-100L <= 22544L == true
-999L <= -9999L == false
-8888L <= -8888L == true

Stdlib.Int64.lessThanOrEqualTo 6L 8L == true
Stdlib.Int64.lessThanOrEqualTo 10L 1L == false
Stdlib.Int64.lessThanOrEqualTo 0L 1L == true
Stdlib.Int64.lessThanOrEqualTo 1L 0L == false
Stdlib.Int64.lessThanOrEqualTo -100L 22544L == true
Stdlib.Int64.lessThanOrEqualTo -999L -9999L == false
Stdlib.Int64.lessThanOrEqualTo -8888L -8888L == true

Stdlib.Int64.lessThan 6L 8L == true
Stdlib.Int64.lessThan 10L 1L == false
Stdlib.Int64.lessThan 0L 1L == true
Stdlib.Int64.lessThan 1L 0L == false
Stdlib.Int64.lessThan -100L 22544L == true
Stdlib.Int64.lessThan -999L -9999L == false
Stdlib.Int64.lessThan -8888L -8888L == false
6L < 8L == true
10L < 1L == false
0L < 1L == true
1L < 0L == false
-100L < 22544L == true
-999L < -9999L == false
-8888L < -8888L == false

Stdlib.Int64.sqrt 4L == 2.0
Stdlib.Int64.sqrt 100L == 10.0
Stdlib.Int64.sqrt 86L == 9.273618495495704

Stdlib.Int64.toFloat 2L == 2.0
Stdlib.Int64.toFloat 955656L == 955656.0
Stdlib.Int64.toFloat -10L == -10.0

Stdlib.Int64.add 10L 9L == 19L
Stdlib.Int64.add 88L 9L == 97L
Stdlib.Int64.add -1L 2L == 1L
Stdlib.Int64.add 1L 0L == 1L
Stdlib.Int64.add -55L 55L == 0L
Stdlib.Int64.add 9223372036854775806L 1L == 9223372036854775807L

// Overflow tests
Stdlib.Int64.add 9223372036854775807L 1L == -9223372036854775808L
Stdlib.Int64.add 55L 9223372036854775807L == -9223372036854775754L
Stdlib.Int64.add (-9223372036854775808L) (-1L) == 9223372036854775807L

-2000L + 1950L == -50L
-1993L + 2000L == 7L

Stdlib.Int64.subtract 10L 9L == 1L
Stdlib.Int64.subtract 88L 9L == 79L
Stdlib.Int64.subtract 0L 1L == -1L
Stdlib.Int64.subtract 1L 0L == 1L
Stdlib.Int64.subtract -55L -55L == 0L

2000L - 1950L == 50L
-1993L - -2000L == 7L

Stdlib.Int64.multiply 8L 8L == 64L
Stdlib.Int64.multiply 5145L 5145L == 26471025L

1L * 1.0 == Builtin.testDerrorMessage
  "int64Multiply's 2nd argument (`b`) should be an Int64. However, a Float (1.0) was passed instead.

Expected: (b: Int64)
Actual: a Float: 1.0"

8L * 8L == 64L
Stdlib.Int64.divide 10L 5L == 2L
Stdlib.Int64.divide 17L 3L == 5L
Stdlib.Int64.divide -8L 5L == -1L
Stdlib.Int64.divide 0L 1L == 0L

Stdlib.Int64.divide 1L 0L == Builtin.testDerrorMessage "Division by zero"

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.Int64.random 1L 2L)
|> Stdlib.List.map (fun x -> (x >= 1L) && (x <= 2L)) == [ true
                                                          true
                                                          true
                                                          true
                                                          true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.Int64.random 10L 20L)
|> Stdlib.List.map (fun x -> (x >= 10L) && (x <= 20L)) == [ true
                                                            true
                                                            true
                                                            true
                                                            true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.Int64.random 2L 1L)
|> Stdlib.List.map (fun x -> (x >= 1L) && (x <= 2L)) == [ true
                                                          true
                                                          true
                                                          true
                                                          true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.Int64.random 20L 10L)
|> Stdlib.List.map (fun x -> (x >= 10L) && (x <= 20L)) == [ true
                                                            true
                                                            true
                                                            true
                                                            true ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.Int64.random 0L 1L)
 |> Stdlib.List.unique) == [ 0L; 1L ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.Int64.random 0L 2L)
 |> Stdlib.List.unique) == [ 0L; 1L; 2L ]

Stdlib.Int64.sum [ 1L; 2L ] == 3L

Stdlib.Int64.parse "0" == Stdlib.Result.Result.Ok(0L)

Stdlib.Int64.parse "1" == Stdlib.Result.Result.Ok(1L)

Stdlib.Int64.parse " 1" == Stdlib.Result.Result.Ok(1L)

Stdlib.Int64.parse "1 " == Stdlib.Result.Result.Ok(1L)

Stdlib.Int64.parse "+1" == Stdlib.Result.Result.Ok(1L)

Stdlib.Int64.parse " +1 " == Stdlib.Result.Result.Ok(1L)

Stdlib.Int64.parse "-1" == Stdlib.Result.Result.Ok(-1L)

Stdlib.Int64.parse "078" == Stdlib.Result.Result.Ok(78L) // "octal" format ignored

Stdlib.Int64.parse "-00001" == Stdlib.Result.Result.Ok(-1L)

Stdlib.Int64.parse "-10001" == Stdlib.Result.Result.Ok(-10001L)

Stdlib.Int64.parse "-4611686018427387904" == Stdlib.Result.Result.Ok(
  -4611686018427387904L) // int63 lower limit

Stdlib.Int64.parse "-4611686018427387905" == Stdlib.Result.Result.Ok(
  -4611686018427387905L) // past the int63 upper limit

Stdlib.Int64.parse "-9223372036854775808" == Stdlib.Result.Result.Ok(
  -9223372036854775808L) // .NET lower limit

Stdlib.Int64.parse "-9223372036854775809" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.OutOfRange())

Stdlib.Int64.parse "4611686018427387903" == Stdlib.Result.Result.Ok(
  4611686018427387903L) // int63 upper limit

Stdlib.Int64.parse "4611686018427387904" == Stdlib.Result.Result.Ok(
  4611686018427387904L) // past the int63 upper limit

Stdlib.Int64.parse "9223372036854775807" == Stdlib.Result.Result.Ok(
  9223372036854775807L) // .NET upper limit

Stdlib.Int64.parse "9223372036854775808" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.OutOfRange())

Stdlib.Int64.parse "1 2 3" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "+ 1" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "- 1" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "0xA" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "0x123" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "0b0100" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "pi" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "PACKAGE.Darklang.Stdlib.Math.pi" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "1.23E+04" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "9223372036854775808" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.OutOfRange())

Stdlib.Int64.parse "" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "1I" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "one" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())

Stdlib.Int64.parse "XIV" == Stdlib.Result.Result.Error(
  Stdlib.Int64.ParseError.BadFormat())


Stdlib.Int64.toString 0L == "0"
Stdlib.Int64.toString 1L == "1"
Stdlib.Int64.toString -1L == "-1"
Stdlib.Int64.toString -4611686018427387904L == "-4611686018427387904" // int63 lower limit
Stdlib.Int64.toString -4611686018427387905L == "-4611686018427387905" // past the int63 upper limit"
Stdlib.Int64.toString -9223372036854775808L == "-9223372036854775808" // .NET lower limit
Stdlib.Int64.toString 4611686018427387903L == "4611686018427387903" // int63 upper limit
Stdlib.Int64.toString 4611686018427387904L == "4611686018427387904" // past the int63 upper limit
Stdlib.Int64.toString 9223372036854775807L == "9223372036854775807" // .NET upper limit

Stdlib.Int64.fromInt8 0y == 0L

Stdlib.Int64.fromInt8 1y == 1L

Stdlib.Int64.fromInt8 127y == 127L

Stdlib.Int64.fromInt8 -128y == -128L

Stdlib.Int64.fromUInt8 0uy == 0L

Stdlib.Int64.fromUInt8 1uy == 1L

Stdlib.Int64.fromUInt8 255uy == 255L

Stdlib.Int64.fromInt16 0s == 0L

Stdlib.Int64.fromInt16 1s == 1L

Stdlib.Int64.fromInt16 32767s == 32767L

Stdlib.Int64.fromInt16 -32768s == -32768L

Stdlib.Int64.fromUInt16 0us == 0L

Stdlib.Int64.fromUInt16 1us == 1L

Stdlib.Int64.fromUInt16 65535us == 65535L

Stdlib.Int64.fromInt32 0l == 0L

Stdlib.Int64.fromInt32 1l == 1L

Stdlib.Int64.fromInt32 2147483647l == 2147483647L

Stdlib.Int64.fromInt32 -2147483648l == -2147483648L

Stdlib.Int64.fromUInt32 0ul == 0L

Stdlib.Int64.fromUInt32 1ul == 1L

Stdlib.Int64.fromUInt32 4294967295ul == 4294967295L

Stdlib.Int64.fromUInt64 0UL == Stdlib.Option.Option.Some(0L)

Stdlib.Int64.fromUInt64 1UL == Stdlib.Option.Option.Some(1L)

Stdlib.Int64.fromUInt64 9223372036854775807UL == Stdlib.Option.Option.Some(9223372036854775807L)

Stdlib.Int64.fromUInt64 18446744073709551615UL == Stdlib.Option.Option.None()

Stdlib.Int64.fromInt128 0Q == Stdlib.Option.Option.Some(0L)

Stdlib.Int64.fromInt128 1Q == Stdlib.Option.Option.Some(1L)

Stdlib.Int64.fromInt128 9223372036854775807Q == Stdlib.Option.Option.Some(9223372036854775807L)

Stdlib.Int64.fromInt128 -9223372036854775808Q == Stdlib.Option.Option.Some(-9223372036854775808L)

Stdlib.Int64.fromInt128 9223372036854775808Q == Stdlib.Option.Option.None()
Stdlib.Int64.fromInt128 -9223372036854775809Q == Stdlib.Option.Option.None()

Stdlib.Int64.fromUInt128 0Z == Stdlib.Option.Option.Some(0L)

Stdlib.Int64.fromUInt128 1Z == Stdlib.Option.Option.Some(1L)

Stdlib.Int64.fromUInt128 9223372036854775807Z == Stdlib.Option.Option.Some(9223372036854775807L)

Stdlib.Int64.fromUInt128 18446744073709551615Z == Stdlib.Option.Option.None()