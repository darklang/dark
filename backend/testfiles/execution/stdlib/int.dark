PACKAGE.Darklang.Stdlib.Int.absoluteValue_v0 -5 = 5
PACKAGE.Darklang.Stdlib.Int.absoluteValue_v0 5 = 5

PACKAGE.Darklang.Stdlib.Int.clamp_v0 -5 -2 5 = -2 // in bounds
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -3 -2 1 = -2 // below min
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -5 1 1 = 1 // at limit
PACKAGE.Darklang.Stdlib.Int.clamp_v0 1 2 1 = 1 // above max
PACKAGE.Darklang.Stdlib.Int.clamp_v0 3 0 2 = 2 //  below in

PACKAGE.Darklang.Stdlib.Int.max_v0 5 6 = 6
PACKAGE.Darklang.Stdlib.Int.max_v0 10 1 = 10
PACKAGE.Darklang.Stdlib.Int.max_v0 -5 6 = 6
PACKAGE.Darklang.Stdlib.Int.max_v0 -100 -20000 = -100
PACKAGE.Darklang.Stdlib.Int.max_v0 250 -26 = 250

PACKAGE.Darklang.Stdlib.Int.min_v0 5 6 = 5
PACKAGE.Darklang.Stdlib.Int.min_v0 50 -10 = -10
PACKAGE.Darklang.Stdlib.Int.min_v0 -5 6 = -5
PACKAGE.Darklang.Stdlib.Int.min_v0 -100 -20000 = -20000
PACKAGE.Darklang.Stdlib.Int.min_v0 250 -26 = -26

PACKAGE.Darklang.Stdlib.Int.clamp_v0 -100 0 0 = 0
PACKAGE.Darklang.Stdlib.Int.clamp_v0 100 0 0 = 0
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -100 0 -1 = -1
PACKAGE.Darklang.Stdlib.Int.clamp_v0 100 0 -1 = 0
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -100 -1 0 = -1
PACKAGE.Darklang.Stdlib.Int.clamp_v0 100 -1 0 = 0
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -100 1 0 = 0
PACKAGE.Darklang.Stdlib.Int.clamp_v0 100 1 0 = 1
PACKAGE.Darklang.Stdlib.Int.clamp_v0 -2147483647 250 -26 = -26
PACKAGE.Darklang.Stdlib.Int.clamp_v0 2147483647 250 -26 = 250

PACKAGE.Darklang.Stdlib.Int.negate_v0 -5 = 5
PACKAGE.Darklang.Stdlib.Int.negate_v0 5 = -5
PACKAGE.Darklang.Stdlib.Int.negate_v0 0 = 0
PACKAGE.Darklang.Stdlib.Int.negate_v0 -0 = 0

PACKAGE.Darklang.Stdlib.Int.remainder_v0 15 6 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  3

PACKAGE.Darklang.Stdlib.Int.remainder_v0 20 8 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  4

PACKAGE.Darklang.Stdlib.Int.remainder_v0 -20 8 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -4

PACKAGE.Darklang.Stdlib.Int.remainder_v0 -20 -8 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -4

PACKAGE.Darklang.Stdlib.Int.remainder_v0 -15 6 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -3

PACKAGE.Darklang.Stdlib.Int.remainder_v0 5 0 = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "`divisor` must be non-zero"

PACKAGE.Darklang.Stdlib.List.map_v0
  (PACKAGE.Darklang.Stdlib.List.range_v0 -5 5)
  (fun v -> PACKAGE.Darklang.Stdlib.Int.remainder_v0 v -4) = [ PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 -1
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 0
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 -3
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 -2
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 -1
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 0
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 1
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 2
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 3
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 0
                                                               PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                 1 ]

PACKAGE.Darklang.Stdlib.List.map_v0
  (PACKAGE.Darklang.Stdlib.List.range_v0 -5 5)
  (fun v -> PACKAGE.Darklang.Stdlib.Int.remainder_v0 v 4) = [ PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                -1
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                0
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                -3
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                -2
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                -1
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                0
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                1
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                2
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                3
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                0
                                                              PACKAGE.Darklang.Stdlib.Result.Result.Ok
                                                                1 ]

PACKAGE.Darklang.Stdlib.Int.mod_v0 15 5 = 0
PACKAGE.Darklang.Stdlib.Int.mod_v0 15 6 = 3
PACKAGE.Darklang.Stdlib.Int.mod_v0 0 15 = 0
PACKAGE.Darklang.Stdlib.Int.mod_v0 (-1) 2 = 1
PACKAGE.Darklang.Stdlib.Int.mod_v0 (-754) 53 = 41
PACKAGE.Darklang.Stdlib.Int.mod_v0 9999999999998L 3 = 2

PACKAGE.Darklang.Stdlib.Int.mod_v0 5 0 = Builtin.Test.derrorMessage
  "Expected `b` to be positive, but it was `0`"

PACKAGE.Darklang.Stdlib.Int.mod_v0 5 (-5) = Builtin.Test.derrorMessage
  "Expected `b` to be positive, but it was `-5`"

// PACKAGE.Darklang.Stdlib.List.map_v0 (PACKAGE.Darklang.Stdlib.List.range_v0 (-5) 5) (fun v ->
//  PACKAGE.Darklang.Stdlib.Int.mod_v0 v 4) = [ 3 0 1 2 3 0 1 2 3 0 1 ]

15 % 5 = 0
5 % 0 = Builtin.Test.derrorMessage "Expected `b` to be positive, but it was `0`"
5 % (-5) = Builtin.Test.derrorMessage "Expected `b` to be positive, but it was `-5`"

PACKAGE.Darklang.Stdlib.List.map_v0
  (PACKAGE.Darklang.Stdlib.List.range_v0 -5 5)
  (fun v -> v % 4) = [ 3; 0; 1; 2; 3; 0; 1; 2; 3; 0; 1 ]

PACKAGE.Darklang.Stdlib.Int.power_v0 8 5 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  32768

PACKAGE.Darklang.Stdlib.Int.power_v0 0 1 = PACKAGE.Darklang.Stdlib.Result.Result.Ok 0
PACKAGE.Darklang.Stdlib.Int.power_v0 1 0 = PACKAGE.Darklang.Stdlib.Result.Result.Ok 1

PACKAGE.Darklang.Stdlib.Int.power_v0 1000 0 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.power_v0 -8 5 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -32768

PACKAGE.Darklang.Stdlib.Int.power_v0 200 20 = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Error raising to exponent"

PACKAGE.Darklang.Stdlib.Int.power_v0 200 7 = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  12800000000000000L

PACKAGE.Darklang.Stdlib.Int.power_v0 1 2147483649L = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.power_v0 -1 2147483649L = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -1

PACKAGE.Darklang.Stdlib.Int.power_v0 2 -3 = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected `exponent` to be positive, but it was `-3`"

5 ^ 2 = PACKAGE.Darklang.Stdlib.Result.Result.Ok 25
-8 ^ 5 = PACKAGE.Darklang.Stdlib.Result.Result.Ok -32768
50 ^ 2 = PACKAGE.Darklang.Stdlib.Result.Result.Ok 2500

PACKAGE.Darklang.Stdlib.Int.greaterThan_v0 20 1 = true
20 > 1 = true

0 >= 1 = false
1 >= 0 = true
6 >= 1 = true
6 >= 8 = false
-5 >= -20 = true
-20 >= -1 = false
-20 >= -20 = true

PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 0 1 = false
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 1 0 = true
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 6 1 = true
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 6 8 = false
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 -5 -20 = true
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 -20 -1 = false
PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 -20 -20 = true

6 <= 8 = true
10 <= 1 = false
0 <= 1 = true
1 <= 0 = false
-100 <= 22544 = true
-999 <= -9999 = false
-8888 <= -8888 = true

PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 6 8 = true
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 10 1 = false
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 0 1 = true
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 1 0 = false
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 -100 22544 = true
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 -999 -9999 = false
PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 -8888 -8888 = true

PACKAGE.Darklang.Stdlib.Int.lessThan_v0 6 8 = true
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 10 1 = false
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 0 1 = true
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 1 0 = false
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 -100 22544 = true
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 -999 -9999 = false
PACKAGE.Darklang.Stdlib.Int.lessThan_v0 -8888 -8888 = false
6 < 8 = true
10 < 1 = false
0 < 1 = true
1 < 0 = false
-100 < 22544 = true
-999 < -9999 = false
-8888 < -8888 = false

PACKAGE.Darklang.Stdlib.Int.sqrt_v0 4 = 2.0
PACKAGE.Darklang.Stdlib.Int.sqrt_v0 100 = 10.0
PACKAGE.Darklang.Stdlib.Int.sqrt_v0 86 = 9.273618495495704

PACKAGE.Darklang.Stdlib.Int.toFloat_v0 2 = 2.0
PACKAGE.Darklang.Stdlib.Int.toFloat_v0 955656 = 955656.0
PACKAGE.Darklang.Stdlib.Int.toFloat_v0 -10 = -10.0

PACKAGE.Darklang.Stdlib.Int.add_v0 10 9 = 19
PACKAGE.Darklang.Stdlib.Int.add_v0 88 9 = 97
PACKAGE.Darklang.Stdlib.Int.add_v0 -1 2 = 1
PACKAGE.Darklang.Stdlib.Int.add_v0 1 0 = 1
PACKAGE.Darklang.Stdlib.Int.add_v0 -55 55 = 0

-2000 + 1950 = -50
-1993 + 2000 = 7

PACKAGE.Darklang.Stdlib.Int.subtract_v0 10 9 = 1
PACKAGE.Darklang.Stdlib.Int.subtract_v0 88 9 = 79
PACKAGE.Darklang.Stdlib.Int.subtract_v0 0 1 = -1
PACKAGE.Darklang.Stdlib.Int.subtract_v0 1 0 = 1
PACKAGE.Darklang.Stdlib.Int.subtract_v0 -55 -55 = 0

2000 - 1950 = 50
-1993 - -2000 = 7

PACKAGE.Darklang.Stdlib.Int.multiply_v0 8 8 = 64
PACKAGE.Darklang.Stdlib.Int.multiply_v0 5145 5145 = 26471025

1 * 1.0 = Builtin.Test.derrorMessage
  "Int.multiply's 2nd argument (`b`) should be an Int. However, a Float (1.0) was passed instead.

Expected: (b: Int)
Actual: a Float: 1.0"

8 * 8 = 64

PACKAGE.Darklang.Stdlib.Int.divide_v0 10 5 = 2
PACKAGE.Darklang.Stdlib.Int.divide_v0 17 3 = 5
PACKAGE.Darklang.Stdlib.Int.divide_v0 -8 5 = -1
PACKAGE.Darklang.Stdlib.Int.divide_v0 0 1 = 0

PACKAGE.Darklang.Stdlib.Int.divide_v0 1 0 = Builtin.Test.derrorMessage
  "Division by zero"

(PACKAGE.Darklang.Stdlib.List.range_v0 1 5)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
  PACKAGE.Darklang.Stdlib.Int.random 1 2)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x -> (x >= 1) && (x <= 2)) = [ true
                                                                           true
                                                                           true
                                                                           true
                                                                           true ]

(PACKAGE.Darklang.Stdlib.List.range_v0 1 5)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
  PACKAGE.Darklang.Stdlib.Int.random 10 20)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x -> (x >= 10) && (x <= 20)) = [ true
                                                                             true
                                                                             true
                                                                             true
                                                                             true ]

(PACKAGE.Darklang.Stdlib.List.range_v0 1 5)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
  PACKAGE.Darklang.Stdlib.Int.random 2 1)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x -> (x >= 1) && (x <= 2)) = [ true
                                                                           true
                                                                           true
                                                                           true
                                                                           true ]

(PACKAGE.Darklang.Stdlib.List.range_v0 1 5)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
  PACKAGE.Darklang.Stdlib.Int.random 20 10)
|> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x -> (x >= 10) && (x <= 20)) = [ true
                                                                             true
                                                                             true
                                                                             true
                                                                             true ]

((PACKAGE.Darklang.Stdlib.List.range_v0 1 100)
 |> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
   PACKAGE.Darklang.Stdlib.Int.random 0 1)
 |> PACKAGE.Darklang.Stdlib.List.unique_v0) = [ 0; 1 ]

((PACKAGE.Darklang.Stdlib.List.range_v0 1 100)
 |> PACKAGE.Darklang.Stdlib.List.map_v0 (fun x ->
   PACKAGE.Darklang.Stdlib.Int.random 0 2)
 |> PACKAGE.Darklang.Stdlib.List.unique_v0) = [ 0; 1; 2 ]

PACKAGE.Darklang.Stdlib.Int.sum_v0 [ 1; 2 ] = 3


PACKAGE.Darklang.Stdlib.Int.parse_v0 "0" = PACKAGE.Darklang.Stdlib.Result.Result.Ok 0
PACKAGE.Darklang.Stdlib.Int.parse_v0 "1" = PACKAGE.Darklang.Stdlib.Result.Result.Ok 1

PACKAGE.Darklang.Stdlib.Int.parse_v0 " 1" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.parse_v0 "1 " = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.parse_v0 "+1" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.parse_v0 " +1 " = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  1

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-1" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -1

PACKAGE.Darklang.Stdlib.Int.parse_v0 "078" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  78 // "octal" format ignored

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-00001" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -1

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-10001" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -10001

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-4611686018427387904" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -4611686018427387904L // int63 lower limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-4611686018427387905" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -4611686018427387905L // past the int63 upper limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-9223372036854775808" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  -9223372036854775808L // .NET lower limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "-9223372036854775809" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"-9223372036854775809\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "4611686018427387903" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  4611686018427387903L // int63 upper limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "4611686018427387904" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  4611686018427387904L // past the int63 upper limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "9223372036854775807" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  9223372036854775807L // .NET upper limit

PACKAGE.Darklang.Stdlib.Int.parse_v0 "9223372036854775808" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"9223372036854775808\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "1 2 3" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"1 2 3\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "+ 1" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"+ 1\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "- 1" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"- 1\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "0xA" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"0xA\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "0x123" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"0x123\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "0b0100" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"0b0100\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "pi" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"pi\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "PACKAGE.Darklang.Stdlib.Math.pi" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"PACKAGE.Darklang.Stdlib.Math.pi\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "1.23E+04" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"1.23E+04\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "9223372036854775808" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"9223372036854775808\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "1I" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"1I\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "one" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"one\""

PACKAGE.Darklang.Stdlib.Int.parse_v0 "XIV" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "Expected to parse String with only numbers, instead got \"XIV\""


PACKAGE.Darklang.Stdlib.Int.toString 0 = "0"
PACKAGE.Darklang.Stdlib.Int.toString 1 = "1"
PACKAGE.Darklang.Stdlib.Int.toString -1 = "-1"
PACKAGE.Darklang.Stdlib.Int.toString -4611686018427387904L = "-4611686018427387904" // int63 lower limit
PACKAGE.Darklang.Stdlib.Int.toString -4611686018427387905L = "-4611686018427387905" // past the int63 upper limit"
PACKAGE.Darklang.Stdlib.Int.toString -9223372036854775808L = "-9223372036854775808" // .NET lower limit
PACKAGE.Darklang.Stdlib.Int.toString 4611686018427387903L = "4611686018427387903" // int63 upper limit
PACKAGE.Darklang.Stdlib.Int.toString 4611686018427387904L = "4611686018427387904" // past the int63 upper limit
PACKAGE.Darklang.Stdlib.Int.toString 9223372036854775807L = "9223372036854775807" // .NET upper limit