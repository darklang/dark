Stdlib.Result.andThen (Stdlib.Result.Result.Error("test")) (fun x ->
  Stdlib.Result.Result.Error("test"))
== Stdlib.Result.Result.Error("test")

Stdlib.Result.andThen (Stdlib.Result.Result.Error("test")) (fun x ->
  Stdlib.Result.Result.Ok(5L))
== Stdlib.Result.Result.Error("test")

Stdlib.Result.andThen (Stdlib.Result.Result.Ok(5L)) (fun x ->
  Stdlib.Result.Result.Error("test"))
== Stdlib.Result.Result.Error("test")

Stdlib.Result.andThen (Stdlib.Result.Result.Ok(5L)) (fun x ->
  Stdlib.Result.Result.Ok(1L + x))
== Stdlib.Result.Result.Ok(6L)


Stdlib.Result.collect
  [ Stdlib.Result.Result.Ok(5L)
    Stdlib.Result.Result.Ok(6L)
    Stdlib.Result.Result.Ok(7L) ]
== Stdlib.Result.Result.Ok([ 5L; 6L; 7L ])

Stdlib.Result.collect
  [ Stdlib.Result.Result.Ok(5L)
    Stdlib.Result.Result.Error("test")
    Stdlib.Result.Result.Ok(7L) ]
== Stdlib.Result.Result.Error("test")

Stdlib.Result.collect
  [ Stdlib.Result.Result.Ok(5L)
    Stdlib.Result.Result.Error("test")
    Stdlib.Result.Result.Error("test2") ]
== Stdlib.Result.Result.Error("test")

Stdlib.Result.collect
  [ Stdlib.Result.Result.Error("test"); Stdlib.Result.Result.Error("test2") ]
== Stdlib.Result.Result.Error("test")

Stdlib.Result.collect [] == Stdlib.Result.Result.Ok([])



Stdlib.Result.fromOption (Stdlib.Option.Option.Some(6L)) "test"
== Stdlib.Result.Result.Ok(6L)

Stdlib.Result.fromOption Stdlib.Option.Option.None() "test"
== Stdlib.Result.Result.Error("test")

Stdlib.Result.fromOption
  (Stdlib.Option.Option.Some(Stdlib.Result.Result.Error("test")))
  "test"
== Stdlib.Result.Result.Ok(Stdlib.Result.Result.Error("test"))

Stdlib.Result.fromOption Stdlib.Option.Option.None() (1L, 2L, 3L)
== Stdlib.Result.Result.Error((1L, 2L, 3L))

Stdlib.Result.fromOption Stdlib.Option.Option.None() Stdlib.Option.Option.None()
== Stdlib.Result.Result.Error(Stdlib.Option.Option.None())



Stdlib.Result.map2
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (fun a b -> a - b)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map2
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b -> a - b)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map2
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Error("error2"))
  (fun a b -> a - b)
== Stdlib.Result.Result.Error("error2")

Stdlib.Result.map2
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b -> a - b)
== Stdlib.Result.Result.Ok(9L)



Stdlib.Result.map3
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (fun a b c -> a - b - c)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map3
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b c -> a - b - c)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map3
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (fun a b c -> a - b - c)
== Stdlib.Result.Result.Error("error2")

Stdlib.Result.map3
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Error("error3"))
  (fun a b c -> a - b - c)
== Stdlib.Result.Result.Error("error3")

Stdlib.Result.map3
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b c -> a - b - c)
== Stdlib.Result.Result.Ok(8L)


Stdlib.Result.map4
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (Stdlib.Result.Result.Error("error4"))
  (fun a b c d -> a - b - c - d)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map4
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b c d -> a - b - c - d)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map4
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Error("error4"))
  (fun a b c d -> a - b - c - d)
== Stdlib.Result.Result.Error("error4")

Stdlib.Result.map4
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(2L))
  (fun a b c d -> a - b - c - d)
== Stdlib.Result.Result.Ok(6L)


Stdlib.Result.map5
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (Stdlib.Result.Result.Error("error4"))
  (Stdlib.Result.Result.Error("error5"))
  (fun a b c d e -> a - b - c - d - e)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map5
  (Stdlib.Result.Result.Error("error1"))
  (Stdlib.Result.Result.Error("error2"))
  (Stdlib.Result.Result.Error("error3"))
  (Stdlib.Result.Result.Error("error4"))
  (Stdlib.Result.Result.Ok(1L))
  (fun a b c d e -> a - b - c - d - e)
== Stdlib.Result.Result.Error("error1")

Stdlib.Result.map5
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(2L))
  (Stdlib.Result.Result.Error("error5"))
  (fun a b c d e -> a - b - c - d - e)
== Stdlib.Result.Result.Error("error5")

Stdlib.Result.map5
  (Stdlib.Result.Result.Ok(10L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(1L))
  (Stdlib.Result.Result.Ok(2L))
  (Stdlib.Result.Result.Ok(3L))
  (fun a b c d e -> a - b - c - d - e)
== Stdlib.Result.Result.Ok(3L)

Stdlib.Result.mapWithDefault (Stdlib.Result.Result.Error("test")) 5L (fun x ->
  x + 1L)
== 5L

Stdlib.Result.mapWithDefault (Stdlib.Result.Result.Ok(6L)) 5L (fun x -> x + 1L)
== 7L

Stdlib.Result.mapWithDefault
  (Stdlib.Result.Result.Error("test1"))
  (Stdlib.Result.Result.Error("test2"))
  (fun x -> x + 1L)
== Stdlib.Result.Result.Error("test2")

Stdlib.Result.mapError (Stdlib.Result.Result.Error("test")) (fun x ->
  Stdlib.String.append x "-appended")
== Stdlib.Result.Result.Error("test-appended")

Stdlib.Result.mapError (Stdlib.Result.Result.Ok(4L)) (fun x ->
  Stdlib.Int64.divide x 2L)
== Stdlib.Result.Result.Ok(4L)

Stdlib.Result.map (Stdlib.Result.Result.Error("test")) (fun x ->
  Stdlib.Int64.divide x 2L)
== Stdlib.Result.Result.Error("test")

Stdlib.Result.map (Stdlib.Result.Result.Ok(4L)) (fun x -> Stdlib.Int64.divide x 2L)
== Stdlib.Result.Result.Ok(2L)



Stdlib.Result.toOption (Stdlib.Result.Result.Ok("test"))
== Stdlib.Option.Option.Some("test")

Stdlib.Result.toOption (Stdlib.Result.Result.Error("test"))
== Stdlib.Option.Option.None()



Stdlib.Result.withDefault (Stdlib.Result.Result.Error("test")) 5L == 5L

Stdlib.Result.withDefault (Stdlib.Result.Result.Ok(6L)) 5L == 6L

Stdlib.Result.isOk (Stdlib.Result.Result.Ok("test")) == true

Stdlib.Result.isOk (Stdlib.Result.Result.Error("test")) == false

Stdlib.Result.isError (Stdlib.Result.Result.Ok("test")) == false

Stdlib.Result.isError (Stdlib.Result.Result.Error("test")) == true

(Stdlib.Result.and
  (Stdlib.Result.Result.Ok("test1"))
  (Stdlib.Result.Result.Ok("test2"))
) == Stdlib.Result.Result.Ok("test2")

(Stdlib.Result.and
  (Stdlib.Result.Result.Ok("test1"))
  (Stdlib.Result.Result.Error("test2"))
) == Stdlib.Result.Result.Error("test2")

(Stdlib.Result.and
  (Stdlib.Result.Result.Error("test1"))
  (Stdlib.Result.Result.Ok("test2"))
) == Stdlib.Result.Result.Error("test1")

(Stdlib.Result.and
  (Stdlib.Result.Result.Error("test1"))
  (Stdlib.Result.Result.Error("test2"))
) == Stdlib.Result.Result.Error("test1")


(Stdlib.Result.or
  (Stdlib.Result.Result.Ok("test1"))
  (Stdlib.Result.Result.Ok("test2"))
) == Stdlib.Result.Result.Ok("test1")

(Stdlib.Result.or
  (Stdlib.Result.Result.Ok("test1"))
  (Stdlib.Result.Result.Error("test2"))
) == Stdlib.Result.Result.Ok("test1")

(Stdlib.Result.or
  (Stdlib.Result.Result.Error("test1"))
  (Stdlib.Result.Result.Ok("test2"))
) == Stdlib.Result.Result.Ok("test2")

(Stdlib.Result.or
  (Stdlib.Result.Result.Error("test1"))
  (Stdlib.Result.Result.Error("test2"))
) == Stdlib.Result.Result.Error("test2")


Stdlib.Result.toList (Stdlib.Result.Result.Ok("test")) == [ "test" ]

Stdlib.Result.toList (Stdlib.Result.Result.Error("test")) == []


Stdlib.Result.join (Stdlib.Result.Result.Ok(Stdlib.Result.Result.Ok("test")))
== Stdlib.Result.Result.Ok("test")

Stdlib.Result.join (Stdlib.Result.Result.Ok(Stdlib.Result.Result.Error("test")))
== Stdlib.Result.Result.Error("test")

Stdlib.Result.join (Stdlib.Result.Result.Error("test"))
== Stdlib.Result.Result.Error("test")


Stdlib.Result.combine
  [ Stdlib.Result.Result.Ok(1L)
    Stdlib.Result.Result.Ok(2L)
    Stdlib.Result.Result.Ok(3L) ]
== Stdlib.Result.Result.Ok([ 1L; 2L; 3L ])

Stdlib.Result.combine
  [ Stdlib.Result.Result.Ok(1L)
    Stdlib.Result.Result.Error("test")
    Stdlib.Result.Result.Ok(3L) ]
== Stdlib.Result.Result.Error("test")

Stdlib.Result.combine
  [ Stdlib.Result.Result.Error("test1"); Stdlib.Result.Result.Error("test2") ]
== Stdlib.Result.Result.Error("test1")

Stdlib.Result.combine [] == Stdlib.Result.Result.Ok([])


Stdlib.Result.values
  [ Stdlib.Result.Result.Ok(1L)
    Stdlib.Result.Result.Ok(2L)
    Stdlib.Result.Result.Ok(3L) ]
== Stdlib.Result.Result.Ok([ 1L; 2L; 3L ])

Stdlib.Result.values
  [ Stdlib.Result.Result.Ok(1L)
    Stdlib.Result.Result.Error("test")
    Stdlib.Result.Result.Ok(3L) ]
== Stdlib.Result.Result.Ok([ 1L; 3L ])

Stdlib.Result.values
  [ Stdlib.Result.Result.Error("test1"); Stdlib.Result.Result.Error("test2") ]
== Stdlib.Result.Result.Ok([])

Stdlib.Result.values [] == Stdlib.Result.Result.Ok([])