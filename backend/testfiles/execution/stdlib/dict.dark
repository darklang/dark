module Empty =
  Stdlib.Dict.empty == Dict { }


module FilterMap =
  Stdlib.Dict.filterMap (Dict { }) (fun key value -> 0L) == (Dict { })

  Stdlib.Dict.filterMap
    (Dict { a = "x"; b = "y"; c = "z" })
    (fun key value ->
      if value == "y" then
        Stdlib.Option.Option.None()
      else
        (Stdlib.Option.Option.Some(key ++ value))
    )
  == (Dict { c = "cz"; a = "ax" })

  // CLEANUP Parser: had to update the formatting for this to pass
  (Stdlib.Dict.filterMap
    (Dict { a = "x"; b = "y"; c = "z" })
    (fun key value ->
      if value == "y" then
        false
      else
        Stdlib.Option.Option.Some(key ++ value)
    )
  )
  == Builtin.testDerrorMessage """Function return value should be a PACKAGE.Darklang.Stdlib.Option.Option<'b>. However, a Bool (false) was returned instead.

Expected: PACKAGE.Darklang.Stdlib.Option.Option<'b>
Actual: a Bool: false"""



module Filter =
  (Stdlib.Dict.filter
    (Dict { key1 = "val1"; key2 = "val2" })
    (fun k v -> k == "key1"))
  == (Dict { key1 = "val1" })

  (Stdlib.Dict.filter
    (Dict { key1 = 1L; key2 = 3L })
    (fun k v -> v < 2L))
  == (Dict { key1 = 1L })

  (Stdlib.Dict.filter (Dict { }) (fun k v -> 0L)) == (Dict { })

  Stdlib.Dict.filter (Dict { a = 1L; b = 2L; c = 3L }) (fun k v -> 2L) ==
    Builtin.testDerrorMessage """Function return value should be a Bool. However, an Int64 (2) was returned instead.

Expected: Bool
Actual: an Int64: 2"""


module FromListOverwritingDuplicates =
  Stdlib.Dict.fromListOverwritingDuplicates
    [ ("duplicate_key", 1L); ("b", 2L); ("duplicate_key", 3L) ]
  == (Dict { b = 2L; duplicate_key = 3L })

  (Stdlib.Dict.fromListOverwritingDuplicates [ ("a", 1L); ("b", 2L); ("c", 3L) ])
  == (Dict { c = 3L; b = 2L; a = 1L })

  Stdlib.Dict.fromListOverwritingDuplicates [] == (Dict { })

  Stdlib.Dict.fromListOverwritingDuplicates [ Builtin.testRuntimeError "" ] == Builtin.testDerrorMessage ""

  // In Dict.fromListOverwritingDuplicates's 1st argument (`entries`), the nested value `entries[1]` should be a (String, 'b). However, an Int64 (2) was passed instead.\n\nExpected: (String, 'b)\nActual: an Int64: 2
  Stdlib.Dict.fromListOverwritingDuplicates [ (1L, 2L) ] == Builtin.testDerrorMessage
    """PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<(Int64, Int64)> ([  (1, 2)...) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<(Int64, Int64)>: [\n  (1, 2)\n]"""

  Stdlib.Dict.fromListOverwritingDuplicates [ 1L ] == Builtin.testDerrorMessage
    """PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<Int64> ([  1]) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<Int64>: [\n  1\n]"""


module FromList =
  // CLEANUP the first test here feels surprising - should it error or something?
  Stdlib.Dict.fromList [ ("duplicate_key", 1L); ("b", 2L); ("duplicate_key", 3L) ] == Stdlib.Option.Option.None()

  Stdlib.Dict.fromList [ ("a", 1L); ("b", 2L); ("c", 3L) ]
  == PACKAGE.Darklang.Stdlib.Option.Option.Some(Dict { c = 3L; b = 2L; a = 1L })

  Stdlib.Dict.fromList [ ("Content-Length", "0"); ("Server", "dark") ]
  == PACKAGE.Darklang.Stdlib.Option.Option.Some(
      Dict
        { ``Content-Length`` = "0"
          ``Server`` = "dark" }
    )

  Stdlib.Dict.fromList [] == Stdlib.Option.Option.Some(Dict { })

  Stdlib.Dict.fromList [ Builtin.testRuntimeError "" ] == Builtin.testDerrorMessage ""

  // CLEANUP this error message is the goal once Dvals include typeRefs:
  //Test.runtimeError "In Dict.fromList's 1st argument (`entries`), the nested value `entries[0][0]` should be a String. However, an Int64 (1) was passed instead.\n\nExpected: String\nActual: an Int64: 1"
  Stdlib.Dict.fromList [ (1L, 1L) ] == Builtin.testDerrorMessage
    """PACKAGE.Darklang.Stdlib.Dict.fromList's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<(Int64, Int64)> ([  (1, 1)...) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<(Int64, Int64)>: [\n  (1, 1)\n]"""


module Get =
  Stdlib.Dict.get (Dict { key1 = "val1" }) "key1" == Stdlib.Option.Option.Some("val1")

  Stdlib.Dict.get (Dict { key1 = "val1" }) "" == Stdlib.Option.Option.None()


module IsEmpty =
  Stdlib.Dict.isEmpty (Dict { a = 1L }) == false
  Stdlib.Dict.isEmpty (Dict { }) == true


module Keys =
  Stdlib.Dict.keys (Dict { key1 = "val1" }) == [ "key1" ]


module Map =
  Stdlib.Dict.map
    (Dict { key1 = "val1"; key2 = "val2" })
    (fun k x -> k ++ x)
  == (Dict { key2 = "key2val2"; key1 = "key1val1" })

  Stdlib.Dict.map
    (Dict { key1 = 5L; key2 = 3L; key3 = 3L })
    (fun k x ->
      Stdlib.Bool.and
        (Stdlib.Int64.greaterThanOrEqualTo x 1L)
        (Stdlib.Int64.lessThanOrEqualTo x 4L)
    )
  ==
  (Dict
    { key3 = true
      key2 = true
      key1 = false })

  Stdlib.Dict.map (Dict { a = 1L; b = 2L }) (fun k x -> x + 1L) == (Dict
    { b = 3L; a = 2L })

  Stdlib.Dict.map (Dict { }) (fun key value -> 0L) == (Dict { })


module Member =
  Stdlib.Dict.member (Dict { otherKey = 5L; someKey = 5L }) "someKey" == true

  Stdlib.Dict.member (Dict { otherKey = 5L }) "someKey" == false


module Merge =
  Stdlib.Dict.merge (Dict { key1 = "val1" }) (Dict { key2 = "val2" }) == (Dict
    { key2 = "val2"; key1 = "val1" })

  Stdlib.Dict.merge (Dict { key1 = "val_l" }) (Dict { key1 = "val_r" }) == (Dict
    { key1 = "val_r" })

  Stdlib.Dict.merge (Dict { }) (Dict { }) == (Dict { })


module Set =
  Stdlib.Dict.set (Dict { key1 = "val1before" }) "key1" "val1after" == (Dict
    { key1 = "val1after" })

  Stdlib.Dict.set (Dict { key1 = "val1" }) "key2" "val2" == (Dict
    { key1 = "val1"; key2 = "val2" })

  // Dicts do not currently enforce value typing, therefore the following tests pass
  // VTTODO: this should fail
  Stdlib.Dict.set (Dict { key1 = "val1" }) "key2" 2L == (Dict
    { key1 = "val1"; key2 = 2L })

  Stdlib.Dict.set (Dict { key1 = 1 }) "key1" "changedTypeValue" == (Dict
    { key1 = "changedTypeValue" })


module Singleton =
  Stdlib.Dict.singleton "one" 1L == (Dict { one = 1L })

  Stdlib.Dict.singleton "Content-Length" 1L == (Dict { ``Content-Length`` = 1L })


module Size =
  Stdlib.Dict.size (Dict { a = 3L; b = 1L; c = 1L }) == 3L
  Stdlib.Dict.size (Dict { }) == 0L


module ToList =
  (Stdlib.Dict.toList (Dict { a = 1L; b = 2L; c = 3L })) == [ ("a", 1L)
                                                              ("b", 2L)
                                                              ("c", 3L) ]

  Stdlib.Dict.toList (Dict { }) == []


module Values =
  Stdlib.Dict.values (Dict { key1 = "val1" }) == [ "val1" ]


module Remove =
  (Stdlib.Dict.remove (Dict { key1 = "val1"; key2 = "val2" }) "key1") == (Dict { key2 = "val2" })

  (Stdlib.Dict.remove (Dict { key1 = "val1" }) "key1") == (Dict { })

  (Stdlib.Dict.remove (Dict { key1 = "val1" }) "key2") == (Dict { key1 = "val1" })

  (Stdlib.Dict.remove (Dict { }) "key1") == (Dict { })