module Empty =
  PACKAGE.Darklang.Stdlib.Dict.empty = Dict { }


module FilterMap =
  PACKAGE.Darklang.Stdlib.Dict.filterMap_v0 (Dict { }) (fun (key, value) -> 0) = (Dict
    { })

  PACKAGE.Darklang.Stdlib.Dict.filterMap_v0
    (Dict { a = "x"; b = "y"; c = "z" })
    (fun (key, value) ->
      if value == "y" then
        PACKAGE.Darklang.Stdlib.Option.Option.None
      else
        (PACKAGE.Darklang.Stdlib.Option.Option.Some(key ++ value))) = (Dict
    { c = "cz"; a = "ax" })

  (PACKAGE.Darklang.Stdlib.Dict.filterMap_v0
    (Dict { a = "x"; b = "y"; c = "z" })
    (fun (key, value) ->
      if value == "y" then
        false
      else
        PACKAGE.Darklang.Stdlib.Option.Option.Some(key ++ value))) = Builtin.Test.derrorMessage
    """Function return value should be a PACKAGE.Darklang.Stdlib.Option.Option<'b>. However, a Bool (false) was returned instead.

Expected: PACKAGE.Darklang.Stdlib.Option.Option<'b>
Actual: a Bool: false"""



module Filter =
  PACKAGE.Darklang.Stdlib.Dict.filter
    (Dict { key1 = "val1"; key2 = "val2" })
    (fun (k, v) -> k == "key1") = (Dict { key1 = "val1" })

  PACKAGE.Darklang.Stdlib.Dict.filter (Dict { key1 = 1; key2 = 3 }) (fun (k, v) ->
    v < 2) = (Dict { key1 = 1 })

  PACKAGE.Darklang.Stdlib.Dict.filter (Dict { }) (fun (k, v) -> 0) = (Dict { })

  PACKAGE.Darklang.Stdlib.Dict.filter (Dict { a = 1; b = 2; c = 3 }) (fun (k, v) ->
    2) = Builtin.Test.derrorMessage
    """Function return value should be a Bool. However, an Int (2) was returned instead.

Expected: Bool
Actual: an Int: 2"""


module FromListOverwritingDuplicates =
  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0
    [ ("duplicate_key", 1); ("b", 2); ("duplicate_key", 3) ] = (Dict
    { b = 2; duplicate_key = 3 })

  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0
    [ ("a", 1); ("b", 2); ("c", 3) ] = (Dict { c = 3; b = 2; a = 1 })

  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0 [] = (Dict { })

  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0
    [ Builtin.Test.runtimeError "" ] = Builtin.Test.derrorMessage ""

  // In Dict.fromListOverwritingDuplicates's 1st argument (`entries`), the nested value `entries[1]` should be a (String, 'b). However, an Int (2) was passed instead.\n\nExpected: (String, 'b)\nActual: an Int: 2
  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0 [ (1, 2) ] = Builtin.Test.derrorMessage
    "PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<(Int, Int)> ([  (1, 2)...) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<(Int, Int)>: [\n  (1, 2)\n]"

  PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates_v0 [ 1 ] = Builtin.Test.derrorMessage
    "PACKAGE.Darklang.Stdlib.Dict.fromListOverwritingDuplicates's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<Int> ([  1]) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<Int>: [\n  1\n]"


module FromList =
  // CLEANUP the first test here feels surprising - should it error or something?
  PACKAGE.Darklang.Stdlib.Dict.fromList_v0
    [ ("duplicate_key", 1); ("b", 2); ("duplicate_key", 3) ] = PACKAGE.Darklang.Stdlib.Option.Option.None

  PACKAGE.Darklang.Stdlib.Dict.fromList_v0 [ ("a", 1); ("b", 2); ("c", 3) ] = PACKAGE
    .Darklang
    .Stdlib
    .Option
    .Option
    .Some(Dict { c = 3; b = 2; a = 1 })

  PACKAGE.Darklang.Stdlib.Dict.fromList_v0
    [ ("Content-Length", "0"); ("Server", "dark") ] = PACKAGE
    .Darklang
    .Stdlib
    .Option
    .Option
    .Some(
      Dict
        { ``Content-Length`` = "0"
          Server = "dark" }
    )

  PACKAGE.Darklang.Stdlib.Dict.fromList_v0 [] = PACKAGE
    .Darklang
    .Stdlib
    .Option
    .Option
    .Some(Dict { })

  PACKAGE.Darklang.Stdlib.Dict.fromList_v0 [ Builtin.Test.runtimeError "" ] = Builtin.Test.derrorMessage
    ""

  // CLEANUP this error message is the goal once Dvals include typeRefs:
  //Test.runtimeError "In Dict.fromList's 1st argument (`entries`), the nested value `entries[0][0]` should be a String. However, an Int (1) was passed instead.\n\nExpected: String\nActual: an Int: 1"
  PACKAGE.Darklang.Stdlib.Dict.fromList_v0 [ (1, 1) ] = Builtin.Test.derrorMessage
    "PACKAGE.Darklang.Stdlib.Dict.fromList's 1st argument (`entries`) should be a List<(String * 'a)>. However, a List<(Int, Int)> ([  (1, 1)...) was passed instead.

Expected: (entries: List<(String * 'a)>)
Actual: a List<(Int, Int)>: [\n  (1, 1)\n]"


module Get =
  PACKAGE.Darklang.Stdlib.Dict.get (Dict { key1 = "val1" }) "key1" = PACKAGE.Darklang.Stdlib.Option.Option.Some
    "val1"

  PACKAGE.Darklang.Stdlib.Dict.get (Dict { key1 = "val1" }) "" = PACKAGE.Darklang.Stdlib.Option.Option.None


module IsEmpty =
  PACKAGE.Darklang.Stdlib.Dict.isEmpty_v0 (Dict { a = 1 }) = false
  PACKAGE.Darklang.Stdlib.Dict.isEmpty_v0 (Dict { }) = true


module Keys =
  PACKAGE.Darklang.Stdlib.Dict.keys_v0 (Dict { key1 = "val1" }) = [ "key1" ]


module Map =
  PACKAGE.Darklang.Stdlib.Dict.map_v0
    (Dict { key1 = "val1"; key2 = "val2" })
    (fun (k, x) -> k ++ x) = (Dict { key2 = "key2val2"; key1 = "key1val1" })

  PACKAGE.Darklang.Stdlib.Dict.map_v0
    (Dict { key1 = 5; key2 = 3; key3 = 3 })
    (fun (k, x) ->
      PACKAGE.Darklang.Stdlib.Bool.and_v0
        (PACKAGE.Darklang.Stdlib.Int.greaterThanOrEqualTo_v0 x 1)
        (PACKAGE.Darklang.Stdlib.Int.lessThanOrEqualTo_v0 x 4)) = (Dict
    { key3 = true
      key2 = true
      key1 = false })

  PACKAGE.Darklang.Stdlib.Dict.map_v0 (Dict { a = 1; b = 2 }) (fun (k, x) -> x + 1) = (Dict
    { b = 3; a = 2 })

  PACKAGE.Darklang.Stdlib.Dict.map_v0 (Dict { }) (fun (key, value) -> 0) = (Dict { })


module Member =
  PACKAGE.Darklang.Stdlib.Dict.member_v0
    (Dict { otherKey = 5; someKey = 5 })
    "someKey" = true

  PACKAGE.Darklang.Stdlib.Dict.member_v0 (Dict { otherKey = 5 }) "someKey" = false


module Merge =
  PACKAGE.Darklang.Stdlib.Dict.merge_v0
    (Dict { key1 = "val1" })
    (Dict { key2 = "val2" }) = (Dict { key2 = "val2"; key1 = "val1" })

  PACKAGE.Darklang.Stdlib.Dict.merge_v0
    (Dict { key1 = "val_l" })
    (Dict { key1 = "val_r" }) = (Dict { key1 = "val_r" })

  PACKAGE.Darklang.Stdlib.Dict.merge_v0 (Dict { }) (Dict { }) = (Dict { })


module Set =
  PACKAGE.Darklang.Stdlib.Dict.set_v0
    (Dict { key1 = "val1before" })
    "key1"
    "val1after" = (Dict { key1 = "val1after" })

  PACKAGE.Darklang.Stdlib.Dict.set_v0 (Dict { key1 = "val1" }) "key2" "val2" = (Dict
    { key1 = "val1"; key2 = "val2" })

  // Dicts do not currently enforce value typing, therefore the following tests pass
  // VTTODO: this should fail
  PACKAGE.Darklang.Stdlib.Dict.set_v0 (Dict { key1 = "val1" }) "key2" 2 = (Dict
    { key1 = "val1"; key2 = 2 })

  PACKAGE.Darklang.Stdlib.Dict.set_v0 (Dict { key1 = 1 }) "key1" "changedTypeValue" = (Dict
    { key1 = "changedTypeValue" })


module Singleton =
  PACKAGE.Darklang.Stdlib.Dict.singleton_v0 "one" 1 = (Dict { one = 1 })

  PACKAGE.Darklang.Stdlib.Dict.singleton_v0 "Content-Length" 1 = (Dict
    { ``Content-Length`` = 1 })


module Size =
  PACKAGE.Darklang.Stdlib.Dict.size_v0 (Dict { a = 3; b = 1; c = 1 }) = 3
  PACKAGE.Darklang.Stdlib.Dict.size_v0 (Dict { }) = 0


module ToList =
  PACKAGE.Darklang.Stdlib.Dict.toList_v0 (Dict { a = 1; b = 2; c = 3 }) = [ ("a", 1)
                                                                            ("b", 2)
                                                                            ("c", 3) ]

  PACKAGE.Darklang.Stdlib.Dict.toList_v0 (Dict { }) = []


module Values =
  PACKAGE.Darklang.Stdlib.Dict.values_v0 (Dict { key1 = "val1" }) = [ "val1" ]


module Remove =
  PACKAGE.Darklang.Stdlib.Dict.remove_v0
    (Dict { key1 = "val1"; key2 = "val2" })
    "key1" = (Dict { key2 = "val2" })

  PACKAGE.Darklang.Stdlib.Dict.remove_v0 (Dict { key1 = "val1" }) "key1" = (Dict { })

  PACKAGE.Darklang.Stdlib.Dict.remove_v0 (Dict { key1 = "val1" }) "key2" = (Dict
    { key1 = "val1" })

  PACKAGE.Darklang.Stdlib.Dict.remove_v0 (Dict { }) "key1" = (Dict { })