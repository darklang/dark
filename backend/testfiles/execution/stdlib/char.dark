let smiley () : Char =
  ("üòÇ" |> Stdlib.String.head |> Builtin.unwrap)

let hand () : Char =
  "‚úãüèø" |> Stdlib.String.head |> Builtin.unwrap

let family () : Char =
  "üë©‚Äçüë©‚Äçüëß‚Äçüë¶" |> Stdlib.String.head |> Builtin.unwrap

(Stdlib.Char.toLowercase 'A') == 'a'
(Stdlib.Char.toLowercase 'a') == 'a'
(Stdlib.Char.toLowercase '√Å') == '√°'
(Stdlib.Char.toLowercase '3') == '3'
(Stdlib.Char.toLowercase (smiley ())) == smiley ()
(Stdlib.Char.toLowercase '≈ª') == '≈º'
(Stdlib.Char.toLowercase '√ì') == '√≥'
(Stdlib.Char.toLowercase '≈Å') == '≈Ç'
(Stdlib.Char.toLowercase (hand ())) == hand ()
(Stdlib.Char.toLowercase '·≤æ') == '·Éæ'
(Stdlib.Char.toLowercase '·Éæ') == '·Éæ'


(Stdlib.Char.toUppercase 'a') == 'A'
(Stdlib.Char.toUppercase 'A') == 'A'
(Stdlib.Char.toUppercase '√°') == '√Å'
(Stdlib.Char.toUppercase '3') == '3'
(Stdlib.Char.toUppercase (smiley ())) == smiley ()
(Stdlib.Char.toUppercase '≈º') == '≈ª'
(Stdlib.Char.toUppercase '√≥') == '√ì'
(Stdlib.Char.toUppercase '≈Ç') == '≈Å'
(Stdlib.Char.toUppercase (hand ())) == hand ()
(Stdlib.Char.toUppercase '·Éæ') == '·≤æ'
(Stdlib.Char.toUppercase '·≤æ') == '·≤æ'


(Stdlib.Char.isLowercase 'a') == true
(Stdlib.Char.isLowercase 'A') == false
(Stdlib.Char.isLowercase '√°') == true
(Stdlib.Char.isLowercase '√Å') == false
(Stdlib.Char.isLowercase '3') == false
(Stdlib.Char.isLowercase (smiley ())) == false
(Stdlib.Char.isLowercase '≈º') == true
(Stdlib.Char.isLowercase '≈ª') == false
(Stdlib.Char.isLowercase '√≥') == true
(Stdlib.Char.isLowercase '√ì') == false
(Stdlib.Char.isLowercase '≈Ç') == true
(Stdlib.Char.isLowercase '≈Å') == false
(Stdlib.Char.isLowercase (hand ())) == false
(Stdlib.Char.isLowercase '·Éæ') == true
(Stdlib.Char.isLowercase '·≤æ') == false


(Stdlib.Char.isUppercase 'a') == false
(Stdlib.Char.isUppercase 'A') == true
(Stdlib.Char.isUppercase '√°') == false
(Stdlib.Char.isUppercase '√Å') == true
(Stdlib.Char.isUppercase '3') == false
(Stdlib.Char.isUppercase (smiley ())) == false
(Stdlib.Char.isUppercase '≈º') == false
(Stdlib.Char.isUppercase '≈ª') == true
(Stdlib.Char.isUppercase '√≥') == false
(Stdlib.Char.isUppercase '√ì') == true
(Stdlib.Char.isUppercase '≈Ç') == false
(Stdlib.Char.isUppercase '≈Å') == true
(Stdlib.Char.isUppercase (hand ())) == false
(Stdlib.Char.isUppercase '·Éæ') == false
(Stdlib.Char.isUppercase '·≤æ') == true


(Stdlib.Char.isDigit 'a') == false
(Stdlib.Char.isDigit 'A') == false
(Stdlib.Char.isDigit '√°') == false
(Stdlib.Char.isDigit '√Å') == false
(Stdlib.Char.isDigit '0')  == true
(Stdlib.Char.isDigit '1')  == true
(Stdlib.Char.isDigit '2')  == true
(Stdlib.Char.isDigit '3')  == true
(Stdlib.Char.isDigit '4')  == true
(Stdlib.Char.isDigit '5')  == true
(Stdlib.Char.isDigit '6')  == true
(Stdlib.Char.isDigit '7')  == true
(Stdlib.Char.isDigit '8')  == true
(Stdlib.Char.isDigit '9')  == true
(Stdlib.Char.isDigit (smiley ())) == false


(Stdlib.Char.isDigit '≈º') == false
(Stdlib.Char.isDigit '≈ª') == false
(Stdlib.Char.isDigit '√≥') == false
(Stdlib.Char.isDigit '√ì') == false
(Stdlib.Char.isDigit '≈Ç') == false
(Stdlib.Char.isDigit '≈Å') == false
(Stdlib.Char.isDigit (hand ())) == false
(Stdlib.Char.isDigit '·Éæ') == false
(Stdlib.Char.isDigit '·≤æ') == false
(Stdlib.Char.isDigit ' ') == false
(Stdlib.Char.isDigit '\t') == false


(Stdlib.Char.isASCIILetter 'a')  == true
(Stdlib.Char.isASCIILetter 'A')  == true
(Stdlib.Char.isASCIILetter '√°') == false
(Stdlib.Char.isASCIILetter '√Å') == false
(Stdlib.Char.isASCIILetter '3') == false
(Stdlib.Char.isASCIILetter ',') == false
(Stdlib.Char.isASCIILetter (smiley ())) == false
(Stdlib.Char.isASCIILetter '≈º') == false
(Stdlib.Char.isASCIILetter '≈ª') == false
(Stdlib.Char.isASCIILetter '√≥') == false
(Stdlib.Char.isASCIILetter '√ì') == false
(Stdlib.Char.isASCIILetter '≈Ç') == false
(Stdlib.Char.isASCIILetter '≈Å') == false
(Stdlib.Char.isASCIILetter (hand ())) == false
(Stdlib.Char.isASCIILetter '·Éæ') == false
(Stdlib.Char.isASCIILetter '·≤æ') == false
(Stdlib.Char.isASCIILetter ' ') == false
(Stdlib.Char.isASCIILetter '\t') == false


(Stdlib.Char.isASCII 'a') == true
(Stdlib.Char.isASCII 'A') == true
(Stdlib.Char.isASCII '√°') == false
(Stdlib.Char.isASCII '√Å') == false
(Stdlib.Char.isASCII '3') == true
(Stdlib.Char.isASCII (smiley ())) == false
(Stdlib.Char.isASCII '≈º') == false
(Stdlib.Char.isASCII '≈ª') == false
(Stdlib.Char.isASCII '√≥') == false
(Stdlib.Char.isASCII '√ì') == false
(Stdlib.Char.isASCII '≈Ç') == false
(Stdlib.Char.isASCII '≈Å') == false
(Stdlib.Char.isASCII (hand ())) == false
(Stdlib.Char.isASCII '·Éæ') == false
(Stdlib.Char.isASCII '·≤æ') == false
(Stdlib.Char.isASCII ' ') == true
(Stdlib.Char.isASCII '\t') == true


(Stdlib.Char.toAsciiCode 'a') == Stdlib.Option.Option.Some(97L)

(Stdlib.Char.toAsciiCode 'A') == Stdlib.Option.Option.Some(65L)

(Stdlib.Char.toAsciiCode '√°') == Stdlib.Option.Option.Some(225L)

(Stdlib.Char.toAsciiCode '√Å') == Stdlib.Option.Option.Some(193L)

(Stdlib.Char.toAsciiCode '3') == Stdlib.Option.Option.Some(51L)

(Stdlib.Char.toAsciiCode (smiley ())) == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '≈º') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '≈ª') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '√≥') == Stdlib.Option.Option.Some(243L)

(Stdlib.Char.toAsciiCode '√ì') == Stdlib.Option.Option.Some(211L)

(Stdlib.Char.toAsciiCode '≈Ç') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '≈Å') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode (hand ())) == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '·Éæ') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode '·≤æ') == Stdlib.Option.Option.None()

(Stdlib.Char.toAsciiCode ' ') == Stdlib.Option.Option.Some(32L)

(Stdlib.Char.toAsciiCode '\t') == Stdlib.Option.Option.Some(9L)


(Stdlib.Char.isLessThan 'a' 'b') == true
(Stdlib.Char.isLessThan 'a' 'A') == false
(Stdlib.Char.isLessThan 'b' 'A') == false
(Stdlib.Char.isLessThan 'a' '√°') == true
(Stdlib.Char.isLessThan 'b' '√°') == true
(Stdlib.Char.isLessThan 'a' '·Éæ') == true
(Stdlib.Char.isLessThan 'a' '·≤æ') == true
(Stdlib.Char.isLessThan 'a' '≈Ç') == true
(Stdlib.Char.isLessThan 'a' '≈Å') == true
(Stdlib.Char.isLessThan 'a' ' ') == false
(Stdlib.Char.isLessThan 'a' '\t') == false
(Stdlib.Char.isLessThan 'a' '1') == false
(Stdlib.Char.isLessThan '2' '1') == false
(Stdlib.Char.isLessThan 'a' (smiley ())) == true
(Stdlib.Char.isLessThan 'a' (hand ())) == true
(Stdlib.Char.isLessThan 'a' (family ())) == true
(Stdlib.Char.isLessThan (smiley ()) (hand ())) == false


(Stdlib.Char.isGreaterThan 'a' 'b') == false
(Stdlib.Char.isGreaterThan 'a' 'A') == true
(Stdlib.Char.isGreaterThan 'b' 'A') == true
(Stdlib.Char.isGreaterThan 'a' '√°') == false
(Stdlib.Char.isGreaterThan 'b' '√°') == false
(Stdlib.Char.isGreaterThan 'a' '·Éæ') == false
(Stdlib.Char.isGreaterThan 'a' '·≤æ') == false
(Stdlib.Char.isGreaterThan 'a' '≈Ç') == false
(Stdlib.Char.isGreaterThan 'a' '≈Å') == false
(Stdlib.Char.isGreaterThan 'a' ' ') == true
(Stdlib.Char.isGreaterThan 'a' '\t') == true
(Stdlib.Char.isGreaterThan 'a' '1') == true
(Stdlib.Char.isGreaterThan '2' '1') == true
(Stdlib.Char.isGreaterThan 'a' (smiley ())) == false
(Stdlib.Char.isGreaterThan 'a' (hand ())) == false
(Stdlib.Char.isGreaterThan 'a' (family ())) == false
(Stdlib.Char.isGreaterThan (smiley ()) (hand ())) == true


(Stdlib.Char.toString 'A') == "A"
(Stdlib.Char.toString 'a') == "a"
(Stdlib.Char.toString '√Å') == "√Å"
(Stdlib.Char.toString '3') == "3"
(Stdlib.Char.toString (smiley ())) == "üòÇ"
(Stdlib.Char.toString '≈ª') == "≈ª"
(Stdlib.Char.toString '√ì') == "√ì"
(Stdlib.Char.toString '≈Å') == "≈Å"
(Stdlib.Char.toString (hand ())) == "‚úãüèø"
(Stdlib.Char.toString '·≤æ') == "·≤æ"
(Stdlib.Char.toString '·Éæ') == "·Éæ"