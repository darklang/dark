Stdlib.UInt64.max 5UL 6UL == 6UL
Stdlib.UInt64.max 10UL 1UL == 10UL


Stdlib.UInt64.min 5UL 6UL == 5UL
Stdlib.UInt64.min 10UL 10UL == 10UL
Stdlib.UInt64.min 18446744073709551615UL 0UL == 0UL


Stdlib.UInt64.clamp 1UL 2UL 1UL == 1UL
Stdlib.UInt64.clamp 3UL 0UL 2UL == 2UL
Stdlib.UInt64.clamp 100UL 0UL 0UL == 0UL
Stdlib.UInt64.clamp 100UL 1UL 0UL == 1UL


Stdlib.UInt64.mod 15UL 5UL == 0UL
Stdlib.UInt64.mod 15UL 6UL == 3UL
Stdlib.UInt64.mod 0UL 15UL == 0UL
Stdlib.UInt64.mod 9999999999998UL 3UL == 2UL

Stdlib.UInt64.mod 5UL 0UL == Builtin.testDerrorMessage "Zero modulus"


Stdlib.UInt64.power 8UL 5UL == 32768UL
Stdlib.UInt64.power 0UL 1UL == 0UL
Stdlib.UInt64.power 0UL 0UL == 1UL
Stdlib.UInt64.power 1UL 0UL == 1UL
Stdlib.UInt64.power 1000UL 0UL == 1UL

Stdlib.UInt64.power 200UL 20UL == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt64.power 200UL 7UL == 12800000000000000UL

Stdlib.UInt64.power 1UL 2147483649UL == 1UL

Stdlib.UInt64.greaterThan 20UL 1UL == true


Stdlib.UInt64.greaterThanOrEqualTo 0UL 1UL == false
Stdlib.UInt64.greaterThanOrEqualTo 1UL 0UL == true
Stdlib.UInt64.greaterThanOrEqualTo 6UL 1UL == true
Stdlib.UInt64.greaterThanOrEqualTo 6UL 8UL == false

Stdlib.UInt64.lessThanOrEqualTo 6UL 8UL == true
Stdlib.UInt64.lessThanOrEqualTo 10UL 1UL == false
Stdlib.UInt64.lessThanOrEqualTo 0UL 1UL == true
Stdlib.UInt64.lessThanOrEqualTo 1UL 0UL == false


Stdlib.UInt64.lessThan 6UL 8UL == true
Stdlib.UInt64.lessThan 10UL 1UL == false
Stdlib.UInt64.lessThan 0UL 1UL == true
Stdlib.UInt64.lessThan 1UL 0UL == false


Stdlib.UInt64.sqrt 4UL == 2.0
Stdlib.UInt64.sqrt 100UL == 10.0
Stdlib.UInt64.sqrt 86UL == 9.273618495495704

Stdlib.UInt64.toFloat 2UL == 2.0
Stdlib.UInt64.toFloat 955656UL == 955656.0

Stdlib.UInt64.add 10UL 9UL == 19UL
Stdlib.UInt64.add 88UL 9UL == 97UL
Stdlib.UInt64.add 1UL 0UL == 1UL
Stdlib.UInt64.add 18446744073709551614UL 1UL == 18446744073709551615UL

// Overflow tests
Stdlib.UInt64.add 18446744073709551615UL 1UL == Builtin.testDerrorMessage
  "Out of range"

Stdlib.UInt64.add 55UL 18446744073709551615UL == Builtin.testDerrorMessage
  "Out of range"


Stdlib.UInt64.subtract 10UL 9UL == 1UL
Stdlib.UInt64.subtract 88UL 9UL == 79UL
Stdlib.UInt64.subtract 1UL 0UL == 1UL

Stdlib.UInt64.multiply 8UL 8UL == 64UL
Stdlib.UInt64.multiply 5145UL 5145UL == 26471025UL

Stdlib.UInt64.multiply 9223372036854775808UL 2UL == Builtin.testDerrorMessage
  "Out of range"

Stdlib.UInt64.divide 10UL 5UL == 2UL
Stdlib.UInt64.divide 17UL 3UL == 5UL
Stdlib.UInt64.divide 0UL 1UL == 0UL

Stdlib.UInt64.divide 1UL 0UL == Builtin.testDerrorMessage "Division by zero"

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt64.random 1UL 2UL)
|> Stdlib.List.map (fun x ->
  (Builtin.uint64GreaterThanOrEqualTo x 1UL)
  && (Builtin.uint64LessThanOrEqualTo x 2UL)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt64.random 10UL 20UL)
|> Stdlib.List.map (fun x ->
  (Builtin.uint64GreaterThanOrEqualTo x 10UL)
  && (Builtin.uint64LessThanOrEqualTo x 20UL)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt64.random 2UL 1UL)
|> Stdlib.List.map (fun x ->
  (Builtin.uint64GreaterThanOrEqualTo x 1UL)
  && (Builtin.uint64LessThanOrEqualTo x 2UL)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt64.random 20UL 10UL)
|> Stdlib.List.map (fun x ->
  (Builtin.uint64GreaterThanOrEqualTo x 10UL)
  && (Builtin.uint64LessThanOrEqualTo x 20UL)) == [ true; true; true; true; true ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt64.random 0UL 1UL)
 |> Stdlib.List.unique) == [ 0UL; 1UL ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt64.random 0UL 2UL)
 |> Stdlib.List.unique) == [ 0UL; 1UL; 2UL ]

Stdlib.UInt64.sum [ 1UL; 2UL ] == 3UL

Stdlib.UInt64.parse "0" == Stdlib.Result.Result.Ok(0UL)

Stdlib.UInt64.parse "1" == Stdlib.Result.Result.Ok(1UL)

Stdlib.UInt64.parse " 1" == Stdlib.Result.Result.Ok(1UL)

Stdlib.UInt64.parse "1 " == Stdlib.Result.Result.Ok(1UL)

Stdlib.UInt64.parse "+1" == Stdlib.Result.Result.Ok(1UL)

Stdlib.UInt64.parse " +1 " == Stdlib.Result.Result.Ok(1UL)

Stdlib.UInt64.parse "-1" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.OutOfRange)

Stdlib.UInt64.parse "078" == Stdlib.Result.Result.Ok(78UL) // "octal" format ignored

Stdlib.UInt64.parse "-00001" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.OutOfRange)

Stdlib.UInt64.parse "-10001" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.OutOfRange)

Stdlib.UInt64.parse "18446744073709551615" == Stdlib.Result.Result.Ok(18446744073709551615UL)

Stdlib.UInt64.parse "18446744073709551616" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.OutOfRange)

Stdlib.UInt64.parse "1 2 3" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "+ 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "- 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "0xA" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "0x123" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "0b0100" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "PACKAGE.Darklang.Stdlib.Math.pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "1.23E+04" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "18446744073709551616" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.OutOfRange)

Stdlib.UInt64.parse "" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "1I" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "one" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)

Stdlib.UInt64.parse "XIV" == Stdlib.Result.Result.Error(
  Stdlib.UInt64.ParseError.BadFormat)


Stdlib.UInt64.toString 0UL == "0"
Stdlib.UInt64.toString 1UL == "1"
Stdlib.UInt64.toString 18446744073709551615UL == "18446744073709551615"


Stdlib.UInt64.fromInt8 0y == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromInt8 1y == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromInt8 127y == Stdlib.Option.Option.Some(127UL)

Stdlib.UInt64.fromInt8 -128y == Stdlib.Option.Option.None()

Stdlib.UInt64.fromUInt8 0uy == 0UL

Stdlib.UInt64.fromUInt8 1uy == 1UL

Stdlib.UInt64.fromUInt8 255uy == 255UL

Stdlib.UInt64.fromInt16 0s == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromInt16 1s == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromInt16 32767s == Stdlib.Option.Option.Some(32767UL)

Stdlib.UInt64.fromInt16 -32768s == Stdlib.Option.Option.None()

Stdlib.UInt64.fromUInt16 0us == 0UL

Stdlib.UInt64.fromUInt16 1us == 1UL

Stdlib.UInt64.fromUInt16 65535us == 65535UL

Stdlib.UInt64.fromInt32 0l == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromInt32 1l == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromInt32 2147483647l == Stdlib.Option.Option.Some(2147483647UL)

Stdlib.UInt64.fromInt32 -1l == Stdlib.Option.Option.None()

Stdlib.UInt64.fromUInt32 0ul == 0UL

Stdlib.UInt64.fromUInt32 1ul == 1UL

Stdlib.UInt64.fromUInt32 4294967295ul == 4294967295UL

Stdlib.UInt64.fromInt64 0L == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromInt64 1L == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromInt64 9223372036854775807L == Stdlib.Option.Option.Some(9223372036854775807UL)

Stdlib.UInt64.fromInt64 -1L == Stdlib.Option.Option.None()

Stdlib.UInt64.fromInt128 0Q == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromInt128 1Q == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromInt128 -1Q == Stdlib.Option.Option.None()

Stdlib.UInt64.fromInt128 18446744073709551616Q == Stdlib.Option.Option.None()

Stdlib.UInt64.fromInt128 170141183460469231731687303715884105727Q == Stdlib.Option.Option.None()

Stdlib.UInt64.fromUInt128 0Z == Stdlib.Option.Option.Some(0UL)

Stdlib.UInt64.fromUInt128 1Z == Stdlib.Option.Option.Some(1UL)

Stdlib.UInt64.fromUInt128 18446744073709551615Z == Stdlib.Option.Option.Some(18446744073709551615UL)

Stdlib.UInt64.fromUInt128 18446744073709551616Z == Stdlib.Option.Option.None()

Stdlib.UInt64.fromUInt128 340282366920938463463374607431768211455Z == Stdlib.Option.Option.None()