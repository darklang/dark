Stdlib.UInt16.max 5us 6us == 6us
Stdlib.UInt16.max 10us 1us == 10us
Stdlib.UInt16.max 0us 6us == 6us
Stdlib.UInt16.max 65535us 0us == 65535us

Stdlib.UInt16.min 5us 6us == 5us
Stdlib.UInt16.min 10us 10us == 10us
Stdlib.UInt16.min 65535us 0us == 0us

Stdlib.UInt16.clamp 1us 2us 1us == 1us
Stdlib.UInt16.clamp 3us 0us 2us == 2us
Stdlib.UInt16.clamp 100us 0us 0us == 0us
Stdlib.UInt16.clamp 100us 0us 1us == 1us
Stdlib.UInt16.clamp 100us 1us 0us == 1us


Stdlib.UInt16.add 10us 9us == 19us
Stdlib.UInt16.add 88us 9us == 97us
Stdlib.UInt16.add 1us 0us == 1us
Stdlib.UInt16.add 65534us 1us == 65535us

Stdlib.UInt16.add 65535us 1us == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.subtract 10us 9us == 1us
Stdlib.UInt16.subtract 88us 9us == 79us

Stdlib.UInt16.subtract 0us 1us == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.subtract 1us 0us == 1us
Stdlib.UInt16.subtract 65535us 1us == 65534us

Stdlib.UInt16.multiply 8us 8us == 64us
Stdlib.UInt16.multiply 8us 0us == 0us
Stdlib.UInt16.multiply 32767us 2us == 65534us

Stdlib.UInt16.multiply 32768us 2us == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.multiply 65535us 2us == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.power 2us 3us == 8us
Stdlib.UInt16.power 0us 1us == 0us
Stdlib.UInt16.power 1us 0us == 1us
Stdlib.UInt16.power 0us 0us == 1us
Stdlib.UInt16.power 1us 255us == 1us

Stdlib.UInt16.power 256us 2us == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.divide 10us 5us == 2us
Stdlib.UInt16.divide 17us 3us == 5us
Stdlib.UInt16.divide 8us 5us == 1us
Stdlib.UInt16.divide 0us 1us == 0us
Stdlib.UInt16.divide 65535us 2us == 32767us

Stdlib.UInt16.divide 1us 0us == Builtin.testDerrorMessage "Division by zero"

Stdlib.UInt16.greaterThan 20us 1us == true

Stdlib.UInt16.greaterThanOrEqualTo 0us 1us == false
Stdlib.UInt16.greaterThanOrEqualTo 1us 0us == true
Stdlib.UInt16.greaterThanOrEqualTo 6us 1us == true
Stdlib.UInt16.greaterThanOrEqualTo 6us 8us == false
Stdlib.UInt16.greaterThanOrEqualTo 65535us 0us == true
Stdlib.UInt16.greaterThanOrEqualTo 0us 65535us == false

Stdlib.UInt16.lessThanOrEqualTo 6us 8us == true
Stdlib.UInt16.lessThanOrEqualTo 10us 1us == false
Stdlib.UInt16.lessThanOrEqualTo 0us 1us == true
Stdlib.UInt16.lessThanOrEqualTo 1us 0us == false
Stdlib.UInt16.lessThanOrEqualTo 65535us 0us == false
Stdlib.UInt16.lessThanOrEqualTo 0us 65535us == true
Stdlib.UInt16.lessThanOrEqualTo 65535us 65535us == true

Stdlib.UInt16.lessThan 6us 8us == true
Stdlib.UInt16.lessThan 10us 1us == false
Stdlib.UInt16.lessThan 0us 1us == true
Stdlib.UInt16.lessThan 1us 0us == false
Stdlib.UInt16.lessThan 0us 65535us == true
Stdlib.UInt16.lessThan 65535us 65535us == false

Stdlib.UInt16.toString 120us == "120"
Stdlib.UInt16.toString 1us == "1"
Stdlib.UInt16.toString 0us == "0" // UInt16 lower limit
Stdlib.UInt16.toString 65535us == "65535" // UInt16 upper limit

Stdlib.UInt16.toFloat 2us == 2.0
Stdlib.UInt16.toFloat 0us == 0.0

Stdlib.UInt16.sqrt 4us == 2.0
Stdlib.UInt16.sqrt 100us == 10.0
Stdlib.UInt16.sqrt 86us == 9.273618495495704

Stdlib.UInt16.mod 15us 5us == 0us
Stdlib.UInt16.mod 15us 6us == 3us
Stdlib.UInt16.mod 0us 15us == 0us
Stdlib.UInt16.mod 1us 2us == 1us
Stdlib.UInt16.mod 32768us 53us == 14us
Stdlib.UInt16.mod 65535us 3us == 0us

Stdlib.UInt16.mod 5us 0us == Builtin.testDerrorMessage "Zero modulus"


(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt16.random 1us 2us)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt16.greaterThanOrEqualTo x 1us)
  && (Stdlib.UInt16.lessThanOrEqualTo x 2us)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt16.random 10us 20us)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt16.greaterThanOrEqualTo x 10us)
  && (Stdlib.UInt16.lessThanOrEqualTo x 20us)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt16.random 2us 1us)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt16.greaterThanOrEqualTo x 1us)
  && (Stdlib.UInt16.lessThanOrEqualTo x 2us)) == [ true; true; true; true; true ]

(Stdlib.List.range 1L 5L)
|> Stdlib.List.map (fun x -> Stdlib.UInt16.random 20us 10us)
|> Stdlib.List.map (fun x ->
  (Stdlib.UInt16.greaterThanOrEqualTo x 10us)
  && (Stdlib.UInt16.lessThanOrEqualTo x 20us)) == [ true; true; true; true; true ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt16.random 0us 1us)
 |> Stdlib.List.unique) == [ 0us; 1us ]

((Stdlib.List.range 1L 100L)
 |> Stdlib.List.map (fun x -> Stdlib.UInt16.random 0us 2us)
 |> Stdlib.List.unique) == [ 0us; 1us; 2us ]

Stdlib.UInt16.sum [ 1us; 2us ] == 3us

Stdlib.UInt16.sum [ 1us; 65535us ] == Builtin.testDerrorMessage "Out of range"

Stdlib.UInt16.parse "-129" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.OutOfRange())

Stdlib.UInt16.parse "65536" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.OutOfRange())

Stdlib.UInt16.parse "65536us" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "1 2 3" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "+ 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "- 1" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "0xA" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "0x123" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "0b0100" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "PACKAGE.Darklang.Stdlib.Math.pi" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "1.23E+04" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "1I" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "one" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.parse "XIV" == Stdlib.Result.Result.Error(
  Stdlib.UInt16.ParseError.BadFormat())

Stdlib.UInt16.fromInt8 0y == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromInt8 1y == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromInt8 127y == Stdlib.Option.Option.Some(127us)

Stdlib.UInt16.fromInt8 (-1y) == Stdlib.Option.Option.None()
Stdlib.UInt16.fromInt8 (-128y) == Stdlib.Option.Option.None()

Stdlib.UInt16.fromUInt8 0uy == 0us

Stdlib.UInt16.fromUInt8 1uy == 1us

Stdlib.UInt16.fromUInt8 255uy == 255us

Stdlib.UInt16.fromInt16 0s == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromInt16 1s == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromInt16 32767s == Stdlib.Option.Option.Some(32767us)

Stdlib.UInt16.fromInt16 (-1s) == Stdlib.Option.Option.None()
Stdlib.UInt16.fromInt16 (-32768s) == Stdlib.Option.Option.None()

Stdlib.UInt16.fromInt32 0l == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromInt32 1l == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromInt32 65535l == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromInt32 65536l == Stdlib.Option.Option.None()
Stdlib.UInt16.fromInt32 (-1l) == Stdlib.Option.Option.None()

Stdlib.UInt16.fromUInt32 0ul == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromUInt32 1ul == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromUInt32 65535ul == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromUInt32 65536ul == Stdlib.Option.Option.None()

Stdlib.UInt16.fromInt64 0L == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromInt64 1L == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromInt64 65535L == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromInt64 65536L == Stdlib.Option.Option.None()
Stdlib.UInt16.fromInt64 (-1L) == Stdlib.Option.Option.None()

Stdlib.UInt16.fromUInt64 0UL == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromUInt64 1UL == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromUInt64 65535UL == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromUInt64 65536UL == Stdlib.Option.Option.None()

Stdlib.UInt16.fromInt128 0Q == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromInt128 1Q == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromInt128 65535Q == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromInt128 65536Q == Stdlib.Option.Option.None()
Stdlib.UInt16.fromInt128 (-1Q) == Stdlib.Option.Option.None()

Stdlib.UInt16.fromUInt128 0Z == Stdlib.Option.Option.Some(0us)

Stdlib.UInt16.fromUInt128 1Z == Stdlib.Option.Option.Some(1us)

Stdlib.UInt16.fromUInt128 65535Z == Stdlib.Option.Option.Some(65535us)

Stdlib.UInt16.fromUInt128 65536Z == Stdlib.Option.Option.None()