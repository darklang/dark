// ---------------
// Misc
// ---------------
module Documentation =
  (Stdlib.List.length (Builtin.languageToolsAllBuiltinFns ()) > 100L) == true

  ((Builtin.languageToolsAllBuiltinFns ())
   |> Stdlib.List.findFirst (fun f -> f.name == "int64Add")
   |> Builtin.unwrap
   |> (fun f -> f.parameters))
  == [ PACKAGE.Darklang.LanguageTools.BuiltinFunctionParameter
        { name = "a"; type = "Int64" }
       PACKAGE.Darklang.LanguageTools.BuiltinFunctionParameter
        { name = "b"; type = "Int64" } ]


module Infra =

  // correct number of tables
  Stdlib.Dict.size (Builtin.darkInternalInfraGetAndLogTableSizes ()) == 15L

  // server build hash
  (match Builtin.darkInternalInfraServerBuildHash () with
   // in local dev, the value is "dev"
   | "dev" -> true
   // in ci, "circleci"
   | "circleci" -> true
   // otherwise it's the first 7 chars of the git hash
   | hash -> (Stdlib.String.length hash) == 7L)
  == true

module Canvas =
  // Test creating a new canvas - just check it we can call `owner` on it
  (let owner = (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasOwner
   let newID = Builtin.darkInternalCanvasCreate owner "test"
   Builtin.darkInternalCanvasOwner newID == owner)
  == true

module Domains =
  module Roundtrip =
    ((Builtin.testGetCanvasID ())
     |> Builtin.darkInternalCanvasDomainGet
     |> Stdlib.List.head
     |> Builtin.unwrap
     |> Builtin.darkInternalCanvasDomainToCanvasID)
    == PACKAGE.Darklang.Stdlib.Result.Result.Ok(Builtin.testGetCanvasID ())

  module Errors =
    Builtin.darkInternalCanvasDomainGet (
      (Stdlib.Uuid.parse "7d9e5495-b068-4364-a2cc-3633ab4d13e6") |> Builtin.unwrap
    )
    == []

    Builtin.darkInternalCanvasDomainToCanvasID "not-a-real-domain"
    == Stdlib.Result.Result.Error("Canvas not found")

module Secrets =

  // getAll empty
  (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasSecretGetAll == []

  // insert
  (let _ =
    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasSecretInsert "SECRET" "VALUE" 0L

   (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasSecretGetAll)
  == [ PACKAGE.Darklang.Internal.Canvas.Secret
         { name = "SECRET"
           value = "VALUE"
           version = 0L } ]

  // insert twice
  (let _ =
    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasSecretInsert "SECRET" "VALUE" 1L
   // Does not work
   Builtin.darkInternalCanvasSecretInsert
      (Builtin.testGetCanvasID ())
      "SECRET"
      "OTHERVALUE"
      1L
  )
  == Stdlib.Result.Result.Error("Error inserting secret")

  // delete
  Builtin.darkInternalCanvasSecretDelete (Builtin.testGetCanvasID ()) "SECRET" 2L
  == ()

  // delete
  (let canvasID = Builtin.testGetCanvasID ()
   let _ = Builtin.darkInternalCanvasSecretInsert canvasID "SECRET" "VALUE" 3L
   let _ = Builtin.darkInternalCanvasSecretDelete canvasID "SECRET" 3L
   Builtin.darkInternalCanvasSecretGetAll canvasID)
  == []


module F404s =
  1L == 1L
  // DarkInternal.Canvas.F404.recent (Test.getCanvasID ()) == []
  // DarkInternal.Canvas.F404.delete (Test.getCanvasID ()) "" "" "" == ()


module Toplevels =
  module WithDB =
    type X = { x: String }

    [<DB>]
    type TLXDB = X

    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDBUnlocked
    |> Stdlib.List.length
    == 1L

  module NoDB =
    (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked == []

    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDeleteToplevelForever 1UL
    == false


module UnlockedDB =
  // none
  (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked == []

  module WithDB =
    type X = { x: String }

    [<DB>]
    type UXDB = X
    // one
    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDBUnlocked
    |> Stdlib.List.length
    == 1L

    // one but locked
    (let _ = Builtin.dbSet (X { x = "str" }) "test" UXDB
     (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked)
    == []

module Queue =
  // TODO: DarkInternal.Canvas.Queue.count
  // TODO: DarkInternal.Canvas.Queue.SchedulingRule.list
  // TODO: DarkInternal.Infra.SchedulingRule.Block.insert
  // TODO: DarkInternal.Infra.SchedulingRule.Block.delete
  // TODO: DarkInternal.Infra.SchedulingRule.list
  [] == []