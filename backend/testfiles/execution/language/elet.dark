(let x = Builtin.Test.runtimeError "a" in 5) = Builtin.Test.derrorMessage "a"

(let x = Builtin.Test.runtimeError "a" in Builtin.Test.runtimeError "b") = Builtin.Test.derrorMessage
  "a"

module Variables =
  (let x = 5 in x) = 5

module Shadowing =
  (let x = 5 in
   let x = 6 in
   x) = 6

module Unit =
  (let () = PACKAGE.Darklang.Stdlib.Tuple2.first ((), 5) in 5) = 5

module Tuples =
  (let (a, b) = (1, 2) in 2) = 2
  (let (a, b) = (1, 2) in b) = 2
  (let (a, b) = (1, 2) in (b, a)) = (2, 1)
  (let (d, d) = (2, 1) in d) = 1
  (let (_, _) = (1, 2) in 2) = 2

  (let (a, b, c) = (1, 2, 3) in b) = 2
  (let (a, b, c) = (1, 2, 3) in (b, a)) = (2, 1)
  (let (d, d, d) = (2, 1, 3) in d) = 3
  (let (_, _, _) = (1, 2, 3) in 2) = 2

  (let (_, _, _) = (1, 2, Builtin.Test.runtimeError "test") in 2) = Builtin.Test.derrorMessage
    "test"

  (let (_, _, _) =
    (Builtin.Test.runtimeError "test1", 2, Builtin.Test.runtimeError "test2") in

   2) = Builtin.Test.derrorMessage "test1"

  // With multiple levels of nested destructuring
  (let ((a, ((b, (c, d)), e)), f) = ((1, ((2, (3, 4)), 5)), 6) in c) = 3
  (let ((a, ((b, cd), e)), f) = ((1, ((2, (3, 4)), 5)), 6) in cd) = (3, 4)

module Shadowing =
  (let x = 5
   let x = 6
   x) = 6


  (let x = 35

   match 6 with
   | x -> x) = 6


  (let x = 35

   match PACKAGE.Darklang.Stdlib.Result.Result.Ok 6 with
   | Ok x -> x) = 6


  (let x = 35 in Builtin.List.map_v0 [ 1; 2; 3; 4 ] (fun x -> x + 2)) = [ 3
                                                                          4
                                                                          5
                                                                          6 ]


  (let x = 35

   match PACKAGE.Darklang.Stdlib.Result.Result.Ok 6 with
   | Ok x -> (Builtin.List.map_v0 [ 1; 2; 3; 4 ] (fun x -> x + 2))) = [ 3; 4; 5; 6 ]


  (Builtin.List.map_v0 [ 1; 2; 3; 4 ] (fun x ->
    (let x = 35 in

     match PACKAGE.Darklang.Stdlib.Result.Result.Ok 6 with
     | Ok x -> x + 2))) = [ 8; 8; 8; 8 ]


  (Builtin.List.map_v0 [ 1; 2; 3; 4 ] (fun x ->
    match PACKAGE.Darklang.Stdlib.Result.Result.Ok 6 with
    | Ok x -> let x = 9 in x + 2)) = [ 11; 11; 11; 11 ]

  (Builtin.List.map_v0 [ 1; 2; 3; 4 ] (fun x ->
    (match
      PACKAGE.Darklang.Stdlib.Result.Result.Ok(
        PACKAGE.Darklang.Stdlib.Result.Result.Ok 6
      )
     with
     | Ok(Ok x) -> let x = 9 in x + 2))) = [ 11; 11; 11; 11 ]