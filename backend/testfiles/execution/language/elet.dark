module General =
  (let x = Builtin.testRuntimeError "a"
   5L) == Builtin.testDerrorMessage "a"

  (let x = Builtin.testRuntimeError "a"
   Builtin.testRuntimeError "b") == Builtin.testDerrorMessage "a"

module Variables =
  (let x = 5L
   x) == 5L

module Unit =
  (let () = Stdlib.Tuple2.first ((), 5L)
   5L) == 5L

module Tuples =
  (let (a, b) = (1L, 2L)
   2L) == 2L

  (let (a, b) = (1L, 2L)
   b) == 2L

  (let (a, b) = (1L, 2L)
   (b, a)) == (2L, 1L)

  (let (d, d) = (2L, 1L)
   d) == 1L

  (let (_, _) = (1L, 2L)
   2L) == 2L

  (let (a, b, c) = (1L, 2L, 3L)
   b) == 2L

  (let (a, b, c) = (1L, 2L, 3L)
   (b, a)) == (2L, 1L)

  (let (d, d, d) = (2L, 1L, 3L)
   d) == 3L

  (let (_, _, _) = (1L, 2L, 3L)
   2L) == 2L

  (let (_, _, _) = (1L, 2L, Builtin.testRuntimeError "test")
   2L) == Builtin.testDerrorMessage "test"

  (let (_, _, _) =
    (Builtin.testRuntimeError "test1", 2L, Builtin.testRuntimeError "test2")

   2L) == Builtin.testDerrorMessage "test1"

  // With multiple levels of nested destructuring
  (let ((a, ((b, (c, d)), e)), f) = ((1L, ((2L, (3L, 4L)), 5L)), 6L)
   c) == 3L

  (let ((a, ((b, cd), e)), f) = ((1L, ((2L, (3L, 4L)), 5L)), 6L)
   cd) == (3L, 4L)


module Nesting =
  (let x =
    let y = 1L
    let z = 2L
    y + z

   x) == 3L


module Shadowing =
  (let x = 5L
   let x = 6L
   x) == 6L


  (let x = 35L

   match 6L with
   | x -> x) == 6L


  (let x = 35L

   match Stdlib.Result.Result.Ok(6L) with
   | Ok(x) -> x) == 6L


  (let x = 35L
   Stdlib.List.map [ 1L; 2L; 3L; 4L ] (fun x -> x + 2L)) == [ 3L; 4L; 5L; 6L ]


  (let x = 35L

   match Stdlib.Result.Result.Ok(6L) with
   | Ok(x) -> (Stdlib.List.map [ 1L; 2L; 3L; 4L ] (fun x -> x + 2L))) == [ 3L; 4L; 5L; 6L ]


  (Stdlib.List.map [ 1L; 2L; 3L; 4L ] (fun x ->
    (let x = 35L

     match Stdlib.Result.Result.Ok(6L) with
     | Ok(x) -> x + 2L))) == [ 8L; 8L; 8L; 8L ]

(Stdlib.List.map [ 1L; 2L; 3L; 4L ] (fun x ->
  match Stdlib.Result.Result.Ok(6L) with
  | Ok(x) ->
    let x = 9L
    x + 2L)) == [ 11L; 11L; 11L; 11L ]

(Stdlib.List.map [ 1L; 2L; 3L; 4L ] (fun x ->
  match Stdlib.Result.Result.Ok(Stdlib.Result.Result.Ok(6L)) with
  | Ok(Ok(x)) ->
    let x = 9L
    x + 2L)) == [ 11L; 11L; 11L; 11L ]