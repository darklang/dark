module General =
  // function
  let userFn () : Int64 = 6L
  (() |> userFn) == 6L
  ([] |> Stdlib.List.push 2L) == [ 2L ]

  // nested function
  ([] |> Stdlib.List.push (Stdlib.Int64.add 1L (Stdlib.Int64.add 1L 3L)))
  == [ 5L ]

  ([] |> Stdlib.List.push (Stdlib.Int64.add 1L (1L + 3L))) == [ 5L ]

  ([] |> Stdlib.List.push (Builtin.testRuntimeError "err"))
  == Builtin.testDerrorMessage "err"

  // general
  (4L |> (-) 3L) == 1L

  ([ 5L ]
   |> Stdlib.List.head
   |> Builtin.unwrap
   |> Stdlib.Int64.add 1L
   |> (+) 3L
   |> (fun x -> if (x + 4L) > 1L then x else (1L + x)))
  == 9L

  // lambda in variable
  (let x = fun a -> a + 1L
   (5L |> x |> x |> (+) 3L))
  == 10L

  (let x = fun a b -> a + 1L
   (7L |> x))
  == Builtin.testDerrorMessage "Expected 2 arguments, got 1"

  // only lambda might be placed into the variable used in the middle of the pipe
  (let x = 1L
   (5L |> x |> x |> (+) 3L))
  == Builtin.testDerrorMessage "Expected a function value, got something else: 1"

  // dict // how is this a dict
  type Z = { a: List<Int64> }
  type Y = { z: Z }
  type X = { y: Y }

  (let x = X { y = Y { z = Z { a = [ 1L; 2L; 3L; 4L; 5L ] } } }
   (x.y.z.a |> Stdlib.List.length))
  == 5L

  // CLEANUP: don't require a | when an enum has one case
  type MyEnum = | A of Int64 * Int64 * Int64
  (33L |> MyEnum.A(21L, 42L)) == MyEnum.A(33L, 21L, 42L)

  (3L |> Stdlib.Result.Result.Ok()) == Stdlib.Result.Result.Ok(3L)

  (4L |> (+) 3L |> Stdlib.Option.Option.Some()) == Stdlib.Option.Option.Some(7L)

  (Stdlib.Option.Option.None() |> Stdlib.Option.Option.Some())
  == Stdlib.Option.Option.Some(Stdlib.Option.Option.None())


  (let x = Stdlib.Option.Option.Some(3L)

   x |> Stdlib.Option.map (fun a -> a) |> Stdlib.Option.map (fun a -> a + 1L))
  == Stdlib.Option.Option.Some(4L)

  (let x = fun x -> Stdlib.Option.map x (fun a -> a)

   (Stdlib.Option.Option.Some(3L)) |> x |> Stdlib.Option.map (fun a -> a + 1L))
  == Stdlib.Option.Option.Some(4L)

  ((Stdlib.Option.Option.Some(3L))
   |> Stdlib.Option.withDefault Stdlib.Option.Option.None()
   |> (+) 3L)
  == 6L

  ((Stdlib.Result.Result.Ok(3L)) |> Stdlib.Result.withDefault 0L |> (+) 3L) == 6L

  ((Stdlib.Result.Result.Error("err")) |> Stdlib.Result.withDefault 0L |> (+) 3L)
  == 3L

  (let x = fun a -> Stdlib.Result.withDefault a 1L
   (Stdlib.Result.Result.Error("err")) |> x |> (+) 3L)
  == 4L

  (let x =
    fun x ->
      Stdlib.Option.andThen (Stdlib.Option.Option.Some(x)) (fun x ->
        Stdlib.Option.Option.Some(1L + x))

   3L |> x)
  == Stdlib.Option.Option.Some(4L)

  (let x =
    fun x -> Stdlib.Option.andThen x (fun x -> Stdlib.Option.Option.Some(1L + x))

   3L |> Stdlib.Option.Option.Some() |> x)
  == Stdlib.Option.Option.Some(4L)

  (3L |> Stdlib.Option.Option.Some() |> Stdlib.Result.fromOption "test")
  == Stdlib.Result.Result.Ok(3L)

  (Stdlib.Option.Option.None() |> Stdlib.Result.fromOption "test")
  == Stdlib.Result.Result.Error("test")


module FnName =
  (let fn = (fun x -> x + 1L)
   6L |> fn)
  == 7L

  (let fn = Stdlib.Int64.add
  3L |> fn 4L)
  == 7L

  (let fn = Stdlib.Int64.subtract
  11L |> fn 4L)
  == 7L

  (let fn = Stdlib.Int64.max
  3L |> fn 7L)
  == 7L