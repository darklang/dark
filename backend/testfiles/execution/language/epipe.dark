// function
let userFn () : Int = 6
(() |> userFn) = 6
([] |> PACKAGE.Darklang.Stdlib.List.push_v0 2) = [ 2 ]

// nested function
([]
 |> PACKAGE.Darklang.Stdlib.List.push_v0 (
   Builtin.Int.add_v0 1 (Builtin.Int.add_v0 1 3)
 )) = [ 5 ]

([] |> PACKAGE.Darklang.Stdlib.List.push_v0 (Builtin.Int.add_v0 1 ((+) 1 3))) = [ 5 ]

([] |> PACKAGE.Darklang.Stdlib.List.push_v0 (Builtin.Test.runtimeError "err")) = Builtin.Test.derrorMessage
  "err"

// general
(4 |> (-) 3) = 1

([ 5 ]
 |> PACKAGE.Darklang.Stdlib.List.head
 |> Builtin.unwrap
 |> Builtin.Int.add_v0 1
 |> (+) 3
 |> (fun x -> if (x + 4) > 1 then x else (1 + x))) = 9

// lambda in variable
(let x = fun a -> a + 1 in (5 |> x |> x |> (+) 3)) = 10

(let x = fun a b -> a + 1 in (7 |> x)) = Builtin.Test.derrorMessage
  "Expected 2 arguments, got 1"

// only lambda might be placed into the variable used in the middle of the pipe
(let x = 1 in (5 |> x |> x |> (+) 3)) = Builtin.Test.derrorMessage
  "Expected a function value, got something else: 1"

// dict
type Z = { a: List<Int> }
type Y = { z: Z }
type X = { y: Y }

(let x = X { y = Y { z = Z { a = [ 1; 2; 3; 4; 5 ] } } } in
 (x.y.z.a |> PACKAGE.Darklang.Stdlib.List.length_v0)) = 5

type MyEnum = A of Int * Int * Int
(33 |> MyEnum.A 21 42) = MyEnum.A 33 21 42

(3 |> PACKAGE.Darklang.Stdlib.Result.Result.Ok) = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  3

(4 |> (+) 3 |> PACKAGE.Darklang.Stdlib.Option.Option.Some) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  7

(PACKAGE.Darklang.Stdlib.Option.Option.None
 |> PACKAGE.Darklang.Stdlib.Option.Option.Some) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  PACKAGE.Darklang.Stdlib.Option.Option.None


(let x = PACKAGE.Darklang.Stdlib.Option.Option.Some 3

 x
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a)
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a + 1)) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4

(let x = fun x -> PACKAGE.Darklang.Stdlib.Option.map x (fun a -> a) in

 (PACKAGE.Darklang.Stdlib.Option.Option.Some 3)
 |> x
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a + 1)) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4

((PACKAGE.Darklang.Stdlib.Option.Option.Some 3)
 |> PACKAGE.Darklang.Stdlib.Option.withDefault_v0
   PACKAGE.Darklang.Stdlib.Option.Option.None
 |> (+) 3) = 6

((PACKAGE.Darklang.Stdlib.Result.Result.Ok 3)
 |> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 0
 |> (+) 3) = 6

((PACKAGE.Darklang.Stdlib.Result.Result.Error "err")
 |> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 0
 |> (+) 3) = 3

(let x = fun a -> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 a 1 in
 (PACKAGE.Darklang.Stdlib.Result.Result.Error "err") |> x |> (+) 3) = 4

(let x =
  fun x ->
    PACKAGE.Darklang.Stdlib.Option.andThen_v0
      (PACKAGE.Darklang.Stdlib.Option.Option.Some x)
      (fun x -> PACKAGE.Darklang.Stdlib.Option.Option.Some(1 + x)) in

 3 |> x) = PACKAGE.Darklang.Stdlib.Option.Option.Some 4

(let x =
  fun x ->
    PACKAGE.Darklang.Stdlib.Option.andThen_v0 x (fun x ->
      PACKAGE.Darklang.Stdlib.Option.Option.Some(1 + x)) in

 3 |> PACKAGE.Darklang.Stdlib.Option.Option.Some |> x) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4

(3
 |> PACKAGE.Darklang.Stdlib.Option.Option.Some
 |> PACKAGE.Darklang.Stdlib.Result.fromOption "test") = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  3

(PACKAGE.Darklang.Stdlib.Option.Option.None
 |> PACKAGE.Darklang.Stdlib.Result.fromOption "test") = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"


module FnName =
  (let fn = (fun x -> x + 1)
   6 |> fn) = 7

  (let fn = Builtin.Int.add
   3 |> fn 4) = 7

  (let fn = Builtin.Int.subtract
   11 |> fn 4) = 7

  (let fn = PACKAGE.Darklang.Stdlib.Int.max
   3 |> fn 7) = 7