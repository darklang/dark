PACKAGE.Darklang.Stdlib.Option.Option.None = PACKAGE.Darklang.Stdlib.Option.Option.None

((PACKAGE.Darklang.Stdlib.List.head [])
 == PACKAGE.Darklang.Stdlib.Option.Option.None) = true

(PACKAGE.Darklang.Stdlib.List.head []) = PACKAGE.Darklang.Stdlib.Option.Option.None

PACKAGE.Darklang.Stdlib.Result.Result.Ok(Builtin.Test.runtimeError "err") = Builtin.Test.derrorMessage
  "err"

PACKAGE.Darklang.Stdlib.Option.Option.Some(Builtin.Test.runtimeError "err") = Builtin.Test.derrorMessage
  "err"

PACKAGE.Darklang.Stdlib.Result.Result.Error(Builtin.Test.runtimeError "err") = Builtin.Test.derrorMessage
  "err"

module Errors =
  module Builtins =
    PACKAGE.Darklang.Stdlib.Option.Option.None 5 = Builtin.Test.derrorMessage
      "Case `None` expected 0 fields but got 1"

    PACKAGE.Darklang.Stdlib.Option.Option.Some(5, 6) = Builtin.Test.derrorMessage
      "Case `Some` expected 1 fields but got 2"

  module User =
    type MyEnum =
      | A
      | B
      | C of String

    MyEnum.D = Builtin.Test.derrorMessage
      "There is no case named `D` in Errors.User.MyEnum"

    MyEnum.C = Builtin.Test.derrorMessage "Case `C` expected 1 fields but got 0"
    MyEnum.B 5 = Builtin.Test.derrorMessage "Case `B` expected 0 fields but got 1"

    (match MyEnum.C "test" with
     | C v -> v) = "test"
    // TYPESCLEANUP
    // (match MyEnum.C "test" with | C -> v) = Builtin.Test.runtimeError "TODO"
    // (match MyEnum.C "test" with | D -> "PACKAGE.Darklang.Stdlib.Result.Result.Ok" | C _ -> v) = Builtin.Test.runtimeError "TODO"
    // (match MyEnum.C "test" with | 5 -> "PACKAGE.Darklang.Stdlib.Result.Result.Ok" | C _ -> v) = Builtin.Test.runtimeError "TODO"
    (MyEnum.C 5) = Builtin.Test.derrorMessage
      "Errors.User.MyEnum.C's 1st argument should be a String. However, an Int (5) was passed instead.

Expected: Errors.User.MyEnum.C (String)
Actual: Errors.User.MyEnum.C (Int)"


module Simple =
  type AorB =
    | A
    | B

  (let a = AorB.A
   let b = AorB.B
   a == b) = false

  (let a1 = AorB.A
   let a2 = AorB.A
   a1 == a2) = true

  (AorB.A == AorB.A) = true
  (AorB.A == AorB.B) = false

  PACKAGE.Darklang.Stdlib.List.unique_v0 [ AorB.A; AorB.B; AorB.A; AorB.A; AorB.B ] = [ AorB.A
                                                                                        AorB.B ]

  module EnumReference =
    type CorD =
      | C of Int
      | D of AorB

    (CorD.C 5 != CorD.D(AorB.B)) = true
    (CorD.D(AorB.A) == CorD.D(AorB.A)) = true

module MixedCases =
  type EnumOfMixedCases =
    | W
    | X of String
    | Y of i: Int
    | Z of c: String * i: Int

  (EnumOfMixedCases.W == (EnumOfMixedCases.Y 1)) = false
  (EnumOfMixedCases.Y 1 == EnumOfMixedCases.Y 1) = true

  EnumOfMixedCases.X 1 = Builtin.Test.derrorMessage
    "MixedCases.EnumOfMixedCases.X's 1st argument should be a String. However, an Int (1) was passed instead.\n\nExpected: MixedCases.EnumOfMixedCases.X (String)\nActual: MixedCases.EnumOfMixedCases.X (Int)"

  EnumOfMixedCases.Y "test" = Builtin.Test.derrorMessage
    "MixedCases.EnumOfMixedCases.Y's 1st argument should be an Int. However, a String (\"test\") was passed instead.\n\nExpected: MixedCases.EnumOfMixedCases.Y (Int)\nActual: MixedCases.EnumOfMixedCases.Y (String)"

  EnumOfMixedCases.Z 1 = Builtin.Test.derrorMessage
    "Case `Z` expected 2 fields but got 1"
  // Test ordering of evaluation
  EnumOfMixedCases.Z(Builtin.Test.runtimeError "1", Builtin.Test.runtimeError "2") = Builtin.Test.derrorMessage
    "1"

  (let values =
    [ EnumOfMixedCases.W
      EnumOfMixedCases.X "testX"
      EnumOfMixedCases.Y(5)
      EnumOfMixedCases.Z("testZ", 2) ]

   match PACKAGE.Darklang.Stdlib.List.getAt values 3 with
   | Some z -> PACKAGE.Darklang.Stdlib.Result.Result.Ok z
   | None -> PACKAGE.Darklang.Stdlib.Result.Result.Error "Failure") = PACKAGE
    .Darklang
    .Stdlib
    .Result
    .Result
    .Ok(EnumOfMixedCases.Z("testZ", 2))

  ([ EnumOfMixedCases.W
     EnumOfMixedCases.X "testX"
     EnumOfMixedCases.Y(5)
     EnumOfMixedCases.Z("testZ", 2) ]
   |> PACKAGE.Darklang.Stdlib.List.map_v0 (fun v ->
     match v with
     | X s -> "X " ++ s
     | Z(s, _i) -> "Z " ++ s
     | Y y -> "Y " ++ (PACKAGE.Darklang.Stdlib.Int.toString_v0 y)
     | W -> "a simple W")) = [ "a simple W"; "X testX"; "Y 5"; "Z testZ" ]

module TuplesVsNonTuples =
  type Tuples =
    | NotTuple of String * Int
    | Tuple of (String * Int)

  (match Tuples.NotTuple("printer broke", 7) with
   | NotTuple(reason, 7) -> reason) = "printer broke"

  (Tuples.NotTuple(("printer broke", 7))) = Builtin.Test.derrorMessage
    "Case `NotTuple` expected 2 fields but got 1"

  (match Tuples.Tuple(("printer broke", 7)) with
   | Tuple((reason, 7)) -> reason) = "printer broke"

  Tuples.Tuple("printer broke", 7) = Builtin.Test.derrorMessage
    "Case `Tuple` expected 1 fields but got 2"


module Recursive =
  type Tree =
    | Leaf
    | Node of Tree * Tree

  Tree.Node(Tree.Leaf, Tree.Leaf) = Tree.Node(Tree.Leaf, Tree.Leaf)

  (Tree.Node(Tree.Leaf, Tree.Leaf)
   == Tree.Node(Tree.Leaf, Tree.Node(Tree.Leaf, Tree.Leaf))) = false

module Polymorphism =
  // Define a red-black tree
  type Color =
    | Red
    | Black

  type RBTree<'a> =
    | Empty
    | Node of color: Color * left: RBTree<'a> * value: 'a * right: RBTree<'a>

  let singleton (value: 'a) : RBTree<'a> =
    RBTree.Node(Color.Red, RBTree.Empty, value, RBTree.Empty)

  let insert' (tree: RBTree<'a>) (value: 'a) (cmp: ('a * 'a) -> Int) : RBTree<'a> =
    match tree with
    | Empty -> singleton value
    | Node(color, left, v, right) ->
      // CLEANUP we should allow cmp to call two arguments, and not use a weird
      // tuple-pipe thing
      let c = (value, v) |> cmp

      if c < 0 then
        RBTree.Node(color, insert' left value cmp, v, right)
      elif c > 0 then
        RBTree.Node(color, left, v, insert' right value cmp)
      else
        RBTree.Node(color, left, value, right)

  let insert (tree: RBTree<'a>) (value: 'a) (cmp: ('a * 'a) -> Int) : RBTree<'a> =
    insert' tree value cmp

  let ofList (values: List<'a>) (cmp: ('a * 'a) -> Int) : RBTree<'a> =
    PACKAGE.Darklang.Stdlib.List.fold_v0 values RBTree.Empty (fun tree value ->
      insert tree value cmp)

  let toList' (tree: RBTree<'a>) (acc: List<'a>) : List<'a> =
    match tree with
    | Empty -> acc
    | Node(_, left, value, right) ->
      toList' left (PACKAGE.Darklang.Stdlib.List.push (toList' right acc) value)

  let toList (tree: RBTree<'a>) : List<'a> = toList' tree []

  // CLEANUP: we should support tuple destructuring in lambdas
  // i.e. update to `fun (x, y) -> ...`
  (let intCmp =
    fun pair ->
      let (x, y) = pair

      if x < y then -1
      elif x > y then 1
      else 0

   ([ 1; -2; 5; 3 ] |> ofList intCmp |> toList)
   == ([ 3; 5; -2; 1 ] |> ofList intCmp |> toList)) = true