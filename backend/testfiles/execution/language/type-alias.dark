// simple alias
type Id = String

module SimpleAlias =
  type Something = { id: Id; data: String }
  Something { id = "2"; data = "test" } == Something { id= "2"; data = "test" }

  // TODO: would be better if this indicated that it was an Id originally
  Something { id = 2L; data = "test" }
  == Builtin.testDerrorMessage
    "SimpleAlias.Something's `id` field should be a String. However, an Int64 (2) was passed instead.\n\nExpected: ({ id: Id; ... })\nActual: an Int64: 2"


module SimpleRecordAlias =
  type Person = { name: String }
  type MyPerson = Person
  type MyPerson2 = Person

  (MyPerson { name = "test" } == Person { name = "test" }) == true
  (MyPerson { name = "test" } == MyPerson2 { name = "test" }) == true

  let getName (p: MyPerson) : String = p.name
  getName (MyPerson { name = "test" }) == "test"

module SimpleEnumAlias =
  type UserRole =
    | Admin
    | User
    | Guest

  type AdminRole = UserRole
  type GuestRole = UserRole

  (GuestRole.Guest() == AdminRole.Guest()) == true

module NestedAlias =
  type UserCredential = (String * Id)
  type EmployeeCredential = UserCredential

  let getUserID (credential: UserCredential) : Id =
    credential |> Stdlib.Tuple2.second

  (getUserID (("Alice", "EMP123"))) == "EMP123"

  getUserID (("Alice", 123L))
  == Builtin.testDerrorMessage
    "NestedAlias.getUserID's return value should be a String. However, an Int64 (123) was returned instead.\n\nExpected: Id\nActual: an Int64: 123"

  type UserProfile =
    { credential: UserCredential
      name: String }

  type EmployeeProfile = UserProfile
  let getEmployeeName (profile: EmployeeProfile) : String = profile.name

  getEmployeeName (
    UserProfile
      { credential = ("Alice", "EMP123")
        name = "Alice" }
  )
  == "Alice"

module ListAlias =
  type IntegerList = List<Int64>

  let isEmpty (il: IntegerList) : Bool = Stdlib.List.isEmpty il

  isEmpty ([]) == true
  isEmpty ([ 1L; 2L; 3L ]) == false

module ResultAlias =
  // result alias
  type IntResult = Stdlib.Result.Result<Int64, String>

  let getIntResultValue (ir: IntResult) : Int64 = Stdlib.Result.withDefault ir 0L

  getIntResultValue (Stdlib.Result.Result.Ok(5L)) == 5L
  getIntResultValue (Stdlib.Result.Result.Error("error")) == 0L

module RecordWithTypeArgs =
  type Inner<'a, 'b> = { a: 'a; b: 'b }

  type Outer1<'a> = Inner<'a, Int64>
  type Outer2<'b> = Inner<String, 'b>

  let getInnerField (x: Inner<'a, 'b>) : 'b = x.b
  getInnerField (Inner { a = "test"; b = 5L }) == 5L
  getInnerField (Outer1 { a = "test"; b = 5L }) == 5L
  getInnerField (Outer2 { a = "test"; b = 5L }) == 5L
  Outer1 { a = "test"; b = 5L } == Inner { a = "test"; b = 5L }
  Outer1 { a = "test"; b = 5L } == Outer2 { a = "test"; b = 5L }

  Outer2 { a = 5L; b = 6L }
  == Builtin.testDerrorMessage
    "RecordWithTypeArgs.Outer2's `a` field should be a String. However, an Int64 (5) was passed instead.\n\nExpected: ({ a: String; ... })\nActual: an Int64: 5"

  Outer1 { a = "a"; b = "b" }
  == Builtin.testDerrorMessage
    "RecordWithTypeArgs.Outer1's `b` field should be an Int64. However, a String (\"b\") was passed instead.\n\nExpected: ({ b: Int64; ... })\nActual: a String: \"b\""

  Outer2 { a = 5L; b = 6L }
  == Builtin.testDerrorMessage
    "RecordWithTypeArgs.Outer2's `a` field should be a String. However, an Int64 (5) was passed instead.\n\nExpected: ({ a: String; ... })\nActual: an Int64: 5"

module RecordWithTypeArgsDifferentName =
  type Inner<'a, 'b> = { a: 'a; b: 'b }
  type LessInner<'b, 'a> = Inner<'a, 'b>
  type Outer<'x> = LessInner<'x, Int64>
  type Outest<'y> = Outer<'y>
  type MostOutest = Outest<String> // { a: Int64; b: String }

  MostOutest { a = 5L; b = "string" } == Inner { a = 5L; b = "string" }

  MostOutest { a = "not allowed"; b = "string" }
  == Builtin.testDerrorMessage
    "RecordWithTypeArgsDifferentName.MostOutest's `a` field should be an Int64. However, a String (\"not allow...) was passed instead.\n\nExpected: ({ a: Int64; ... })\nActual: a String: \"not allowed\""

  MostOutest { a = 5L; b = 6L }
  == Builtin.testDerrorMessage
    "RecordWithTypeArgsDifferentName.MostOutest's `b` field should be a String. However, an Int64 (6) was passed instead.\n\nExpected: ({ b: String; ... })\nActual: an Int64: 6"


module RecordWithRecursiveTypeArgs =
  type Inner<'a> =
    { a: 'a
      b: Stdlib.Result.Result<Alias<'a>, String> }

  type Alias<'x> = Inner<'x>

  Inner
    { a = 5L
      b =
        Stdlib.Result.Result.Ok(
          Inner
            { a = 6L
              b =
                Stdlib.Result.Result.Ok(
                  Inner
                    { a = 7L
                      b = Stdlib.Result.Result.Error("test") }
                ) }
        ) }
  == Alias
    { a = 5L
      b =
        Stdlib.Result.Result.Ok(
          Alias
            { a = 6L
              b =
                Stdlib.Result.Result.Ok(
                  Alias
                    { a = 7L
                      b = Stdlib.Result.Result.Error("test") }
                ) }
        ) }


module EnumWithTypeArgs =
  type Inner<'a, 'b> =
    | A of 'a
    | B of 'b

  type Outer1<'a> = Inner<'a, Int64>
  type Outer2<'b> = Inner<String, 'b>

  let getInnerField (x: Inner<'a, 'b>) (default': 'b) : 'b =
    match x with
    | A(_) -> default'
    | B(b) -> b

  getInnerField (Inner.A(5L)) 6L == 6L
  getInnerField (Inner.B(5L)) 6L == 5L
  getInnerField (Outer1.A(5L)) 6L == 6L
  getInnerField (Outer1.B(5L)) 6L == 5L
  getInnerField (Outer2.A("str")) "str2" == "str2"
  getInnerField (Outer2.B("str")) "str2" == "str"

  Outer1.A(5L) == Inner.A(5L)
  Outer1.B(5L) == Inner.B(5L)

  (Outer2.A("str")) == Outer1.A("str")
  (Outer2.B(5L)) == Outer1.B(5L)

  Outer1.B("b")
  == Builtin.testDerrorMessage
    "EnumWithTypeArgs.Outer1.B's 1st argument should be an Int64. However, a String (\"b\") was passed instead.\n\nExpected: EnumWithTypeArgs.Outer1.B (Int64)\nActual: EnumWithTypeArgs.Outer1.B (String)"

  Outer2.A(5L)
  == Builtin.testDerrorMessage
    "EnumWithTypeArgs.Outer2.A's 1st argument should be a String. However, an Int64 (5) was passed instead.\n\nExpected: EnumWithTypeArgs.Outer2.A (String)\nActual: EnumWithTypeArgs.Outer2.A (Int64)"

module EnumWithTypeArgsDifferentName =
  type Inner<'a, 'b> =
    | A of 'a
    | B of 'b

  type LessInner<'b, 'a> = Inner<'a, 'b>
  type Outer<'x> = LessInner<'x, Int64>
  type Outest<'y> = Outer<'y>
  type MostOutest = Outest<String> // | A of Int64 | B of String

  MostOutest.A(5L) == Inner.A(5L)
  MostOutest.B("test") == Inner.B("test")

  MostOutest.A("not allowed")
  == Builtin.testDerrorMessage
    "EnumWithTypeArgsDifferentName.MostOutest.A's 1st argument should be an Int64. However, a String (\"not allow...) was passed instead.\n\nExpected: EnumWithTypeArgsDifferentName.MostOutest.A (Int64)\nActual: EnumWithTypeArgsDifferentName.MostOutest.A (String)"

  MostOutest.B(6L)
  == Builtin.testDerrorMessage
    "EnumWithTypeArgsDifferentName.MostOutest.B's 1st argument should be a String. However, an Int64 (6) was passed instead.\n\nExpected: EnumWithTypeArgsDifferentName.MostOutest.B (String)\nActual: EnumWithTypeArgsDifferentName.MostOutest.B (Int64)"


module EnumWithRecursiveTypeArgs =
  type Inner<'a> =
    | A of a: 'a
    | B of b: Stdlib.Result.Result<Alias<'a>, String>

  type Alias<'x> = Inner<'x>

  Alias.B(Stdlib.Result.Result.Ok(Alias.A(5L)))
  == Inner.B(Stdlib.Result.Result.Ok(Inner.A(5L)))