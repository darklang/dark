// simple alias
type Id = String

type Something = { ID: Id; Data: String }
Something { ID = "2"; Data = "test" } = Something { ID = "2"; Data = "test" }

// TODO: would be better if this indicated that it was an Id originally
Something { ID = 2; Data = "test" } = Builtin.Test.derrorMessage
  "Something's `ID` field should be a String. However, an Int (2) was passed instead.\n\nExpected: ({ ID: Id; ... })\nActual: an Int: 2"


module SimpleRecordAlias =
  type Person = { name: String }
  type MyPerson = Person
  type MyPerson2 = Person

  (MyPerson { name = "test" } == Person { name = "test" }) = true
  (MyPerson { name = "test" } == MyPerson2 { name = "test" }) = true

  let getName (p: MyPerson) : String = p.name
  getName (MyPerson { name = "test" }) = "test"

module SimpleEnumAlias =
  type UserRole =
    | Admin
    | User
    | Guest

  type AdminRole = UserRole
  type GuestRole = UserRole

  (GuestRole.Guest == AdminRole.Guest) = true

module NestedAlias =
  type UserCredential = (String * Id)
  type EmployeeCredential = UserCredential

  let getUserID (credential: UserCredential) : Id =
    credential |> PACKAGE.Darklang.Stdlib.Tuple2.second

  getUserID (("Alice", "EMP123")) = "EMP123"

  getUserID (("Alice", 123)) = Builtin.Test.derrorMessage
    "NestedAlias.getUserID's return value should be a String. However, an Int (123) was returned instead.\n\nExpected: Id\nActual: an Int: 123"

  type UserProfile =
    { credential: UserCredential
      name: String }

  type EmployeeProfile = UserProfile
  let getEmployeeName (profile: EmployeeProfile) : String = profile.name

  getEmployeeName (
    UserProfile
      { credential = ("Alice", "EMP123")
        name = "Alice" }
  ) = "Alice"

module ListAlias =
  type IntegerList = List<Int>

  let isEmpty (il: IntegerList) : Bool =
    PACKAGE.Darklang.Stdlib.List.isEmpty_v0 il

  isEmpty ([]) = true
  isEmpty ([ 1; 2; 3 ]) = false

module ResultAlias =
  // result alias
  type IntResult = PACKAGE.Darklang.Stdlib.Result.Result<Int, String>

  let getIntResultValue (ir: IntResult) : Int =
    PACKAGE.Darklang.Stdlib.Result.withDefault_v0 ir 0

  getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Ok 5) = 5
  getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Error "error") = 0

module RecordWithTypeArgs =
  type Inner<'a, 'b> = { a: 'a; b: 'b }

  type Outer1<'a> = Inner<'a, Int>
  type Outer2<'b> = Inner<String, 'b>

  let getInnerField (x: Inner<'a, 'b>) : 'b = x.b
  getInnerField (Inner { a = "test"; b = 5 }) = 5
  getInnerField (Outer1 { a = "test"; b = 5 }) = 5
  getInnerField (Outer2 { a = "test"; b = 5 }) = 5
  Outer1 { a = "test"; b = 5 } = Inner { a = "test"; b = 5 }
  Outer1 { a = "test"; b = 5 } = Outer2 { a = "test"; b = 5 }

  Outer2 { a = 5; b = 6 } = Builtin.Test.derrorMessage
    "RecordWithTypeArgs.Outer2's `a` field should be a String. However, an Int (5) was passed instead.\n\nExpected: ({ a: String; ... })\nActual: an Int: 5"

  Outer1 { a = "a"; b = "b" } = Builtin.Test.derrorMessage
    "RecordWithTypeArgs.Outer1's `b` field should be an Int. However, a String (\"b\") was passed instead.\n\nExpected: ({ b: Int; ... })\nActual: a String: \"b\""

  Outer2 { a = 5; b = 6 } = Builtin.Test.derrorMessage
    "RecordWithTypeArgs.Outer2's `a` field should be a String. However, an Int (5) was passed instead.\n\nExpected: ({ a: String; ... })\nActual: an Int: 5"

module RecordWithTypeArgsDifferentName =
  type Inner<'a, 'b> = { a: 'a; b: 'b }
  type LessInner<'b, 'a> = Inner<'a, 'b>
  type Outer<'x> = LessInner<'x, Int>
  type Outest<'y> = Outer<'y>
  type MostOutest = Outest<String> // { a: Int; b: String }

  MostOutest { a = 5; b = "string" } = Inner { a = 5; b = "string" }

  MostOutest { a = "not allowed"; b = "string" } = Builtin.Test.derrorMessage
    "RecordWithTypeArgsDifferentName.MostOutest's `a` field should be an Int. However, a String (\"not allow...) was passed instead.\n\nExpected: ({ a: Int; ... })\nActual: a String: \"not allowed\""

  MostOutest { a = 5; b = 6 } = Builtin.Test.derrorMessage
    "RecordWithTypeArgsDifferentName.MostOutest's `b` field should be a String. However, an Int (6) was passed instead.\n\nExpected: ({ b: String; ... })\nActual: an Int: 6"


module RecordWithRecursiveTypeArgs =
  type Inner<'a> =
    { a: 'a
      b: PACKAGE.Darklang.Stdlib.Result.Result<Alias<'a>, String> }

  type Alias<'x> = Inner<'x>

  Inner
    { a = 5
      b =
        PACKAGE.Darklang.Stdlib.Result.Result.Ok(
          Inner
            { a = 6
              b =
                PACKAGE.Darklang.Stdlib.Result.Result.Ok(
                  Inner
                    { a = 7
                      b = PACKAGE.Darklang.Stdlib.Result.Result.Error "test" }
                ) }
        ) } = Alias
    { a = 5
      b =
        PACKAGE.Darklang.Stdlib.Result.Result.Ok(
          Alias
            { a = 6
              b =
                PACKAGE.Darklang.Stdlib.Result.Result.Ok(
                  Alias
                    { a = 7
                      b = PACKAGE.Darklang.Stdlib.Result.Result.Error "test" }
                ) }
        ) }


module EnumWithTypeArgs =
  type Inner<'a, 'b> =
    | A of 'a
    | B of 'b

  type Outer1<'a> = Inner<'a, Int>
  type Outer2<'b> = Inner<String, 'b>

  let getInnerField (x: Inner<'a, 'b>) (default': 'b) : 'b =
    match x with
    | A _ -> default'
    | B b -> b

  getInnerField (Inner.A 5) 6 = 6
  getInnerField (Inner.B 5) 6 = 5
  getInnerField (Outer1.A 5) 6 = 6
  getInnerField (Outer1.B 5) 6 = 5
  getInnerField (Outer2.A "str") "str2" = "str2"
  getInnerField (Outer2.B "str") "str2" = "str"

  Outer1.A 5 = Inner.A 5
  Outer1.B 5 = Inner.B 5

  Outer2.A "str" = Outer1.A "str"
  Outer2.B 5 = Outer1.B 5

  Outer1.B "b" = Builtin.Test.derrorMessage
    "EnumWithTypeArgs.Outer1.B's 1st argument should be an Int. However, a String (\"b\") was passed instead.\n\nExpected: EnumWithTypeArgs.Outer1.B (Int)\nActual: EnumWithTypeArgs.Outer1.B (String)"

  Outer2.A 5 = Builtin.Test.derrorMessage
    "EnumWithTypeArgs.Outer2.A's 1st argument should be a String. However, an Int (5) was passed instead.\n\nExpected: EnumWithTypeArgs.Outer2.A (String)\nActual: EnumWithTypeArgs.Outer2.A (Int)"

module EnumWithTypeArgsDifferentName =
  type Inner<'a, 'b> =
    | A of 'a
    | B of 'b

  type LessInner<'b, 'a> = Inner<'a, 'b>
  type Outer<'x> = LessInner<'x, Int>
  type Outest<'y> = Outer<'y>
  type MostOutest = Outest<String> // | A of Int | B of String

  MostOutest.A 5 = Inner.A 5
  MostOutest.B "test" = Inner.B "test"

  MostOutest.A "not allowed" = Builtin.Test.derrorMessage
    "EnumWithTypeArgsDifferentName.MostOutest.A's 1st argument should be an Int. However, a String (\"not allow...) was passed instead.\n\nExpected: EnumWithTypeArgsDifferentName.MostOutest.A (Int)\nActual: EnumWithTypeArgsDifferentName.MostOutest.A (String)"

  MostOutest.B 6 = Builtin.Test.derrorMessage
    "EnumWithTypeArgsDifferentName.MostOutest.B's 1st argument should be a String. However, an Int (6) was passed instead.\n\nExpected: EnumWithTypeArgsDifferentName.MostOutest.B (String)\nActual: EnumWithTypeArgsDifferentName.MostOutest.B (Int)"


module EnumWithRecursiveTypeArgs =
  type Inner<'a> =
    | A of a: 'a
    | B of b: PACKAGE.Darklang.Stdlib.Result.Result<Alias<'a>, String>

  type Alias<'x> = Inner<'x>

  Alias.B(PACKAGE.Darklang.Stdlib.Result.Result.Ok(Alias.A 5)) = Inner.B(
    PACKAGE.Darklang.Stdlib.Result.Result.Ok(Inner.A 5)
  )