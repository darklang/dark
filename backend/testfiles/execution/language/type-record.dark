type Cols1 = { col1: Int }
type Cols2 = { col1: Int; col2: Int }

type AnEnum =
  | A
  | B
  | C

Cols2 { col1 = 1; col2 = 3 } = Cols2 { col1 = 1; col2 = 3 }

Cols2
  { col1 = 2
    col2 = Builtin.Test.runtimeError "test" } = Builtin.Test.derrorMessage "test"

module WithTypeArgs =
  type Owner<'a> = { item: 'a }
  type CoOwner<'a> = Owner<'a>

  Owner { item = 5 } = CoOwner { item = 5 }

  type C<'c> = { v: 'c }
  type B<'b> = { c: C<'b> }
  type A<'a> = { b: B<'a> }

  let getC (a: A<Int>) : Int = a.b.c.v

  getC (A { b = B { c = C { v = 5 } } }) = 5


module InvalidCols =
  Cols1 { col1 = 1; col1 = 2 } = Builtin.Test.derrorMessage
    "Duplicate field `col1` in Cols1"

  Cols2 { col1 = 2; ___ = 3 } = Builtin.Test.derrorMessage
    "Unexpected field `` in Cols2"

  Cols2 { col1 = 2 } = Builtin.Test.derrorMessage "Missing field `col2` in Cols2"

  Cols2 { col1 = 2; other = 3 } = Builtin.Test.derrorMessage
    "Unexpected field `other` in Cols2"

  Cols2 { col1 = 2; col2 = 3; col3 = 4 } = Builtin.Test.derrorMessage
    "Unexpected field `col3` in Cols2"

  Cols1 { col1 = "" } = Builtin.Test.derrorMessage
    "Cols1's `col1` field should be an Int. However, a String (\"\") was passed instead.\n\nExpected: ({ col1: Int; ... })\nActual: a String: \"\""


module InvalidType =
  MyNonExistantType { col1 = 2 } = Builtin.Test.derrorMessage
    "There is no type named MyNonExistantType"

  AnEnum { col1 = 2 } = Builtin.Test.derrorMessage
    "Expected a record but AnEnum is an enum"

module Polymorphism =
  type MyRecord<'a> = { col1: 'a; col2: Int }
  (MyRecord { col1 = (); col2 = 1 }).col2 = 1

  (MyRecord
    { col1 =
        PACKAGE.Darklang.Stdlib.Option.Option.Some(
          PACKAGE.Darklang.Stdlib.Result.Result.Ok 1
        )
      col2 = 1 })
    .col1 = PACKAGE.Darklang.Stdlib.Option.Option.Some(
    PACKAGE.Darklang.Stdlib.Result.Result.Ok 1
  )


module Nested =
  type NestedRecordA = { col1: Int }
  type NestedRecordB = { col1: NestedRecordA }
  (NestedRecordB { col1 = NestedRecordA { col1 = 1 } }).col1.col1 = 1


module Update =
  type RecordForUpdate = { x: Int; y: Int }
  type RecordForUpdateMultipe = { x: Int; y: Int; z: Int }

  ({ RecordForUpdate { x = 4; y = 1 } with
      y = 2 }) = RecordForUpdate { x = 4; y = 2 }

  (let myRec = RecordForUpdate { x = 4; y = 1 } in { myRec with y = 2 }) = RecordForUpdate
    { x = 4; y = 2 }

  (let myRec = RecordForUpdate { x = 4; y = 1 } in { myRec with y = 22; y = 42 }) = RecordForUpdate
    { x = 4; y = 42 }

  (let myRec = RecordForUpdateMultipe { x = 4; y = 1; z = 0 } in
   { myRec with y = 2; z = 42 }) = RecordForUpdateMultipe { x = 4; y = 2; z = 42 }

  (let myRec = RecordForUpdateMultipe { x = 4; y = 1; z = 0 } in
   { myRec with z = 3; x = 42 }) = RecordForUpdateMultipe { x = 42; y = 1; z = 3 }

  (let myRec = RecordForUpdateMultipe { x = 4; y = 1; z = 0 } in
   { myRec with z = 3; x = 42; y = 11 }) = RecordForUpdateMultipe
    { x = 42; y = 11; z = 3 }

  module Invalid =
    (let myRec = RecordForUpdateMultipe { x = 4; y = 1; z = 0 } in

     { myRec with
         z = 3
         x = 42
         y = 11
         p = 10 }) = Builtin.Test.derrorMessage
      "Unexpected field `p` in Update.RecordForUpdateMultipe"

    (let myRec = RecordForUpdate { x = 4; y = 1 } in { myRec with other = 2 }) = Builtin.Test.derrorMessage
      "Unexpected field `other` in Update.RecordForUpdate"

    (let myRec = RecordForUpdate { x = 4; y = 1 } in { myRec with y = "2" }) = Builtin.Test.derrorMessage
      "Update.RecordForUpdate's `y` field should be an Int. However, a String (\"2\") was passed instead.\n\nExpected: ({ y: Int; ... })\nActual: a String: \"2\""