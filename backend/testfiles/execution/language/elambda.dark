PACKAGE.Darklang.Stdlib.List.push_v0 [] (fun x -> -4.611686018e+18) = [ (fun x ->
                                                                          -4.611686018e+18) ]

// Test that empty parameters are removed
(let y = (fun x ___ -> x + 1) in List.map_v0 [ 1; 2; 3; 4 ] y) = [ 2; 3; 4; 5 ]
(let y = (fun x -> x + 1) in List.map_v0 [ 1; 2; 3; 4 ] y) = [ 2; 3; 4; 5 ]

(let y = (fun msg -> Test.runtimeError msg) in List.map_v0 [ "1"; "2"; "3"; "4" ] y) = Test.runtimeError
  "1"

(let y = (fun msg -> Test.runtimeError msg) in List.map_v0 [] y) = []
// (let y = (fun a b -> a + b) in y 2 3) = 5 // TODO: allow
(let y = (fun a b -> a * b) in List.fold_v0 [ 1; 2; 3; 4 ] 1 y) = 24
(List.fold_v0 [ 4 ] 1 (Test.runtimeError "test")) = Test.runtimeError "test"

(let x = 5 in
 let y = (fun c -> x + c) in
 let x = 6 in
 [ 1; 2; 3; 4 ] |> List.map_v0 y) = [ 6; 7; 8; 9 ]

(String.join_v0
  (List.map_v0 (String.toList "some string") (fun var ->
    String.toUppercase (String.fromChar var)))
  "") = "SOME STRING"

(let y = (fun c -> if c > 2 then Test.runtimeError "err" else 18) in
 [ 1; 2; 3; 4 ] |> List.map_v0 y) = Test.runtimeError "err"

(let y = (fun c -> if c > 2 then Test.runtimeError "err" else 18) in
 [ 1; 2 ] |> List.map_v0 y) = [ 18; 18 ]

(let t = true in List.all [ 1; 2 ] (fun _ -> t)) = true
(let f = false in List.all [ 1; 2 ] (fun _ -> f)) = false

(let f = fun myarg1 -> myarg1 + 1
 List.map [ 1; 2; 3 ] f) = [ 2; 3; 4 ]

List.fold_v0 [ "a"; "b" ] "x" (fun accum curr -> accum ++ curr) = "xab"

(let pairs = [ (1, "one"); (2, "two") ] in
 let transformer = fun num str -> $"{Int.toString num}:{str}" in
 List.map_v0 pairs transformer) = [ "1:one"; "2:two" ]

(let triplets = [ (1, "one", true); (2, "two", false) ] in

 let transformer =
   fun num str flag ->
     if flag then
       $"{Int.toString num}:{str}:TRUE"
     else
       $"{Int.toString num}:{str}:FALSE" in

 List.map_v0 triplets transformer) = [ "1:one:TRUE"; "2:two:FALSE" ]

(let triplets = [ (1, "one", true); (2, "two", false) ] in
 let transformer = fun num str -> $"{Int.toString num}:{str}" in
 List.map_v0 triplets transformer) = Test.runtimeError "Expected 2 arguments, got 3"

(let pairs = [ (1, "one"); (2, "two") ] in

 let transformer =
   fun num str flag ->
     if flag then
       $"{Int.toString num}:{str}:TRUE"
     else
       $"{Int.toString num}:{str}:FALSE" in

 List.map_v0 pairs transformer) = Test.runtimeError "Expected 3 arguments, got 2"