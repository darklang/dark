module Error =
  (Stdlib.List.map [ 1L; 2L; 3L; 4L; 5L ] (fun x y -> x)) == Builtin.testDerrorMessage
    "Expected 2 arguments, got 1"

  (Stdlib.Option.map2
    (Stdlib.Option.Option.Some(10L))
    "not an option"
    (fun (a, b) -> "1")) == (Builtin.testDerrorMessage
    "PACKAGE.Darklang.Stdlib.Option.map2's 2nd argument (`option2`) should be a PACKAGE.Darklang.Stdlib.Option.Option<'b>. However, a String (\"not an op...) was passed instead.\n\nExpected: (option2: PACKAGE.Darklang.Stdlib.Option.Option<'b>)\nActual: a String: \"not an option\"")


// Check we get previous errors before later ones
// TODO Parser: this seems to parse correctly but getting `There is no variable named: fakeFunction`
// (Stdlib.List.map [ 1L; 2L; 3L; 4L; 5L ] (fun x -> Builtin.testRuntimeError "X"))
// |> Stdlib.List.fakeFunction
// == Builtin.testDerrorMessage "X"


module ErrorPropagation =
  type EPRec =
    { i: Int64
      m: Int64
      j: Int64
      n: Int64 }

  Stdlib.List.head (Builtin.testRuntimeError "test") == Builtin.testDerrorMessage
    "test"

  (if Builtin.testRuntimeError "test" then 5L else 6L) == Builtin.testDerrorMessage
    "test"

  (Stdlib.List.head (Builtin.testRuntimeError "test")).field == Builtin.testDerrorMessage
    "test"

  [ 5L; 6L; Stdlib.List.head (Builtin.testRuntimeError "test") ] == Builtin.testDerrorMessage
    "test"

  [ 5L; 6L; Builtin.testRuntimeError "test" ] == Builtin.testDerrorMessage "test"

  EPRec
    // CLEANUP Parser: had to add parens around the fn call to make it work
    { i = (Builtin.testRuntimeError "1")
      m = 5L
      j = (Stdlib.List.head (Builtin.testRuntimeError "2"))
      n = 6L } == (Builtin.testDerrorMessage "1")

  5L |> (+) (Builtin.testRuntimeError "test") |> (+) 3564L == Builtin.testDerrorMessage
    "test"

  5L |> (+) (Builtin.testRuntimeError "test") == Builtin.testDerrorMessage "test"

  ("test" |> Builtin.testRuntimeError) == Builtin.testDerrorMessage "test"

  Stdlib.Option.Option.Some(Builtin.testRuntimeError "test") == Builtin.testDerrorMessage
    "test"

  Stdlib.Result.Result.Error(Builtin.testRuntimeError "test") == Builtin.testDerrorMessage
    "test"

  Stdlib.Result.Result.Ok(Builtin.testRuntimeError "test") == Builtin.testDerrorMessage
    "test"


  // pipe into error
  ("test" |> Builtin.testRuntimeError |> (++) "3") == Builtin.testDerrorMessage "test"