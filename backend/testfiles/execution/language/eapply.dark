Builtin.Int.add_v0 5 = Builtin.Test.derrorMessage
  "Int.add has 0 type parameters and 2 parameters, but here was called with 0 type arguments and 1 arguments."

(let fn = (fun x -> x + 1)
 fn 6) = 7

(let fn = Builtin.Int.add
 fn 3 4) = 7

(let fn = PACKAGE.Darklang.Stdlib.Int.max
 fn 3 7) = 7

// ---------------------------
// DarkInternal tests are internal
// ---------------------------
module Darkinternal =
  (let _ = Builtin.Test.setExpectedExceptionCount 1 in
   Builtin.DarkInternal.Infra.SchedulingRule.list ()) = Builtin.Test.derrorMessage
    "Unknown error"

// ---------------------------
// User-defined Functions
// Should match packages/darklang/test/test.dark
// ---------------------------

module UserDefined =

  let stringFn (key: String) : String = key ++ " appended string"

  let fnWithTypeArgAndOneParam<'a> (arg: 'a) : 'a = arg

  let twoStringFn (str1: String) (str2: String) : String =
    str1 ++ " appended " ++ str2

  let returnsInt () : Int = 5

  let returnsString () : String = "string"

  let returnsOptionSome () : PACKAGE.Darklang.Stdlib.Option.Option<Int> =
    PACKAGE.Darklang.Stdlib.Option.Option.Some 5

  let returnsOptionNone () : PACKAGE.Darklang.Stdlib.Option.Option<Int> =
    PACKAGE.Darklang.Stdlib.Option.Option.None

  let returnsResultOk () : PACKAGE.Darklang.Stdlib.Result.Result<Int, 'err> =
    PACKAGE.Darklang.Stdlib.Result.Result.Ok 5

  let returnsResultError () : PACKAGE.Darklang.Stdlib.Result.Result<String, Bool> =
    PACKAGE.Darklang.Stdlib.Result.Result.Error false

  let throwsException () : 'a =
    Builtin.Test.raiseException "throwsException message"

  let derrorFn (msg: String) : String = msg ++ Builtin.Test.runtimeError msg

  let fnWithTypeArgs<'a, 'b> (a: 'a) (b: 'b) : 'a = a

  let fnWithTypedReturn<'a> () : 'a = 5 // errors unless Int passed for 'a

  type X<'a> =
    | A of Int
    | B of 'a

  let polyFn (a: X<'a>) : X<'a> = a
  let strFn (a: X<String>) : X<String> = a
  let definedPolyFn<'a> (a: X<'a>) : X<'a> = a



  stringFn "string" = "string appended string"
  twoStringFn "str1" "str2" = "str1 appended str2"
  returnsInt () = 5
  returnsString () = "string"
  returnsOptionSome () = PACKAGE.Darklang.Stdlib.Option.Option.Some 5
  (returnsOptionSome ()) |> Builtin.unwrap = 5
  returnsOptionNone () = PACKAGE.Darklang.Stdlib.Option.Option.None
  returnsResultOk () = PACKAGE.Darklang.Stdlib.Result.Result.Ok 5
  (returnsResultOk ()) |> Builtin.unwrap = 5
  fnWithTypeArgAndOneParam<Int> 1 = 1
  fnWithTypeArgs<Int, String> 5 "x" = 5
  fnWithTypedReturn<Int> () = 5

  polyFn (X.A 5) = X.A 5
  polyFn (X.B "str") = X.B "str"

  strFn (X.A 5) = strFn (X.A 5)
  strFn (X.B "str") = X.B "str"

  // TYPESCLEANUP - support userFn declaration with type arguments
  // definedPolyFn<String>(A.A 5) = definedPolyFn (A.A 5)
  // definedPolyFn<String>(A.B "str") = definedPolyFn (A.B "str")



  module InvalidFnCalls =
    functionWhichDoesntExist 6 = Builtin.Test.derrorMessage
      "There is no variable named: functionWhichDoesntExist"

    stringFn 5 = Builtin.Test.derrorMessage
      "UserDefined.stringFn's 1st argument (`key`) should be a String. However, an Int (5) was passed instead.\n\nExpected: (key: String)\nActual: an Int: 5"

    stringFn "str1" "str2" = Builtin.Test.derrorMessage
      "UserDefined.stringFn has 0 type parameters and 1 parameters, but here was called with 0 type arguments and 2 arguments."

    fnWithTypeArgAndOneParam 1 = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 0 type arguments and 1 arguments."

    fnWithTypeArgAndOneParam<Int> 1 "str2" = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 1 type arguments and 2 arguments."

    fnWithTypeArgAndOneParam<Int, String> 1 = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 1 arguments."

    fnWithTypeArgAndOneParam<Int, String> 1 "str" = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 2 arguments."

    fnWithTypeArgAndOneParam<Int> "str2" = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypeArgAndOneParam's 1st argument (`arg`) should be an Int. However, a String (\"str2\") was passed instead.\n\nExpected: (arg: 'a)\nActual: a String: \"str2\""

    fnWithTypedReturn<String> () = Builtin.Test.derrorMessage
      "UserDefined.fnWithTypedReturn's return value should be a String. However, an Int (5) was passed instead.\n\nExpected: 'a\nActual: an Int: 5"

    (let _ = Builtin.Test.setExpectedExceptionCount 1 in throwsException ()) = Builtin.Test.derrorMessage
      "Unknown error"

    derrorFn "msg" = Builtin.Test.derrorMessage "msg"


// ---------------------------
// Package manager function calls
// Uses functions/types from packages/darklang/test/test.dark
// ---------------------------
module Packages =
  PACKAGE.Darklang.Test.stringFn "string" = "string appended string"
  PACKAGE.Darklang.Test.twoStringFn "str1" "str2" = "str1 appended str2"
  PACKAGE.Darklang.Test.returnsInt () = 5
  PACKAGE.Darklang.Test.returnsString () = "string"

  PACKAGE.Darklang.Test.returnsOptionSome () = PACKAGE.Darklang.Stdlib.Option.Option.Some
    5

  (PACKAGE.Darklang.Test.returnsOptionSome ()) |> Builtin.unwrap = 5
  PACKAGE.Darklang.Test.returnsOptionNone () = PACKAGE.Darklang.Stdlib.Option.Option.None

  PACKAGE.Darklang.Test.returnsResultOk () = PACKAGE.Darklang.Stdlib.Result.Result.Ok
    5

  (PACKAGE.Darklang.Test.returnsResultOk ()) |> Builtin.unwrap = 5

  PACKAGE.Darklang.Test.returnsResultError () = PACKAGE.Darklang.Stdlib.Result.Result.Error
    false

  PACKAGE.Darklang.Test.polyFn (PACKAGE.Darklang.Test.X.A 5) = PACKAGE.Darklang.Test.X.A
    5

  PACKAGE.Darklang.Test.polyFn (PACKAGE.Darklang.Test.X.B "str") = PACKAGE.Darklang.Test.X.B
    "str"

  PACKAGE.Darklang.Test.strFn (PACKAGE.Darklang.Test.X.A 5) = PACKAGE
    .Darklang
    .Test
    .strFn (PACKAGE.Darklang.Test.X.A 5)

  PACKAGE.Darklang.Test.strFn (PACKAGE.Darklang.Test.X.B "str") = PACKAGE.Darklang.Test.X.B
    "str"

  // TYPESCLEANUP - support packageFn declaration with type arguments
  // PACKAGE.Darklang.Test.definedPolyFn<String>(X.A 5) = PACKAGE.Darklang.Test.definedPolyFn (X.A 5)
  // PACKAGE.Darklang.Test.definedPolyFn<String>(X.B "str") = PACKAGE.Darklang.Test.definedPolyFn (X.B "str")



  module Invalid =
    PACKAGE.Darklang.Test.stringFn 5 = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.stringFn's 1st argument (`key`) should be a String. However, an Int (5) was passed instead.\n\nExpected: (key: String)\nActual: an Int: 5"

    PACKAGE.Darklang.Test.stringFn "str1" "str2" = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.stringFn has 0 type parameters and 1 parameters, but here was called with 0 type arguments and 2 arguments."

    PACKAGE.Darklang.Test.derrorFn "test" = Builtin.Test.derrorMessage "test"

    (let _ = Builtin.Test.setExpectedExceptionCount 1 in
     PACKAGE.Darklang.Test.throwsException ()) = Builtin.Test.derrorMessage
      "Unknown error"

    PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam 1 = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 0 type arguments and 1 arguments."

    PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam<Int> 1 "str2" = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 1 type arguments and 2 arguments."

    PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam<Int, String> 1 = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 1 arguments."

    PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam<Int, String> 1 "str" = Builtin.Test.derrorMessage
      "PACKAGE.Darklang.Test.fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 2 arguments."