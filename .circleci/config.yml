version: 2.1
executors:
  my-executor:
    docker:
      - image: docker:stable-git

commands:
  ##########################
  # Getting into the remote container
  ##########################
  copy-into-container:
    steps:
      # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
      - run:
          name: Copy app directory into dev container
          command: |
            docker create -v /home/dark/app --name vols alpine:3.4 /bin/true
            docker cp . vols:/home/dark/app
            # set the ownership of all this
            docker run -i --volumes-from vols alpine sh -c "adduser -D -u 1000 dark; chown -R dark /home/dark/app"

  copy-out-of-container:
    steps:
      - run:
          name: Copy out generated files and caches
          when: always
          command: |
            docker cp vols:/home/dark/app/server/_build server/
            docker cp vols:/home/dark/app/client2/node_modules client2
            docker cp vols:/home/dark/app/client2/lib client2
            docker cp vols:/home/dark/app/server/static/. server/static

  ##########################
  # Artifacts
  ##########################
  extract-and-save-artifacts:
    steps:
      - run:
          name: Copy out artifacts
          when: always
          command: |
            mkdir -p artifacts
            docker cp vols:/home/dark/app/rundir artifacts/rundir
            docker cp vols:/home/dark/app/server/static/etags.json artifacts/
            ls -la server/static > artifacts/asset-list.txt
      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/rundir/test_results


  ##########################
  # Caches
  ##########################
  save-caches:
    steps:
      - save_cache:
          when: always
          paths:
            - server/_build
            - client2/node_modules
            - client2/lib
          key: v3-build-{{ checksum "today-timestamp" }}
  load-caches:
    steps:
      - setup-cache-names
      - restore_cache:
          keys:
            - v3-build-{{ checksum "today-timestamp" }}
            - v3-build-{{ checksum "minus1-timestamp" }}
            - v3-build-{{ checksum "minus2-timestamp" }}
            - v3-build-{{ checksum "minus3-timestamp" }}
            - v3-build-{{ checksum "minus4-timestamp" }}
            - v3-build-{{ checksum "minus5-timestamp" }}
            - v3-build-{{ checksum "minus6-timestamp" }}
            - v3-build-{{ checksum "minus7-timestamp" }}
  clean-caches:
    steps:
      - run:
          name: Maybe clear caches
          # Since we don't checksum the cache on its contents, it may
          # continue to grow. As a result, let's clear the cache weekly.
          # We store the day the cache was built in the cache. If the
          # cache was built on friday, and today is not Friday, then
          # it's the first build after last week, and clear it.
          command: |
            if [[ `date +"%A"` != "Friday" && `cat server/_build/CACHE_DAY` == "Friday" ]]; then
              echo "Clearing caches"
              # TODO: add in bucklescript + node_modules
              rm -Rf server/_build
            else
              echo "Not clearing caches"
            fi
            mkdir -p server/_build
            date +"%A" > server/_build/CACHE_DAY
  setup-cache-names:
    steps:
      - run:
          name: Set up names for caches
          command: |
            date +"%F" > today-timestamp
            date +"%F" -d "today - 1 days" > minus1-timestamp
            date +"%F" -d "today - 2 days" > minus2-timestamp
            date +"%F" -d "today - 3 days" > minus3-timestamp
            date +"%F" -d "today - 4 days" > minus4-timestamp
            date +"%F" -d "today - 5 days" > minus5-timestamp
            date +"%F" -d "today - 6 days" > minus6-timestamp
            date +"%F" -d "today - 7 days" > minus7-timestamp

  ##########################
  # Initializing the containers
  ##########################
  initialize:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install outer container utilities
          # coreutils for gnu date
          # bash for scripts
          command: |
            apk add --update bash coreutils nginx jq


  ##########################
  # misc
  ##########################
  run-background-container:
    steps:
      - run:
          command: NEVER_REBUILD_DOCKER=1 scripts/builder --ci-serve
          background: true
  wait-for-container:
    steps:
      - run:
          name: "Wait for container"
          command: |
            # --foreground because this is run in a script by circle
            timeout --foreground 5m scripts/wait-until-container-ready
            timeout --foreground 5m scripts/wait-until-server-ready




# TODO:
# optimize workflow

jobs:
  build:
    executor: my-executor
    steps:
      - checkout
      - persist_to_workspace: { root: ".", paths: "." }
      - initialize
      - load-caches
      - copy-into-container
      - run: scripts/builder --compile --test
      - run-background-container
      - wait-for-container
      - copy-out-of-container
      - save-caches
      - persist_to_workspace:
          root: "."
          paths:
            # Just enough for integration tests and deploy
            - server/_build/default/bin
            - server/static
      - extract-and-save-artifacts

  integration-tests:
    executor: my-executor
    parallelism: 4
    steps:
      - initialize
      - attach_workspace: { at: "." }
      - copy-into-container
      - run-background-container

      # run this here so we save a little time waiting for the server to be ready.
      - run: nginx -t -c $(pwd)/scripts/support/nginx-toplevel.conf -g "pid $(pwd)/rundir/nginx.pid;"

      - wait-for-container
      - run:
          name: Run integration tests
          shell: bash
          command: |
            # get full list of tests
            grep ^test integration-tests/tests.js | sed "s/.*'\(.*\)'.*/\1/" > all-tests
            # split them using timing info
            TESTS=$(circleci tests split --split-by=timings --timings-type=testname all-tests)
            # concat them into a pattern (note: $TESTS is deliberately unquoted)
            PATTERN=$(printf -- "^%s$|" $TESTS)
            # remove last char
            PATTERN=${PATTERN%?}
            scripts/run-in-docker integration-tests/run.sh --pattern="$PATTERN"

      - extract-and-save-artifacts


  deploy:
    executor: my-executor
    steps:
      - initialize
      - attach_workspace: { at: "." }
      - copy-into-container
      - run-background-container
      - wait-for-container
      - run: scripts/run-in-docker scripts/gcp-build-containers
      - run: scripts/deploy-from-circle


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - integration-tests:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - integration-tests
            - build
