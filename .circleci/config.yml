version: 2
jobs:
  build:
    docker:
      - image: docker:stable-git

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install outer container utilities
          # coreutils for gnu date
          # bash for scripts
          command: |
            apk add --update bash coreutils


      # Setup for daily/weekly caches
      - run: date +"%F" > today-timestamp
      - run: date +"%F" -d "today - 1 days" > minus1-timestamp
      - run: date +"%F" -d "today - 2 days" > minus2-timestamp
      - run: date +"%F" -d "today - 3 days" > minus3-timestamp
      - run: date +"%F" -d "today - 4 days" > minus4-timestamp
      - run: date +"%F" -d "today - 5 days" > minus5-timestamp
      - run: date +"%F" -d "today - 6 days" > minus6-timestamp
      - run: date +"%F" -d "today - 7 days" > minus7-timestamp

      # main build
      - restore_cache:
          keys:
            - v1-build-{{ checksum "today-timestamp" }}
            - v1-build-{{ checksum "minus1-timestamp" }}
            - v1-build-{{ checksum "minus2-timestamp" }}
            - v1-build-{{ checksum "minus3-timestamp" }}
            - v1-build-{{ checksum "minus4-timestamp" }}
            - v1-build-{{ checksum "minus5-timestamp" }}
            - v1-build-{{ checksum "minus6-timestamp" }}
            - v1-build-{{ checksum "minus7-timestamp" }}

      - run:
          name: Clear cache on Saturday
          # Since we don't checksum the cache on its contents, it may
          # continue to grow. As a result, let's clear the cache on
          # Saturdays. We store the day the cache was built in the
          # cache. If today is saturday, but the cache was built on
          # friday, then it's the first build on a saturday. In this
          # case, clear the cache before we build.
          command: |
            if [[ `date +"%A"` == "Saturday" && `cat server/_build/CACHE_DAY` == "Friday" ]]; then
              rm -Rf client/elm-stuff
              rm -Rf client/tests/elm-stuff
              rm -Rf server/_build
            fi
            mkdir -p server/_build
            date +"%A" > server/_build/CACHE_DAY

      # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
      - run:
          name: Copy in app directory
          command: |
            docker create -v /home/dark/app --name vols alpine:3.4 /bin/true
            docker cp . vols:/home/dark/app
            # set the ownership of all this
            docker run -i --volumes-from vols dark sudo chown -R dark /home/dark/app

      - run: scripts/builder --compile --test

      - run:
          command: scripts/builder --serve
          background: true

      - run: scripts/run-in-docker integration-tests/run.sh

      - run: mkdir artifacts

      - run:
          name: Copy out artifacts
          when: always
          command: |
            docker cp vols:/home/dark/app/persistdir artifacts/persistdir1
            docker cp vols:/home/dark/app/rundir artifacts/rundir1/

      - run:
          name: Copy out caches / assets
          when: always
          command: |
            mv client/elm-stuff client/tests/elm-stuff_old
            mv client/tests/elm-stuff client/tests/elm-stuff_old
            mv server/_build server/_build_old
            docker cp vols:/home/dark/app/client/elm-stuff client/elm-stuff
            docker cp vols:/home/dark/app/client/tests/elm-stuff client/tests/elm-stuff
            docker cp vols:/home/dark/app/server/_build server/

      - save_cache:
          when: always
          paths:
            - client/elm-stuff
            - client/tests/elm-stuff
            - server/_build
          key: v1-build-{{ checksum "today-timestamp" }}


      - run: scripts/run-in-docker scripts/gcp-build-container
      - run:
          command: scripts/run-in-docker scripts/gcp-run-container
          background: true

      - run: scripts/run-in-docker integration-tests/run.sh --gcp
      - run: scripts/run-in-docker scripts/gcp-deploy

      # TODO: figure this out when the container actually runs
      # - run:
      #     name: Copy out artifacts
      #     when: always
      #     command: |
      #       docker cp vols:/home/dark/app/persistdir artifacts/persistdir2
      #       docker cp vols:/home/dark/app/rundir artifacts/rundir2

      - store_artifacts:
          path: artifacts


