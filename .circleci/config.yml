version: 2.1

# There is a strong connection between this file and the equivalent files for
# running Dark in dev, which are scripts/builder and
# scripts/support/build-server. Generally, if you add something to this file,
# there's an equivalent to be added in one of those files.

executors:
  my-executor:
    docker:
      - image: docker:stable-git
  in-container:
    working_directory: ~/app
    environment:
      IN_DEV_CONTAINER: true
    docker:
      - image: 500377317163.dkr.ecr.us-east-1.amazonaws.com/dark-ci:latest


commands:
  show-large-files-and-directories:
    steps:
      - run:
          # show any file or directory over 50M in size
          # note alpine find doesn't support +50M here
          name: show large files and directories
          command: |
            find . -size +51200k -exec du -h {} \;
            du -ht 50M

  ##########################
  # Check the worktree
  ##########################
  assert-clean-worktree:
    steps:
      - run:
          name: Assert the worktree is clean
          command: "bash -c '[[ -z $(git status -s) ]] && echo Workdir is clean || { echo Workdir is not clean:; git status -s; $(exit 1); }'"


  ##########################
  # Setup app
  ##########################
  setup-app:
    steps:
      - run: |
          set -x
          scripts/support/setup-circleci-environment
          scripts/support/create-app-directories
          scripts/support/create-cache-directories
          scripts/support/setup-hosts
          scripts/support/start-background-services postgresql
          env

  ##########################
  # Rust
  ##########################
  rust-setup:
    parameters:
      project: { type: string }
    steps:
      - setup-app
      - restore_cache:
          keys:
            # This cache should be about 500MB or so. It balloons over time and needs to be deleted.
            - v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}-{{ .Branch }}
            - v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}
            - v0d-<< parameters.project >>

  rust-finish:
    parameters:
      project: { type: string }
    steps:
      - run:
          name: Reduce caches
          command: cargo cache -a
      - show-large-files-and-directories

      # must persist to workspace first, as next step will remove built release artifact
      - persist_to_workspace:
          root: "."
          paths: [ << parameters.project >>/target/release/dark-<< parameters.project >> ]

      # This removes files in the top-level of target/{debug,release}, which include the actual built artifact
      # and other intermediates that will always be rebuilt on the next build (so there's no sense in caching them).
      # It also includes our own (dark*) build files from deps, which are likewise always rebuilt.
      #
      # See https://github.com/rust-lang/cargo/issues/5885 for discussion and details
      - run:
          name: Cleanup frequently changing rust artifacts
          command: |
            find << parameters.project >>/target -maxdepth 2 -type f -delete
            rm -rf << parameters.project >>/target/{debug,release}/{deps,.fingerprint}/dark*

      # https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
      - save_cache:
          name: "Save << parameters.project >> cache"
          paths:
            - << parameters.project >>/target
            - .cargo/bin/
            - .cargo/registry/index/
            - .cargo/registry/cache/
            - .cargo/git/db/
          key: v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}-{{ .Branch }}

  ##########################
  # Initializing the containers
  ##########################
  prep-container-creation:
    steps:
      - setup_remote_docker: { docker_layer_caching: true }

      # Save the docker env: type .docker-env when sshing in, then you can
      # use ./scripts/run-in-docker
      - run:
          name: Setup docker-env for debugging
          command: env | grep 'DOCKER\|NO_PROXY' | sed 's/^/export /' > ../docker-env


  ##########################
  # misc
  ##########################
  auth-with-gcp:
    steps:
      - run:
          name: Auth with GCP
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json

##########################
# Actual workflow
##########################
jobs:

  build-container:
    executor: my-executor
    environment:
      TAG: 500377317163.dkr.ecr.us-east-1.amazonaws.com/dark-ci:latest
    steps:
      - checkout
      - prep-container-creation
      - run: apk add --update bash python3 --update-cache
      - run: pip3 install awscli --upgrade --user
      - run: $(/root/.local/bin/aws ecr get-login --no-include-email --region us-east-1)
      # This is not working, feels like it should. It's downloading, yet still rebuilding.
      # - run:
      #     name: Pre-fetch docker container
      #     shell: bash
      #     command: |
      #       if [[ `docker images $TAG -q` == "" ]]
      #       then
      #         set -x
      #         docker pull $TAG
      #         docker images
      #       fi
      - run: docker build -t $TAG .
      - run: docker push $TAG

  build-client:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - restore_cache:
          keys:
            - v1d-client-{{ checksum "client/yarn.lock" }}-{{ .Branch }}
            - v1d-client-{{ checksum "client/yarn.lock" }}
            - v1d-client
      - run: scripts/support/compile --test client/package.json client/src/styles/app.scss 
      - assert-clean-worktree
      - run: scripts/support/shellchecker # run here cause its the fastest
      - show-large-files-and-directories
      - save_cache:
          name: "Save packagejson-specific cache"
          paths: [ "client/node_modules" ]
          key: v1d-client-{{ checksum "client/yarn.lock" }}-{{ .Branch }}
      - persist_to_workspace:
          root: "."
          paths:
            # Just enough for integration tests and deploy
            - backend/static/app.css
            - backend/static/app.js
            - backend/static/appsupport.js
            - backend/static/fetcher.js
            - backend/static/analysiswrapper.js
      - store_artifacts: { path: rundir }
      - store_artifacts: { path: backend/static/etags.json }
      - store_test_results: { path: rundir/test_results }

  build-backend:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - restore_cache:
          keys:
            - v2d-backend-{{ checksum "backend/esy.json" }}
            - v2d-backend
      # appsupport is needed for a unit test
      - run: touch backend/static/appsupport.js
      - show-large-files-and-directories
      - run: scripts/support/compile --test backend/esy.json
      - assert-clean-worktree
      # Doesn't need to be run post-build, but takes <1s to run
      - run: scripts/ocaml-find-unused backend/test
      - run:
          name: Reduce size of esy cache
          command: rm -Rf /home/dark/.esy/3/b
      - show-large-files-and-directories
      - save_cache:
          paths:
            - backend/_build
            - backend/_esy
            - backend/node_modules
            - /home/dark/.esy
          key: v2d-backend-{{ checksum "backend/esy.json" }}
      - persist_to_workspace:
          root: "."
          paths:
            # Just enough for integration tests and deploy
            - backend/_build/default/bin/server.exe
            - backend/_build/default/bin/queue_worker.exe
            - backend/_build/default/bin/cron_checker.exe
            - backend/static/analysis.js
      - store_artifacts: { path: rundir }
      - store_test_results: { path: rundir/test_results }


  build-stroller:
    executor: in-container
    steps:
      - checkout
      - rust-setup: { project: "stroller" }
      - run: scripts/support/compile stroller/Cargo.toml --test
      - prep-container-creation
      - run: scripts/gcp-build-containers --skip-ocaml --skip-queue-scheduler
      - assert-clean-worktree
      - rust-finish: { project: "stroller" }

  build-queue-scheduler:
    executor: in-container
    steps:
      - checkout
      - rust-setup: { project: "queue-scheduler" }
      # tests are run in rust-integration-tests
      - run: scripts/support/compile queue-scheduler/Cargo.toml
      - prep-container-creation
      - run: scripts/gcp-build-containers --skip-ocaml --skip-stroller
      - assert-clean-worktree
      - rust-finish: { project: "queue-scheduler" }

  build-postgres-honeytail:
    executor: my-executor
    steps:
      - checkout
      - prep-container-creation
      - run: cd postgres-honeytail && docker build -t dark-gcp-postgres-honeytail .

  validate-honeycomb-config:
    executor: my-executor
    steps:
      - checkout
      - prep-container-creation
      - run: apk add --update bash jq python py-pip && pip install yq
      - run: bash -c scripts/support/test-honeycomb-config.sh

  integration-tests:
    executor: in-container
    parallelism: 4
    steps:
      - checkout
      - setup-app
      - attach_workspace: { at: "." }
      - restore_cache: # get testcafe
          keys:
            - v1d-client-{{ checksum "client/yarn.lock" }}-{{ .Branch }}
            - v1d-client-{{ checksum "client/yarn.lock" }}
            - v1d-client
      - show-large-files-and-directories
      - run:
          name: Run integration tests
          command: |
            scripts/support/runserver

            # get full list of tests
            grep ^test integration-tests/tests.js | sed 's/.*"\(.*\)".*/\1/' > rundir/all-tests
            # split them using timing info
            TESTS=$(circleci tests split --split-by=timings --timings-type=testname rundir/all-tests)
            # concat them into a pattern (note: $TESTS is deliberately unquoted)
            PATTERN=$(printf -- "^%s$|" $TESTS)
            # remove last char
            PATTERN=${PATTERN%?}
            scripts/wait-until-server-ready
            integration-tests/run.sh --pattern="$PATTERN"
      - assert-clean-worktree
      - store_artifacts: { path: rundir }
      - store_test_results: { path: rundir/test_results }


  rust-integration-tests:
    executor: in-container
    steps:
      - checkout
      - rust-setup: { project: "queue-scheduler" }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - run:
          name: Trigger migrations with runserver
          command: |
            # Run the server long enough to ensure it runs the migrations
            scripts/support/generate-etags
            scripts/support/runserver
            scripts/wait-until-server-ready
      - run:
          name: Run queue-scheduler tests
          command: scripts/run-rust-tests queue-scheduler
      - assert-clean-worktree


  push-to-gcp:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - run:
          name: Regenerate combined ETags
          command: |
            scripts/support/generate-etags
            cp backend/static/etags.json rundir/
      - setup_remote_docker: { docker_layer_caching: true }
      - run: scripts/gcp-build-containers
      - auth-with-gcp
      - run: scripts/push-assets-to-cdn
      - run: scripts/gcp-push-images-to-gcr
      # Save the image IDs for deployment later
      - run:
          name: Save image IDs
          command: |
            mkdir gcr-image-ids
            time docker images gcr.io/balmy-ground-195100/dark-gcp -q | head -n 1 > gcr-image-ids/server
            time docker images gcr.io/balmy-ground-195100/dark-gcp-qw -q | head -n 1 > gcr-image-ids/qw
            time docker images gcr.io/balmy-ground-195100/dark-gcp-cron -q | head -n 1 > gcr-image-ids/cron
            time docker images gcr.io/balmy-ground-195100/dark-gcp-stroller -q | head -n 1 > gcr-image-ids/stroller
            time docker images gcr.io/balmy-ground-195100/dark-gcp-queue-scheduler -q | head -n 1 > gcr-image-ids/queue-scheduler
            time docker images gcr.io/balmy-ground-195100/tunnel -q | head -n 1 > gcr-image-ids/tunnel
            time docker images gcr.io/balmy-ground-195100/dark-gcp-postgres-honeytail -q | head -n 1 > gcr-image-ids/postgres-honeytail
      - persist_to_workspace:
          root: "."
          paths: [ gcr-image-ids ]


  deploy:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - auth-with-gcp
      - run: |
          scripts/gke-deploy       \
            --server-image-id=`cat gcr-image-ids/server` \
            --qw-image-id=`    cat gcr-image-ids/qw`     \
            --cron-image-id=`  cat gcr-image-ids/cron`   \
            --stroller-image-id=`cat gcr-image-ids/stroller` \
            --queue-scheduler-image-id=`cat gcr-image-ids/queue-scheduler` \
            --tunnel-image-id=`cat gcr-image-ids/tunnel` \
            --postgres-honeytail-image-id=`cat gcr-image-ids/postgres-honeytail`


workflows:
  version: 2
  build-and-deploy:
    jobs:
      # initial builds & tests
      - build-container
      - build-postgres-honeytail
      - validate-honeycomb-config

      - build-backend: { requires: [ build-container ] }
      - build-client: { requires: [ build-container ] }
      - build-stroller: { requires: [ build-container ] }
      - build-queue-scheduler: { requires: [ build-container ] }

      # expensive tests
      - rust-integration-tests:
          requires:
            - build-container
            - build-backend
            - build-client
            - build-queue-scheduler
      - integration-tests:
          requires:
            - build-container
            - build-backend
            - build-client

      # pre-deploy, in parallel with integration-tests
      - push-to-gcp:
          filters:
            branches:
              only: master
          requires:
            - build-container
            - build-backend
            - build-client
            - build-stroller
            - build-queue-scheduler
            - build-postgres-honeytail

      # actual deploy
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - build-container
            - validate-honeycomb-config
            - integration-tests
            - rust-integration-tests
            - push-to-gcp
