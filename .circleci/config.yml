version: 2
jobs:
  build:
    docker:
      - image: docker:stable-git

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install outer container utilities
          # coreutils for gnu date
          # bash for scripts
          command: |
            apk add --update bash coreutils


      # Setup for daily/weekly caches
      - run: date +"%F" > today-timestamp
      - run: date +"%F" -d "today - 1 days" > minus1-timestamp
      - run: date +"%F" -d "today - 2 days" > minus2-timestamp
      - run: date +"%F" -d "today - 3 days" > minus3-timestamp
      - run: date +"%F" -d "today - 4 days" > minus4-timestamp
      - run: date +"%F" -d "today - 5 days" > minus5-timestamp
      - run: date +"%F" -d "today - 6 days" > minus6-timestamp
      - run: date +"%F" -d "today - 7 days" > minus7-timestamp

      # main build
      - restore_cache:
          keys:
            - v1-build-{{ checksum "today-timestamp" }}
            - v1-build-{{ checksum "minus1-timestamp" }}
            - v1-build-{{ checksum "minus2-timestamp" }}
            - v1-build-{{ checksum "minus3-timestamp" }}
            - v1-build-{{ checksum "minus4-timestamp" }}
            - v1-build-{{ checksum "minus5-timestamp" }}
            - v1-build-{{ checksum "minus6-timestamp" }}
            - v1-build-{{ checksum "minus7-timestamp" }}

      - run:
          name: Maybe clear caches
          # Since we don't checksum the cache on its contents, it may
          # continue to grow. As a result, let's clear the cache weekly.
          # We store the day the cache was built in the cache. If the
          # cache was built on friday, and today is not Friday, then
          # it's the first build after last week, and clear it.
          command: |
            if [[ `date +"%A"` != "Friday" && `cat server/_build/CACHE_DAY` == "Friday" ]]; then
              echo "Clearing caches"
              rm -Rf client/elm-stuff
              rm -Rf client/tests/elm-stuff
              rm -Rf server/_build
            else
              echo "Not clearing caches"
            fi
            mkdir -p server/_build
            date +"%A" > server/_build/CACHE_DAY


      # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
      - run:
          name: Copy app directory into dev container
          command: |
            docker create -v /home/dark/app --name vols alpine:3.4 /bin/true
            docker cp . vols:/home/dark/app
            # set the ownership of all this
            docker run -i --volumes-from vols alpine sh -c "adduser -D -u 1000 dark; chown -R dark /home/dark/app"

      - run: scripts/builder --compile --test

      - run:
          command: NEVER_REBUILD_DOCKER=1 scripts/builder --serve
          background: true

      # The 2nd invocation of builder isn't free.
      - run: scripts/wait-until-server-ready.sh

      - run:
          name: Copy out caches
          when: always
          command: |
            docker cp vols:/home/dark/app/client/elm-stuff client/elm-stuff
            docker cp vols:/home/dark/app/client/tests/elm-stuff client/tests/elm-stuff
            docker cp vols:/home/dark/app/server/_build server/

      - save_cache:
          when: always
          paths:
            - client/elm-stuff
            - client/tests/elm-stuff
            - server/_build
          key: v1-build-{{ checksum "today-timestamp" }}


      - run: scripts/run-in-docker integration-tests/run.sh

      - run:
          name: Copy out artifacts
          when: always
          command: |
            mkdir -p artifacts
            docker cp vols:/home/dark/app/rundir artifacts/rundir1/


      - run: scripts/run-in-docker scripts/gcp-build-containers
      - run: scripts/deploy-from-circle

      # # For now, we do integration tests after the deploy. If they work
      # # above, then it works. This needs more work but I'm stopping here
      # # for now.
      # - run:
      #     command: scripts/run-in-docker scripts/gcp-run-locally
      #     background: true

      # - run: scripts/run-in-docker integration-tests/run.sh --gcp

      # TODO: figure this out when the container actually runs
      # - run:
      #     name: Copy out artifacts
      #     when: always
      #     command: |
      #       docker cp vols:/home/dark/app/rundir artifacts/rundir2

      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/rundir1/test_results


