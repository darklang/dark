/* Syntax Colors */
$lambda-color: $orange;
$pipe-color: $blue;

@mixin precedence($depth) {
  .precedence-#{$depth} {
    &:not(.mouseovered),
    &:not(.mouseovered) .entry form #search-container #suggestionBox,
    &:not(.mouseovered) .string-entry {
      background-color: fade($grey2, 5% + ($depth * 5%));
    }

    &.selected {
      background-color: $selected-background;
    }
  }
}

@mixin handler-type($name, $color) {
  &.#{$name} {
    color: $color;
    border-bottom-color: $color;

    .handler-trigger,
    .toggle-btn {
      &:hover {
        color: saturate($color, 30%);
      }
    }
  }
}

@mixin is-executing() {
  &.is-executing {
    color: white;
    transition: none;

    i {
      animation: spin 0.75s infinite linear;
    }
  }
}

@mixin is-dragging() {
  &:active {
    cursor: grabbing;
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
  }
}
.highlighted-indent {
  margin-left: $spacing-medium;
  padding-left: $spacing-medium;
  border-left: 1px solid $lambda-color;
}

.blank-box-style {
  height: 15px;
  border-bottom: 1px dashed $grey2;
  padding-left: 1ch;
  padding-right: 1ch;
  margin-left: $spacing-medium/2;
  margin-right: $spacing-medium/2;
}

.blank-text-style {
  @extend .placeholder;
  text-align: left;
}

$toplevel-shadow: 1px 2px 2px 0 $black1;
$toplevel-shadow-front: 1px 2px 4px 2px $black1;

/* Toplevel */
.toplevel {
  display: flex;
  flex-direction: column;
  position: relative;
  width: max-content;
  min-width: $toplevel-min-width;
  padding: 4px;
  background: $toplevel-background;
  box-shadow: $toplevel-shadow;

  .node.hovering & {
    box-shadow: $toplevel-shadow-front;
  }

  .node.selected & {
    box-shadow: none;
  }

  .mouseovered-selectable {
    background-color: $hover-background;
    transition-delay: 0.4s;

    &.blank {
      color: $white2;
      transition-delay: 0.4s;
    }
  }

  .mouseovered-enterable {
    cursor: text;
  }

  .commandTarget {
    @extend .selected;
  }

  .blank {
    @extend .blank-box-style;
    @extend .blank-text-style;
    min-width: 8ch;

    &.arg-on-new-line {
      padding-left: 0ch;
      margin-left: 0px;
      text-align: start;
      font-size: $code-font-size;

      .blank-entry {
        @extend .blank-text-style;
        width: 100%;
      }
    }
  }

  .blankOr.selected {
    background-color: $selected-background;
    color: $white2;

    &.tstr {
      color: $string-color;
    }

    &.blank {
      color: $grey3;
    }
  }
}

//*************
// Handler
//*************

.toplevel .spec-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: nowrap;

  color: $default-toplevel-color;
  font-size: 8pt;

  border-bottom: 1px solid $default-toplevel-color;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-left: $spacing-medium;
  padding-right: 16px;

  @include handler-type(http-get, $http-get);
  @include handler-type(http-post, $http-post);
  @include handler-type(http-put, $http-put);
  @include handler-type(http-delete, $http-delete);
  @include handler-type(http-patch, $http-patch);
  @include handler-type(cron, $cron-color);
  @include handler-type(worker, $queue-color);
  @include handler-type(repl, $repl-color);

  .name,
  .modifier,
  .space {
    margin: 0;
  }
  .handler-trigger {
    display: inline;
    margin-left: 4px;
    position: relative;

    &:hover {
      cursor: pointer;
    }

    @include is-executing();

    &.inactive {
      display: inline;
      margin-left: 4px;
      color: $grey2;

      &:hover {
        cursor: not-allowed;
      }
    }

    &.complete {
      &:before {
        @include font-awesome("\f00c");
        position: absolute;
        left: 0;
        opacity: 1;

        /* duration timing-fn delay fill-mode animation-name */
        animation: 0.5s linear 2s forwards fadeOut;
      }

      i.fa.fa-redo {
        opacity: 0;

        /* duration timing-fn delay fill-mode animation-name */
        animation: 0.5s linear 2.25s forwards fadeIn;
      }
    }
  }

  .modifier {
    div.blankOr,
    div.blank {
      display: inline;
    }

    .external {
      margin-left: 4px;
      color: $green;
    }
  }

  // remove dotted outline after clicking (source: reset-normalize)
  a:focus {
    outline: none;
  }

  .handler-lock {
    position: absolute;
    left: -2px;
    top: -$spacing-medium;
    color: $white1;
    font-size: 12px;
    color: $unlock-color;

    &.active {
      color: $lock-color;
    }
  }

  .handler-expand {
    position: absolute;
    top: 0;
    right: 4px;
    font-size: 16px;
    color: $grey2;
  }
}

.function-body,
.handler-body {
  display: flex;
  flex-wrap: nowrap;
  align-items: stretch;

  height: 0;
  opacity: 0;
  overflow: hidden;
  transition: 0.2s height ease, 0.1s opacity linear 0s;

  &.expand {
    height: auto;
    opacity: 1;
    overflow: visible;
    transition: 0.2s height ease, 0.1s opacity linear 0.18s;
  }
}

//*************
// AST
//*************
.rop-rail.active {
  border-left: 1px dotted lighten($black3, 20%);
  display: inline-block;
  vertical-align: top;
  margin-left: auto;
  margin-right: 15px;
  margin-top: $spacing-medium;
}

.error-indicator {
  position: absolute;
  left: calc(100% - 2ch);
  width: 12px;
  height: 12px;
  background-size: contain;
  background-repeat: no-repeat;
  opacity: 0.5;

  &:hover {
    opacity: 1;
    cursor: pointer;
  }

  &:hover:after {
    @extend .tooltip;

    content: "Handle errors that arise from this function yourself";

    position: absolute;
    left: 25px;
    top: -2px;
  }

  &.Option {
    background-image: url("/icons/option_just.svg");

    &.ErrorRail {
      background-image: url("/icons/option_nothing.svg");
    }
  }

  &.Result {
    background-image: url("/icons/result_ok.svg");

    &.ErrorRail {
      background-image: url("/icons/result_error.svg");
    }
  }

  &.Result.EvalFail,
  &.Option.EvalFail {
    background-image: none;
  }
}

.ast {
  font-size: 10pt;
  padding-right: $spacing-medium;
  padding-left: $spacing-medium;
  padding-top: 24px;
  padding-bottom: 24px;
  white-space: pre;
  width: max-content;
  display: inline-block;
  vertical-align: top;

  div {
    display: inline-block;
    vertical-align: top;

    .live-value {
      display: block;

      padding: 4px;
      width: max-content;
      max-width: 250px;

      font-style: normal;
      white-space: pre-wrap;
      word-break: break-all;
      word-wrap: break-word;
      font-size: $code-font-size * 0.85;
      color: $live-value-foreground;

      background-color: $live-value-background;

      position: absolute;
      right: calc(#{"100% + 30px"});

      &.ac {
        margin-top: 1.2ch;
      }

      .copy-value {
        position: absolute;
        top: -4px;
        right: -$spacing-medium;
        color: $white1;
        opacity: 0.7;

        &:hover {
          opacity: 0.85;
        }
      }
    }
  }

  .value-error {
    background-color: fadeout(red, 70%);
  }

  .letexpr > .letbody {
    display: block;
  }

  .lambdaexpr {
    @extend .highlighted-indent;
    display: block;
  }

  .lambdabinding,
  .arrow {
    color: $lambda-color;
  }

  .value.tstr {
    @extend .string-style;
    border: 0;
    font-size: $code-font-size;
    margin: 0;

    .quote {
      display: inline-block;
    }
  }

  .quote {
    @extend .string-style;
    display: none;

    &.quote-start {
      left: 0;
      top: 0;

      &:before {
        content: "\201C";
      }
    }

    &.quote-end {
      bottom: 0;
      right: 0;

      &:before {
        content: "\201D";
      }
    }
  }

  .related-change {
    color: $hover-foreground;
  }

  .lambdabody {
    display: block;
  }

  .ifbody,
  .elsebody,
  .objectpair,
  .matchcase {
    @extend .indent;
    display: block;
  }

  .objectkey {
    .entry {
      // this is awful -- but we need to remove the margin being added to .entry
      // we should re-organize who adds/removes margins
      margin-left: 0px;
      margin-right: 0px;
    }
  }

  .atom {
    margin-left: 4px;
    margin-right: 4px;
  }

  .constructorname {
    margin-right: 4px;
  }

  .atom.fieldaccessop {
    margin-left: -4px;
    margin-right: 0px;
  }

  .atom.constructor-pattern {
    margin-left: 0px;
  }

  .atom.fieldname {
    margin-left: 0px;
  }

  .moduleseparator {
    color: $green;
  }

  .keyword,
  .emit {
    color: $green;
  }

  .fncall {
    &.prefix > .arg-on-new-line {
      display: block;
      box-sizing: border-box;
      margin-left: 2ch;
    }

    .arg-on-new-line {
      &.blank > .param-name {
        font-style: normal;
      }

      & > .param-name {
        width: auto;
        position: absolute;
        color: darken($grey3, 25%);
        font-size: 0.85rem;
      }
    }

    .tstr {
      margin-left: 2px;
    }

    .execution-button {
      position: absolute;
      font-size: 55%;
      margin-left: -3px;
      transition: color linear 0.1s;

      &:hover {
        font-size: 75%;
        font-weight: strong;
        margin-top: -2px;
        cursor: pointer;
      }

      &.execution-button-unsafe {
        color: $red;
      }

      &.execution-button-unavailable {
        color: grey;
      }

      &.execution-button-needed {
        color: green;
      }

      &.execution-button-repeat {
        color: green;
      }

      @include is-executing();
    }
  }

  @include precedence(1);
  @include precedence(2);
  @include precedence(3);
  @include precedence(4);
  @include precedence(5);
  @include precedence(6);

  .threadexpr {
    .threadmember {
      display: block;

      &:first-child > .thread.pipe {
        display: none;
      }

      .thread.pipe {
        margin-top: 1px;
        margin-right: 0px;
        font-size: 70%;
        color: $pipe-color;
      }
    }
  }
}

.live-value {
  display: none;
}

/********************
* Entry box
********************/

// TODO: figure out proper entry box positioning
// -- this is a demo hack
.spec-header .entry form {
  margin-top: 0px;
  position: relative;
}

.db .entry form {
  position: relative;
  margin-top: 0px;
}

.ast .entry form {
  position: relative;
  margin-top: 0px;
}

.selecting-command .entry {
  margin-top: 4px;
  display: block;
}

.versioned-function {
  display: inline-block;
  vertical-align: baseline;

  .version {
    font-size: 0.6rem;
    margin-right: -2px;
  }
}

.letvarname,
.fieldname {
  & > .entry {
    margin-left: 0;
    margin-right: 0;
  }
}
