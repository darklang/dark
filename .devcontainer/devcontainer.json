{
  "name": "dark-builder",

  "build": {
    "context": "..",
    "dockerfile": "../Dockerfile"
  },

  // Set *default* container specific settings.json values on container create.
  "settings": {
    "terminal.integrated.defaultProfile.linux": null
  },

  // Add the IDs of extensions you want installed when the container is created.
  "extensions": [
    "ionide.ionide-fsharp@5.5.5",
    "shuumatsu.vscode-ocamlformat",
    "esbenp.prettier-vscode",
    "ms-python.python",
    "ms-azuretools.vscode-docker",
    "editorconfig.editorconfig"
  ],

  /////////////////////////////////////////////////
  // From here down, the contents are supposed to represent the exact same
  // as we see in script/builder
  /////////////////////////////////////////////////

  // Ports are loaded in the build process
  "forwardPorts": [8000, 9000, 9001, 2345, 5433],

  "containerEnv": {
    "IN_DEV_CONTAINER": "true"
  },

  "runArgs": [
    "--dns",
    "8.8.8.8",
    "--dns",
    "8.8.4.4",
    "--hostname",
    "dark-dev",
    "--env-file",
    "config/dev",
    "--env",
    "HOST_PWD=${localWorkspaceFolder}",
    "--security-opt",
    "seccomp=scripts/support/chrome-seccomp.json",
    "--security-opt",
    "seccomp=unconfined",
    "--label",
    "dark-dev-container",
    "--workdir",
    "/home/dark/app"
  ],

  "workspaceMount": "source=${localWorkspaceFolder},target=/home/dark/app,type=bind,consistency=delegated", // for local
  "workspaceFolder": "/home/dark/app",

  "mounts": [
    // For Docker-in-Docker
    //"type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock",

    // gcloud permissions
    "type=bind,src=${localEnv:HOME}${localEnv:USERPROFILE}/.config/gcloud,dst=/home/dark/.config/gcloud,consistency=cached",

    // Bash history
    "type=bind,src=${localEnv:HOME}${localEnv:USERPROFILE}/.dark_bash_history,dst=/home/dark/.bash_history,consistency=cached",

    // Build directories
    "type=volume,src=dark_build,dst=/home/dark/app/_build",
    "type=volume,src=dark_dotesy,dst=/home/dark/.esy",
    "type=volume,src=dark_esy,dst=/home/dark/app/_esy",
    "type=volume,src=dark_fsharp_build,dst=/home/dark/app/fsharp-backend/Build",
    "type=volume,src=dark_lib,dst=/home/dark/app/lib",
    "type=volume,src=dark_node_modules,dst=/home/dark/app/node_modules",
    "type=volume,src=dark_queue_scheduler_target,dst=/home/dark/app/containers/queue-scheduler/target",
    "type=volume,src=dark_rust_cargo,dst=/home/dark/.cargo",
    "type=volume,src=dark_stroller_target,dst=/home/dark/app/containers/stroller/target",

    // VSCode extensions
    "type=volume,src=darklang-dark-extension-volume,dst=/home/dark/.vscode-server/extensions",
    "type=volume,src=darklang-dark-extension-volume-insiders,dst=/home/dark/.vscode-server-insiders/extensions"
  ],

  // See https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "dark",
  "containerUser": "dark",
  "updateRemoteUserUID": true,

  // `mounts` (above) expects some files to exist on the host, so create them.
  "initializeCommand": "bash ./scripts/support/initialize-vscode ${localEnv:USERPROFILE}${localEnv:HOME}",

  // Run one build-server, and keep it running for the life of the
  // devcontainer. This is in postStart rather than postAttach as postAttach would
  // add a new build-server each time and we only want one.
  "postStartCommand": "./scripts/support/vscode-post-start-command",

  // Show the build-server output in a terminal
  // Use -F as it the build-server might not have output by the time this starts
  "postAttachCommand": "tail -n 1000 -F rundir/logs/build-server.txt"
}
