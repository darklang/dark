Dict.empty_v0 = {}

Dict.filterMap_v0 {} (fun (key, value) -> 0) = {}
Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then Nothing else (Just (key ++ value))) = { c = "cz"; a = "ax"}
Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then blank else (Just (key ++ value))) = blank
Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then false else (Just (key ++ value))) = Test.typeError_v0 "Expected `fn` to return a Option, but it returned `false`"
Dict.filter_v1 { key1 = "val1"; key2 = "val2" } (fun (k, v) -> k == "key1") = { key1 = "val1"}
Dict.filter_v1 { key1 = "val1"; key2 = "val2" } (fun (k, v) -> k == blank) = blank
Dict.filter_v1 { key1 = 1; key2 = 3 }  (fun (k, v) -> v < 2) = { key1 = 1 }
Dict.filter_v1 { key1 = 1; key2 = blank; key3 = 3 }  (fun (k, v) -> v > 0) = { key3 = 3; key1 = 1}
Dict.filter_v1 {} (fun (k, v) -> 0) = {}
Dict.filter_v1 { a = 1; b = 2; c = 3 } (fun (k, v) -> 2) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `2`"
Dict.filter_v0 { key1 = 1; key2 = 3 }  (fun (k, v) -> v < 2) = { key1 = 1 }
Dict.filter_v0 { a = 1; b = 9; c = -20 } (fun (k, v) -> v >= 1) = { b = 9; a = 1 }
Dict.filter_v0 { a = 1; b = 2; c = 3 } (fun (k, v) -> match v with | 1 -> true | 2 -> false | 3 -> true) = { c = 3; a = 1 }
Dict.filter_v0 { a = 1; b = -1; c = -2; d = -3; e = 2; f = 3 } (fun (k, v) -> (match v with | v -> if v > -2 then true else false)) = { f = 3; e = 2; b = -1; a = 1 }
Dict.filter_v0 {} (fun (k, v) -> 0) = {}
Dict.filter_v0 { a = 1; b = 2; c = 3 } (fun (k, v) -> 2) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `2`"
Dict.filter_v0 { a = true; b = false; c = true } (fun (k, v) -> "a") = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `\"a\"`"
Dict.foreach_v0 { key1 = "val1"; key2 = "val2" } (fun x -> x ++ "_append") = { key2 = "val2_append"; key1 = "val1_append"}
Dict.foreach_v0 { key1 = 1; key2 = 2 } (fun x -> x + 1) = { key2 = 3; key1 = 2 }
Dict.foreach_v0 {} (fun (key, value) -> 0) = {}
Dict.foreach_v0 { a = "1"; b = "2" } (fun x -> x ++ "0") = { b = "20"; a = "10"}

Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["a";3]] = { b = 2 ; a = 3 }
Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["c";3]] = { c = 3 ; b = 2 ; a= 1 }
Dict.fromListOverwritingDuplicates_v0 [] = {}
Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["c";3;3]] = Test.typeError_v0 "All list items must be `[key, value]`"
Dict.fromListOverwritingDuplicates_v0 [[1;1]] = Test.typeError_v0 "Expected the argument `key` to be a string, but it was `1`"
Dict.fromListOverwritingDuplicates_v0 [["a";1];2;["c";3]] = Test.typeError_v0 "All list items must be `[key, value]`"
Dict.fromListOverwritingDuplicates_v0 [Test.typeError_v0 ""] = Test.typeError_v0 ""

Dict.fromList_v0 [["a";1];["b";2];["a";3]] = Nothing // duplicate key
Dict.fromList_v0 [["a";1];["b";2];["c";3]] = Just { c = 3; b = 2; a = 1 }
Dict.fromList_v0 [ ["Content-Length";0]; ["Server"; "dark"] ] = Just {``Content-Length`` = 0; Server = "dark"}
Dict.fromList_v0 [["a";1];["b";2];["c";3;3]] = Test.typeError_v0 "All list items must be `[key, value]`"
Dict.fromList_v0 [[1;1]] = Test.typeError_v0 "Expected the argument `key` to be a string, but it was `1`"
Dict.fromList_v0 [["a";1];2;["c";3]] = Test.typeError_v0 "All list items must be `[key, value]`"
Dict.fromList_v0 [] = Just {}
Dict.fromList_v0 [Test.typeError_v0 ""] = Test.typeError_v0 ""

Dict.get_v0 { key1 = "val1" } "key1" = "val1"

Dict.get_v1 { key1 = "val1" } "key1" = Just "val1"

Dict.get_v2 { key1 = "val1" } "key1" = Just "val1"

Dict.isEmpty_v0 { a = 1 } = false
Dict.isEmpty_v0 {} = true

Dict.keys_v0 { key1 = "val1" } = [ "key1"]

Dict.map_v0 { key1 = "val1"; key2 = "val2"; } (fun (k, x) -> k ++ x) = { key2 = "key2val2"; key1 = "key1val1" }
Dict.map_v0 { key1 = 5; key2 = 3; key3 = 3; } (fun (k, x) -> Bool.and_v0 (Int.greaterThanOrEqualTo_v0 x 1) (Int.lessThanOrEqualTo_v0 x 4)) = { key3 = true; key2 = true; key1 = false; }
Dict.map_v0 { a = 1; b = 2; } (fun (k, x) -> x + 1) = { b = 3; a = 2 }
Dict.map_v0 {} (fun (key, value) -> 0) = {}

Dict.member_v0 { otherKey = 5; someKey = 5 } "someKey" = true
Dict.member_v0 { otherKey = 5 } "someKey" = false

Dict.merge_v0 { key1 = "val1" } { key2 = "val2" } = { key2 = "val2"; key1 = "val1"}
Dict.merge_v0 { key1 = "val_l" } { key1 = "val_r" } = {key1 = "val_r"}
Dict.merge_v0 {key1 = "val_l"} {key1 = blank } = {key1 = "val_l"}
Dict.merge_v0 {} {} = {}

Dict.set_v0 { key1 = "val1before" } "key1" "val1after" = { key1 = "val1after" }
Dict.set_v0 { key1 = "val1" } "key2" "val2" = { key1 = "val1"; key2 = "val2" }
// Dicts do not currently enforce value typing, therefore the following tests pass
Dict.set_v0 { key1 = "val1" } "key2" 2 = { key1 = "val1"; key2 = 2 }
Dict.set_v0 { key1 = 1 } "key1" "changedTypeValue" = { key1 = "changedTypeValue" }

Dict.singleton_v0 "one" 1 = { one = 1 }
Dict.singleton_v0 "Content-Length" 1 = { ``Content-Length`` = 1 }

Dict.size_v0 { a = 3; b = 1; c = 1 } = 3
Dict.size_v0 {} = 0

Dict.toJSON_v0 { key1 = "val1"; key2 = "val2"; } = "{\n  \"key1\": \"val1\",\n  \"key2\": \"val2\"\n}"
Dict.toJSON_v0 { key1 = Test.infinity_v0 } = "{\n  \"key1\": \"Infinity\"\n}"
Dict.toJSON_v0 { key1 = Test.negativeInfinity_v0 } = "{\n  \"key1\": \"-Infinity\"\n}"
Dict.toJSON_v0 { key1 = Test.nan_v0 } = "{\n  \"key1\": \"NaN\"\n}"
Dict.toJSON_v0 { v = 1 } = "{\n  \"v\": 1\n}"
Dict.toJSON_v0 { v = 4503599627370497L } = "{\n  \"v\": 4503599627370497\n}"
Dict.toJSON_v0 { v = 4611686018427387903L } = "{\n  \"v\": 4611686018427387903\n}"
Dict.toJSON_v0 { v = 4611686018427387904L } = "{\n  \"v\": 4611686018427387904\n}"

Dict.toList_v0 { a = 1; b = 2; c = 3 } = [ [ "a"; 1 ], [ "b"; 2 ], [ "c"; 3 ]]
Dict.toList_v0 {} = []

Dict.values_v0 { key1 = "val1" } = ["val1"]

Dict.remove_v0 {key1 = "val1" ; key2 = "val2"} "key1" = {key2 = "val2"}
Dict.remove_v0 {key1 = "val1"} "key1" = {}
Dict.remove_v0 {key1 = "val1"} "key2" = {key1 = "val1"}
Dict.remove_v0 {} "key1" = {}
