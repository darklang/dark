Int.absoluteValue_v0 -5 = 5
Int.absoluteValue_v0 5 = 5

Int.clamp_v0 -5 -2 5 = -2 // in bounds
Int.clamp_v0 -3 -2 1 = -2  // below min
Int.clamp_v0 -5 1 1 = 1 // at limit
Int.clamp_v0 1 2 1 = 1 // above max
Int.clamp_v0 3 0 2 = 2 //  below in

Int.max_v0 5 6 = 6
Int.max_v0 10 1 = 10
Int.max_v0 -5 6 = 6
Int.max_v0 -100 -20000 = -100
Int.max_v0 250 -26 = 250

Int.min_v0 5 6 = 5
Int.min_v0 50 -10 = -10
Int.min_v0 -5 6 = -5
Int.min_v0 -100 -20000 = -20000
Int.min_v0 250 -26 = -26

Int.clamp_v0 -100 0 0 = 0
Int.clamp_v0 100 0 0 = 0
Int.clamp_v0 -100 0 -1 = -1
Int.clamp_v0 100 0 -1 = 0
Int.clamp_v0 -100 -1 0 = -1
Int.clamp_v0 100 -1 0 = 0
Int.clamp_v0 -100 1 0 = 0
Int.clamp_v0 100 1 0 = 1
Int.clamp_v0 -2147483647 250 -26 = -26
Int.clamp_v0 2147483647 250 -26 = 250

Int.negate_v0 -5 = 5
Int.negate_v0 5 = -5
Int.negate_v0 0 = 0
Int.negate_v0 -0 = 0

Int.remainder_v0 15 6 = Ok 3
Int.remainder_v0 20 8 = Ok 4
Int.remainder_v0 -20 8 = Ok -4
Int.remainder_v0 -20 -8 = Ok -4
Int.remainder_v0 -15 6 = Ok -3
Int.remainder_v0 5 0 = Error "`divisor` must be non-zero"
List.map_v0 (List.range_v0 -5 5) (fun v -> Int.remainder_v0 v -4) = [ Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1 ]
List.map_v0 (List.range_v0 -5 5) (fun v -> Int.remainder_v0 v 4) = [ Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1 ]

Int.mod_v0 15 5 = 0
Int.mod_v0 15 6 = 3
Int.mod_v0 0 15 = 0
Int.mod_v0 (-1) 2 = 1
Int.mod_v0 (-754) 53 = 41
Int.mod_v0 9999999999998L 3 = 2
Int.mod_v0 5 0 = Test.typeError_v0 "Expected the argument `b` to be positive, but it was `0`"
Int.mod_v0 5 (-5) = Test.typeError_v0 "Expected the argument `b` to be positive, but it was `-5`"
List.map_v0 (List.range_v0 (-5) 5) (fun v -> Int.mod_v0 v 4) = [3;0;1;2;3;0;1;2;3;0;1]

15 % 5 = 0
5 % 0 = Test.typeError_v0 "Expected the argument `b` to be positive, but it was `0`"
5 % (-5) = Test.typeError_v0 "Expected the argument `b` to be positive, but it was `-5`"
List.map_v0 (List.range_v0 -5 5) (fun v -> v % 4) = [ 3; 0; 1; 2; 3; 0; 1; 2; 3; 0; 1 ]

Int.power_v0 8 5 = 32768
Int.power_v0 0 1 = 0
Int.power_v0 1 0 = 1
Int.power_v0 1000 0 = 1
Int.power_v0 -8 5 = -32768
Int.power_v0 200 20 = Test.typeError_v0 "Error raising to exponent"
Int.power_v0 200 7 = 12800000000000000L
Int.power_v0 1 2147483649I = 1
Int.power_v0 -1 2147483649I = -1

5 ^ 2 = 25
-8 ^ 5 = -32768
50 ^ 2 = 2500

Int.greaterThan_v0 20 1 = true
20 > 1 = true

0 >= 1 = false
1 >= 0 = true
6 >= 1 = true
6 >= 8 = false
-5 >= -20 = true
-20 >= -1 = false
-20 >= -20 = true

Int.greaterThanOrEqualTo_v0 0 1 = false
Int.greaterThanOrEqualTo_v0 1 0 = true
Int.greaterThanOrEqualTo_v0 6 1 = true
Int.greaterThanOrEqualTo_v0 6 8 = false
Int.greaterThanOrEqualTo_v0 -5 -20 = true
Int.greaterThanOrEqualTo_v0 -20 -1 = false
Int.greaterThanOrEqualTo_v0 -20 -20 = true

6 <= 8 = true
10 <= 1 = false
0 <= 1 = true
1 <= 0 = false
-100 <= 22544 = true
-999 <= -9999 = false
-8888 <= -8888 = true

Int.lessThanOrEqualTo_v0 6 8 = true
Int.lessThanOrEqualTo_v0 10 1 = false
Int.lessThanOrEqualTo_v0 0 1 = true
Int.lessThanOrEqualTo_v0 1 0 = false
Int.lessThanOrEqualTo_v0 -100 22544 = true
Int.lessThanOrEqualTo_v0 -999 -9999 = false
Int.lessThanOrEqualTo_v0 -8888 -8888 = true

Int.lessThan_v0 6 8 = true
Int.lessThan_v0 10 1 = false
Int.lessThan_v0 0 1 = true
Int.lessThan_v0 1 0 = false
Int.lessThan_v0 -100 22544 = true
Int.lessThan_v0 -999 -9999 = false
Int.lessThan_v0 -8888 -8888 = false
6 < 8 = true
10 < 1 = false
0 < 1 = true
1 < 0 = false
-100 < 22544 = true
-999 < -9999 = false
-8888 < -8888 = false

Int.sqrt_v0 4 = 2.0
Int.sqrt_v0 100 = 10.0
Int.sqrt_v0 86 = 9.273618495495704

Int.toFloat_v0 2 = 2.0
Int.toFloat_v0 955656 = 955656.0
Int.toFloat_v0 -10 = -10.0

Int.add_v0 10 9 = 19
Int.add_v0 88 9 = 97
Int.add_v0 -1 2 = 1
Int.add_v0 1 0 = 1
Int.add_v0 -55 55 = 0

-2000 + 1950 = -50
-1993 + 2000 = 7

Int.subtract_v0 10 9 = 1
Int.subtract_v0 88 9 = 79
Int.subtract_v0 0 1 = -1
Int.subtract_v0 1 0 = 1
Int.subtract_v0 -55 -55 = 0

2000 - 1950 = 50
-1993 - -2000 = 7

Int.multiply_v0 8 8 = 64
Int.multiply_v0 5145 5145 = 26471025
Int.multiply_v0 1 1.0 = Test.typeError_v0 "Int::multiply was called with a Float (1.), but `b` expected a Int. Try using Float::multiply, or use Float::truncate to truncate Floats to Ints.""
8 * 8 = 64

Int.divide_v0 10 5 = 2
Int.divide_v0 17 3 = 5
Int.divide_v0 -8 5 = -1
Int.divide_v0 0 1 = 0
Int.divide_v0 1 0 = Test.typeError_v0 "Division by zero"
(List.range_v0 1 100) |> List.map_v0 (fun x -> Int.random_v0  1  5) |> List.map_v0 (fun x -> (x >=  1) && (x <= 5)) |> List.member_v0 false = false
(List.range_v0 1 100) |> List.map_v0 (fun x -> Int.random_v0 10 20) |> List.map_v0 (fun x -> (x >= 10) && (x <= 20)) |> List.member_v0 false = false
(List.range_v0 1 100) |> List.map_v0 (fun x -> Int.random_v0 10 30) |> List.map_v0 (fun x -> (x >= 10) && (x <= 30)) |> List.member_v0 false = false
(List.range_v0 1 5) |> List.map_v0 (fun x -> Int.random_v1  1  2) |> List.map_v0 (fun x -> (x >=  1) && (x <=  2)) = [true; true; true; true; true]
(List.range_v0 1 5) |> List.map_v0 (fun x -> Int.random_v1 10 20) |> List.map_v0 (fun x -> (x >= 10) && (x <= 20)) = [true; true; true; true; true]
(List.range_v0 1 5) |> List.map_v0 (fun x -> Int.random_v1  2  1) |> List.map_v0 (fun x -> (x >=  1) && (x <=  2)) = [true; true; true; true; true]
(List.range_v0 1 5) |> List.map_v0 (fun x -> Int.random_v1 20 10) |> List.map_v0 (fun x -> (x >= 10) && (x <= 20)) = [true; true; true; true; true]

Int.sum_v0 [1;2] = 3
Int.sum_v0 [1.0;2] = Test.typeError_v0 "Expected the argument `a` to be a list of ints, but it was `[ \n  1., 2\n]`"


Int.parse_v0 "0" = Ok 0
Int.parse_v0 "1" = Ok 1
Int.parse_v0 " 1" = Ok 1
Int.parse_v0 "1 " = Ok 1
Int.parse_v0 "+1" = Ok 1
Int.parse_v0 " +1 " = Ok 1
Int.parse_v0 "-1" = Ok -1
Int.parse_v0 "078" = Ok 78 // "octal" format ignored
Int.parse_v0 "-00001" = Ok -1
Int.parse_v0 "-10001" = Ok -10001
Int.parse_v0 "-4611686018427387904" = Ok -4611686018427387904L // OCaml lower limit
Int.parse_v0 "-4611686018427387905" = Ok -4611686018427387905L // past the OCaml upper limit
Int.parse_v0 "-9223372036854775808" = Ok -9223372036854775808L // .NET lower limit
Int.parse_v0 "-9223372036854775809" = Error "Expected to parse string with only numbers, instead got \"-9223372036854775809\""
Int.parse_v0 "4611686018427387903" = Ok 4611686018427387903L // OCaml upper limit
Int.parse_v0 "4611686018427387904" = Ok 4611686018427387904L // past the OCaml upper limit
Int.parse_v0 "9223372036854775807" = Ok 9223372036854775807L // .NET upper limit
Int.parse_v0 "9223372036854775808" = Error "Expected to parse string with only numbers, instead got \"9223372036854775808\""
Int.parse_v0 "1 2 3" = Error "Expected to parse string with only numbers, instead got \"1 2 3\""
Int.parse_v0 "+ 1" = Error "Expected to parse string with only numbers, instead got \"+ 1\""
Int.parse_v0 "- 1" = Error "Expected to parse string with only numbers, instead got \"- 1\""
Int.parse_v0 "0xA" = Error "Expected to parse string with only numbers, instead got \"0xA\""
Int.parse_v0 "0x123" = Error "Expected to parse string with only numbers, instead got \"0x123\""
Int.parse_v0 "0b0100" = Error "Expected to parse string with only numbers, instead got \"0b0100\""
Int.parse_v0 "pi" = Error "Expected to parse string with only numbers, instead got \"pi\""
Int.parse_v0 "Math.pi" = Error "Expected to parse string with only numbers, instead got \"Math.pi\""
Int.parse_v0 "1.23E+04" = Error "Expected to parse string with only numbers, instead got \"1.23E+04\""
Int.parse_v0 "9223372036854775808" = Error "Expected to parse string with only numbers, instead got \"9223372036854775808\""
Int.parse_v0 "" = Error "Expected to parse string with only numbers, instead got \"\""
Int.parse_v0 "1I" = Error "Expected to parse string with only numbers, instead got \"1I\""
Int.parse_v0 "one" = Error "Expected to parse string with only numbers, instead got \"one\""
Int.parse_v0 "XIV" = Error "Expected to parse string with only numbers, instead got \"XIV\""