List.all_v0 [] (fun item -> item < 3) = true
List.all_v0 [2] (fun item -> item < 3) = true
List.all_v0 [1; 2] (fun item -> item < 3) = true
List.all_v0 [4] (fun item -> item < 3) = false
List.all_v0 [1; 4] (fun item -> item < 3) = false

List.append_v0 [1; 2; 3] [4; 5; 6] = [1; 2; 3; 4; 5; 6]
List.append_v0 [3;4] [5;6] = [3;4;5;6]
List.append_v0 [1] [2] = [1;2]
List.append_v0 [] [] = []

List.contains_v0 [1;2;3] 2 = true
List.contains_v0 [1;2;3] 4 = false
List.contains_v0 [] 1 = false

List.drop_v0 ["a"; "b"; "c"; "d"] -3 = ["a"; "b"; "c"; "d"]
List.drop_v0 ["a"; "b"; "c"; "d"] 3 = ["d"]
List.drop_v0 [1;2;3;4] -1 = [ 1; 2; 3; 4 ]
List.drop_v0 [1;2;3;4] 0 = [ 1; 2; 3; 4 ]
List.drop_v0 [1;2;3;4] 440737095L = []
List.drop_v0 [1;2;3;4] 1184467440737095L = []
List.drop_v0 [1;2;3;4] 2 = [ 3; 4 ]
List.drop_v0 [1;2;3;4] 4 = []
List.drop_v0 [1;2;3;4] 5 = []
List.drop_v0 [3; 3; 3] 0 = [3; 3; 3]
List.drop_v0 [5; 4; 3; 2; 1]  5 = []
List.drop_v0 [5] 4 = []
List.drop_v0 [] 4 = []

List.dropWhile_v0 [1;2;3;4] (fun item -> 0 - 1) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `-1`"
List.dropWhile_v0 [1;2;3;4] (fun item -> item < 3) = [ 3; 4 ]
List.dropWhile_v0 [1;2;3;4] (fun item -> item >= 1) = []
List.dropWhile_v0 [1;5;2;2] (fun item -> item < 3) = [ 5; 2; 2 ]
List.dropWhile_v0 [] (fun item -> item < 3) = []

List.empty_v0 = []

List.filter_v0 [-20; 5; 9;] (fun x -> x < 1) = [-20]
List.filter_v0 [-20; 5; 9;] (fun x -> x > 1) = [5; 9]
List.filter_v0 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> false | 3 -> true) = [ 1; 3]
List.filter_v0 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > -2 then true else false)) = [1; -1; 2; 3; 4]
List.filter_v0 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > 2 then true else false)) = [3; 4]
List.filter_v0 [1;2;3] (fun item -> (match item with | item -> if item > 2 then true else false)) = [3]
List.filter_v0 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> blank | 3 -> true) = [1; 3]
List.filter_v0 [1;2;3] (fun item -> 2) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `2`"
List.filter_v0 [true;false;true] (fun item -> "a") = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `\"a\"`"
List.filter_v0 [] (fun item -> "a") = []

List.filter_v1 [-20; 5; 9;] (fun x -> x < 1) = [-20]
List.filter_v1 [-20; 5; 9;] (fun x -> x > 20) = []
List.filter_v1 [-20; 5; 9;] (fun x -> true) = [-20; 5; 9]
List.filter_v1 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > -2 then true else false)) = [1; -1; 2; 3; 4]
List.filter_v1 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > 2 then true else false)) = [3; 4]
List.filter_v1 [] (fun x -> x < 20) = []
List.filter_v1 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> blank | 3 -> true) = blank
List.filter_v1 [1;2;3] (fun item -> "a") = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `\"a\"`"
List.filter_v1 [true;false;true] (fun item -> "a") = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `\"a\"`"
List.filter_v1 [] (fun item -> "a") = []

List.filter_v2 [1;2;3] (fun item -> match item with | 1 -> Nothing | 2 -> false | 3 -> true) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `Nothing`"
List.filter_v2 [true;false;true] (fun item -> "a") = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `\"a\"`"
List.filter_v2 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> blank | 3 -> true) = blank
List.filter_v2 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> false | 3 -> true) = [ 1; 3 ]
List.filter_v2 [] (fun item -> true) = []
List.filter_v2 [-20; 5; 9;] (fun x -> x > 20) = []
List.filter_v2 [] (fun item -> "a") = []

List.filterMap_v0 [1;2;3] (fun item -> if item == 2 then Nothing else (Just (item * 2))) = [ 2; 6 ]
List.filterMap_v0 [1;2;3] (fun item -> if item == 2 then blank else (Just (item * 2))) = blank
List.filterMap_v0 [1;2;3] (fun item -> if item == 2 then false else (Just (item * 2))) = Test.typeError_v0 "Expected `fn` to return a Option, but it returned `false`"
List.filterMap_v0 [] (fun item -> 0) = []

List.findFirst_v0 [1;2;3] (fun x -> x > 5) = null
List.findFirst_v0 [] (fun x -> x) = null
List.findFirst_v0 [1;2;3;1;4] (fun x -> x > 1 ) =  2
List.findFirst_v0 [0; 5; -6; -10; ] (fun x -> x < 0) = -6
List.findFirst_v0 [1; -33; 3; -2; 12] (fun x -> (x < 0 && x % 2 = 0)) = -2

List.findFirst_v1 [1;2;3] (fun x -> x > 5) = Nothing
List.findFirst_v1 [] (fun x -> x) = Nothing
List.findFirst_v1 [1;2;3;1;4] (fun x -> x > 1 ) = Just 2
List.findFirst_v1 [0; 5; -6; -10; ] (fun x -> x < 0) = Just -6
List.findFirst_v1 [1; -33; 3; -2; 12] (fun x -> (x < 0 && x % 2 = 0)) = Just -2

List.findFirst_v2 [1;2;3] (fun x -> x > 5) = Nothing
List.findFirst_v2 [] (fun x -> x) = Nothing
List.findFirst_v2 [1;2;3;1;4] (fun x -> x > 1 ) = Just 2
List.findFirst_v2 [0; 5; -6; -10; ] (fun x -> x < 0) = Just -6
List.findFirst_v2 [1; -33; 3; -2; 12] (fun x -> (x < 0 && x % 2 = 0)) = Just -2

List.flatten_v0 [1;2;3] = Test.typeError_v0 "Flattening non-lists"
List.flatten_v0 [[1];[2];[3]] = [ 1; 2; 3 ]
List.flatten_v0 [[1];[[2;3]]] = [ 1; [ 2; 3 ] ]
List.flatten_v0 [[[]]] = [ [] ]
List.flatten_v0 [[]] = []
List.flatten_v0 [] = []

List.fold_v0 ["a"; "b"; "c"; "d"] "x" (fun accum curr -> accum ++ curr) = "xabcd"
List.fold_v0 [1;2;3;4;5] [] (fun accum curr -> List.pushBack_v0 accum (curr + 1)) = [2;3;4;5;6]
List.fold_v0 [] [] (fun accum curr -> 5) = []

List.foreach_v0 [1;2;3] (fun x -> x + 1) = [2;3;4]
List.foreach_v0 [] (fun x -> x + 1) = []
List.foreach_v0 [Test.typeError_v0 "test"] (fun x -> x) = [Test.typeError_v0 "test"]

List.getAt_v0 ["a"; "b"; "c"; "d"] -1 = Nothing
List.getAt_v0 [1; 2; 3; 4] 4611686018427387902I = Nothing
List.getAt_v0 [1;2;3;4] 0 = Just 1
List.getAt_v0 [1;2;3;4] 4 = Nothing
List.getAt_v0 [3; 3; 3] -5 = Nothing
List.getAt_v0 [] 5 = Nothing
List.getAt_v0 [3; 3; 3] 2147483648I = Nothing

List.getAt_v1 ["a"; "b"; "c"; "d"] -1 = Nothing
List.getAt_v1 [0] 1 = Nothing
List.getAt_v1 [] 1 = Nothing
List.getAt_v1 [1; 2; 3; 4] 6018427387902I = Nothing
List.getAt_v1 [1; 2; 3; 4] 4611686018427387902I = Nothing
List.getAt_v1 [1;2;3;4] 0 = Just 1
List.getAt_v1 [3; 3; 3] -5 = Nothing
List.getAt_v1 [3; 3; 3] 2147483648I = Nothing

List.head_v0 [1; 2; 3] = 1
List.head_v0 [Test.typeError_v0 "test"] = Test.typeError_v0 "test"
List.head_v0 [] = null


List.head_v1 [Test.typeError_v0 "test"] = ((Just 5) |> Option.map_v0 (fun x -> Test.typeError_v0 "test"))
List.head_v1 [1; 2; 3] = Just 1
List.head_v1 [] = Nothing

List.head_v2 [1; 2; 3] = Just 1
List.head_v2 [Test.typeError_v0 "test"] = Test.typeError_v0 "test"
List.head_v2 [] = Nothing

List.indexedMap_v0 [3;2;1] (fun i v -> v - i) = [ 3; 1; -1 ]
List.indexedMap_v0 [] (fun i v -> v - i) = []
List.indexedMap_v0 [3;2;1] (fun i v -> i) = [0; 1; 2]

List.interleave_v0 [1;2;3] [4;5;6] = [ 1; 4; 2; 5; 3; 6 ]
List.interleave_v0 [1;2;3] [4] = [ 1; 4; 2; 3 ]
List.interleave_v0 [1;2;3] [] = [ 1; 2; 3 ]
List.interleave_v0 [1] [4;5;6] = [ 1; 4; 5; 6 ]
List.interleave_v0 [] [4;5;6] = [ 4; 5; 6 ]
List.interleave_v0 [] [] = []
List.interleave_v0 ["a"; "b"; "c"] [0] = ["a"; 0; "b"; "c"]

List.interpose_v0 [1;2;3] 5 = [ 1; 5; 2; 5; 3 ]
List.interpose_v0 [1] 5 = [ 1 ]
List.interpose_v0 [] 5 = []
List.interpose_v0 ["a"; "b"; "c"] 0 = ["a"; 0; "b"; 0; "c"]

List.isEmpty_v0 [1] = false
List.isEmpty_v0 [] = true

List.last_v0 [1; 2; 3] = 3
List.last_v0 [Test.typeError_v0 "test"] = Test.typeError_v0 "test"
List.last_v0 [] = null

List.last_v1 [Test.typeError_v0 "test"] = ((Just 5) |> Option.map_v0 (fun x -> Test.typeError_v0 "test"))
List.last_v1 [1; 2; 3] = Just 3
List.last_v1 [] = Nothing

List.last_v2 [1; 2; 3] = Just 3
List.last_v2 [Test.typeError_v0 "test"] = Test.typeError_v0 "test"
List.last_v2 [] = Nothing

List.length_v0 [1;2;3] = 3
List.length_v0 [] = 0

List.map_v0 (List.range_v0 1 5) (fun x -> x + 1) = [2; 3; 4; 5; 6]
List.map_v0 [1; 2; 3] (fun x -> Bool.and_v0 (Int.greaterThanOrEqualTo_v0 x 0) (Int.lessThanOrEqualTo_v0 x 4)) = [true; true; true]
List.map_v0 [1; 2] (fun x -> x + 1) = [2; 3]
List.map_v0 [] (fun x -> x + 1) = []

List.map2_v0 [10;20;30] [1;2;3] (fun a b -> a - b) = Just [ 9; 18; 27 ]
List.map2_v0 [10;20] [1;2;3] (fun a b -> a - b) = Nothing
List.map2_v0 [] [] (fun a b -> a - b) = Just []

List.map2shortest_v0 [10;20;30] [1;2;3] (fun a b -> a - b) = [ 9; 18; 27 ]
List.map2shortest_v0 [10;20] [1;2;3] (fun a b -> a - b) = [ 9; 18 ]
List.map2shortest_v0 [] [1;2;3] (fun a b -> a - b) = []
List.map2shortest_v0 [1;2;3] [] (fun a b -> a - b) = []

List.member_v0 [1;2;3] 2 = true
List.member_v0 [1;2;3] 4 = false
List.member_v0 [] 1 = false

List.pushBack_v0 [2;3] 1 = [2;3;1]
List.pushBack_v0 [] 1 = [1]

List.push_v0 [2;3] 1 = [1;2;3]
List.push_v0 [] 1 = [1]

List.randomElement_v0 [1] = Just 1
List.randomElement_v0 [Test.typeError_v0 "test"] = Test.typeError_v0 "test"
List.randomElement_v0 [] = Nothing

List.range_v0 -1 0 = [-1; 0]
List.range_v0 -5 5 = [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4; 5;]
List.range_v0 5 0 = []

List.repeat_v0 0 1 = []
List.repeat_v0 1 "a" = ["a"]
List.repeat_v0 1 1 = [1]
List.repeat_v0 11844674407356L 1 = Test.typeError_v0 "Expected the argument `times` to be less than 2147483647, but it was `11844674407356`"
List.repeat_v0 3 1 = [1; 1; 1]
List.repeat_v0 3 3 = [3; 3; 3]
List.repeat_v0 5 "a" = ["a"; "a"; "a"; "a"; "a"]
List.repeat_v0 -4 "a" = Test.typeError_v0 "Expected the argument `times` to be positive, but it was `-4`"
List.reverse_v0 ["a"; "b"; "c"; "d"] = ["d";"c";"b";"a"]
List.reverse_v0 [5; 4; 3; 2; 1] = [1;2;3;4;5]
List.reverse_v0 [] = []

List.singleton_v0 1 = [ 1 ]
List.singleton_v0 blank = blank

List.sortBy_v0 [6;2;8;3] (fun x -> 0 - x) = [8;6;3;2]
List.sortBy_v0 [] (fun x -> 0 - x) = []

List.sort_v0 ["6";"2";"8";"3"] = ["2";"3";"6";"8"]
List.sort_v0 [6;2;8;3] = [2;3;6;8]
List.sort_v0 [] = []

List.sortByComparator_v0 [3;1;2] (fun a b -> 0.1) = Error "Expected `fn` to return -1, 0, 1, but it returned `0.1`"
List.sortByComparator_v0 [3;1;2] (fun a b -> 3) = Error "Expected `fn` to return -1, 0, 1, but it returned `3`"
List.sortByComparator_v0 [Test.typeError "㧑༷釺";1;2;3] (fun a b -> 1) = Error "Expected `fn` to return -1, 0, 1, but it returned `<error>`"
List.sortByComparator_v0 [3;1;2] (fun a b -> if Int.lessThan_v0 a b then -1 else 1) = Ok [ 1; 2; 3 ]
List.sortByComparator_v0 [] (fun a b -> if Int.lessThan_v0 a b then -1 else 1) = Ok []
List.sortByComparator_v0 [3;1;2;67;3;-1;6;3;5;6;2;5;63;2;3;5;-1;-1;-1] (fun a b -> if Int.lessThan_v0 a b then -1 else 1) = Ok [-1; -1; -1; -1; 1; 2; 2; 2; 3; 3; 3; 3; 5; 5; 5; 6; 6; 63; 67]

List.tail_v0 [10; 20; 30; 40] = Just [20; 30; 40]
List.tail_v0 [] = Nothing

List.take_v0 ["a"; "b"; "c"; "d"] -1 = []
List.take_v0 ["a"; "b"; "c"; "d"] 2147483648I = ["a"; "b"; "c"; "d"]
List.take_v0 ["a"; "b"; "c"; "d"] 3 = ["a"; "b"; "c"]
List.take_v0 [3; 3; 3] 0 = []
List.take_v0 [5; 4; 3; 2; 1]  5 = [5; 4; 3; 2; 1]
List.take_v0 [5] 4 = [5]
List.take_v0 [] 4 = []

List.takeWhile_v0 [1;2;3;4] (fun item -> 0 - 1) = Test.typeError_v0 "Expected `fn` to return a Bool, but it returned `-1`"
List.takeWhile_v0 [1;2;3;4] (fun item -> item < 1) = []
List.takeWhile_v0 [1;2;3;4] (fun item -> item < 3) = [ 1; 2 ]
List.takeWhile_v0 [1;5;2;2] (fun item -> item < 3) = [ 1 ]
List.takeWhile_v0 [] (fun item -> item < 3) = []

// it isn't specified which is the right value to keep when there are duplicates
List.uniqueBy_v0 [1;2;3;4] (fun x -> Int.divide_v0 x 2) = [ 1; 2; 4 ]
List.uniqueBy_v0 [1;2;3;4] (fun x -> x) = [ 1; 2; 3; 4 ]
List.uniqueBy_v0 [1;1;1;1] (fun x -> x) = [ 1 ]
List.uniqueBy_v0 [7;42;7;2;10] (fun x -> x) = [ 2; 7; 10; 42 ]
List.uniqueBy_v0 [] (fun x -> x) = []

List.unzip_v0 [[1;10];10;[3;30]] = Test.typeError_v0 "Expected the argument `pairs` to be a list with exactly two values, but it was `10`. It is of type Int instead of `List`"
List.unzip_v0 [[1;10];[2;20];[3;30;40]] = Test.typeError_v0 "Expected the argument `pairs` to be a list with exactly two values, but it was `[ \n  3, 30, 40\n]`. It has length 3 but should have length 2"
List.unzip_v0 [[]] = Test.typeError_v0 "Expected the argument `pairs` to be a list with exactly two values, but it was `[]`. It has length 0 but should have length 2"
List.unzip_v0 [[1;10];[2;20];[3;30]] = [ [ 1; 2; 3 ]; [ 10; 20; 30 ] ]
List.unzip_v0 [[10;6]] = [[10],[6]]

List.zipShortest_v0 [10;20;30] [1;2;3] = [ [ 10; 1 ]; [ 20; 2 ]; [ 30; 3 ] ]
List.zipShortest_v0 [10;20] [1;2;3] = [ [ 10; 1 ]; [ 20; 2 ] ]
List.zipShortest_v0 ["b";"v";"z"] [] = []
List.zipShortest_v0 [] ["b";"v";"z"] = []
List.zipShortest_v0 [Test.typeError_v0 ""] [Just ""] = Test.typeError_v0 ""

List.zip_v0 [10;20;30] [1;2;3] = Just [ [ 10; 1 ]; [ 20; 2 ]; [ 30; 3 ] ]
List.zip_v0 [10;20] [1;2;3] = Nothing
List.zip_v0 [] [] = Just []
List.zip_v0 [Test.typeError_v0 ""] [Just ""] = Test.justWithTypeError_v0 ""
