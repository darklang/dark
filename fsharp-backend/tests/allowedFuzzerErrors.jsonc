{
  // If `null`, test anything. If `"fn"`, only test fn
  "functionToTest": null,
  //"functionToTest": "Float::clamp",

  // tests against these fns are note generated
  "knownDifferingFunctions": [
    // These use a different sort order in OCaml
    "List::sort",
    "List::sortBy",

    // Known formatting differences
    "Object::toJSON",
    "Object::toJSON_v1",
    "Dict::toJSON",
    "Dict::toJSON_v1",

    // Sorting odities, these are fine
    "Dict::toList",
    "Dict::keys",
    "Dict::values",

    // OCaml seems to trim wrong here,
    "String::trim",
    "String::trimEnd",
    "String::trimStart",

    // .NET doesn't handle "full" case mapping
    "String::toUppercase_v1",
    "String::toLowercase_v1",

    // The lambda gives the same value for all elements,
    // and we don't guarantee which one wins
    "List::uniqueBy",

    // OCaml returns a DError on invalid UTF-8 strings, while F# returns a Result.Error
    "JSON::parse_v1" // FSTODO make signature the same
  ],
  "knownErrors": [
    // Expected form:
    [
      // comments are allowed
      "function name or regex",
      "actual (F#) error message (regex)",
      "expected (OCaml) error message (regex)"
    ],
    // -----------------------------
    // Dict::fromList.*
    // -----------------------------
    [
      // The old message was better, but this will go away with tuples so who cares
      "Dict::fromList.*",
      "All list items must be `\\[key, value\\]`",
      "Expected every value within the `entries` argument passed to `Dict::fromList.*` to be a `\\[key, value\\]` list. However, that is not the case for the value at index \\d+: `.*`. It is of type `.*` instead of `List`."
    ],
    [
      // The old message was better, but this will go away with tuples so who cares.
      // There's two versions here, one is missing the word "is"
      "Dict::fromList.*",
      "Expected the argument `key` to be a string, but it was `.*`",
      "Expected every value within the `entries` argument passed to `Dict::fromList.*` to be a `\\[key, value\\]` list. However, that is not the case for the value at index \\d+: `.*`. Keys must be `String`s but the type of `.*`."
    ],
    [
      // The old message was better, but this will go away with tuples so who cares
      "Dict::fromList.*",
      "All list items must be `\\[key, value\\]`",
      "Expected every value within the `entries` argument passed to `Dict::fromList.*` to be a `\\[key, value\\]` list. However, that is not the case for the value at index \\d+: `.*`. It has length \\d+ but must have length 2."
    ],
    // -----------------------------
    // Int::divide
    // -----------------------------
    ["Int::divide", "Division by zero", "Unknown Err: \\(Division_by_zero\\)"],
    // -----------------------------
    // List::repeat
    // -----------------------------
    [
      "List::repeat",
      "Expected the argument `times` to be positive, but it was `(?<arg>.*)`",
      "Unknown Err: \\(Invalid_argument \"List.init (?<arg>.*)\"\\)"
    ],
    // -----------------------------
    // Http::setCookie_v2
    // -----------------------------
    [
      "Http::setCookie_v2",
      "Keys must be `Expires`, `Max-Age`, `Domain`, `Path`, `Secure`, `HttpOnly`, and/or `SameSite`, but one of the keys was (?<result>.*)",
      "Expected the params dict passed to `Http::setCookie_v2` to only contain the keys `Expires`, `Max-Age`, `Domain`, `Path`, `Secure`, `HttpOnly`, and/or `SameSite`, but one of the keys was `(?<result>.*)`."
    ],
    // -----------------------------
    // List::sortByComparator
    // -----------------------------
    [
      // the different impls run comparisons in a different order, if it fails, it may fail on a different element
      "List::sortByComparator",
      "Expected `fn` to return -1, 0, 1, but it returned `.*`",
      "`fn` must return one of -1, 0, 1, but returned .*: .*"
    ],
    // -----------------------------
    // List::unzip
    // -----------------------------
    [
      // tuples coming soon, bad error doesn't matter
      "List::unzip",
      "Expected the argument `pairs` to be a list with exactly two values, but it was `(?<pairs>.*)`. It has length (?<len>\\d+) but should have length 2",
      "Expected every value within the `pairs` argument passed to `List::unzip` to be a list with exactly two values. However, that is not the case for the value at index \\d+: (?<pairs>.*). It has length (?<len>\\d+) but must have length 2."
    ],
    // -----------------------------
    // Int::mod
    // -----------------------------
    [
      "(Int::mod|%)",
      "Expected the argument `(?<arg>.*)` to be positive, but it was `(?<result>.*)`",
      "Expected the argument `(?<arg>.*)` argument passed to `.*` to be positive, but it was `(?<result>.*)`."
    ],

    // -----------------------------
    // JSON
    // -----------------------------
    [
      // Line is off by one - ocaml starts counting at 1
      "(JSON::parse|JSON::read).*",
      "Unexpected character encountered while parsing (?:number|value): .*. Path '', line \\d+, position (?<pos>\\d+).",
      "Json Err: Line \\d+, bytes (?<pos>\\d+)-\\d+:\nInvalid token '.*'"
    ],
    [
      // Line is off by one - ocaml starts counting at 1
      "(JSON::parse|JSON::read).*",
      "Unexpected end while reading JSON: .*. Path '', line \\d+, position (?<pos>\\d+).",
      "Json Err: Line \\d+, bytes (?<pos>\\d+)-\\d+:\nInvalid token '.*'"
    ],
    [
      "(JSON::parse|JSON::read).*",
      "JSON string was empty",
      "Json Err: Blank input data"
    ],
    [
      "(JSON::parse|JSON::read).*",
      ".* is an invalid start of a value..*",
      "Json Err: .* Invalid token .*"
    ],
    [
      "(JSON::parse|JSON::read).*",
      ".* is an invalid JSON literal..*",
      "Json Err: .* Invalid token .*"
    ],
    [
      // JSON::parse in ocaml actually has the _v0 in the name
      "JSON::parse",
      "(?<name>.*) was called with a .* \\(.*\\), but `(?<arg>.*)` expected a .*.",
      "(?<name>.*)_v0 was called with the wrong type to parameter: (?<arg>.*)"
    ],
    // -----------------------------
    // Incorrect argument
    // -----------------------------
    [
      "String::toFloat",
      "Expected the argument `.*` to be a string representation of an IEEE float, but it was `.*`",
      "Expected a string representation of an IEEE float"
    ],
    [
      "Float::clamp",
      "clamp requires arguments to be valid numbers",
      ".*Internal Float.clamp exception: \\(\\\"clamp requires \\[min <= max\\]\\\" \\(min .*\\) \\(max .*\\)\\).*"
    ],
    [
      "Float::sum",
      "Expected the argument `.*` to be a list of floats, but it was `.*`",
      "Sum expects you to pass a list of floats"
    ],
    [
      "String::pad.*",
      "Expected the argument `padWith` to be 1 character long, but it was `\"(?<arg>.*)\"`",
      "Expected the argument `padWith` passed to `String::padEnd` to be one character long. However, `\"(?<arg>.*)\"` is \\d+ characters long."
    ],
    [
      ".*",
      "(?<name>.*) was called with a .* \\(.*\\), but `(?<arg>.*)` expected a .*.",
      "(?<name>.*) was called with the wrong type to parameter: (?<arg>.*)"
    ],
    [
      "String::fromList",
      "Expected `l` to be a list of Characters, but the list contained `.*`",
      "expected a char"
    ],
    [
      ".*",
      "Expected the argument `value` to be a string, but it was `.*`",
      "expecting str"
    ],
    [
      "(Int::multiply|Int::subtract|Int::divide|Int::add|Int::lessThan|Int::greaterThan|Int::lessThanOrEquals|Int::greaterThanOrEquals|Int::sqrt|\\+|\\-|\\*|\\/|\\<|\\>|<=|>=)",
      "(?<fn>.*) was called with a Float \\((?<value>.*)\\), but `.*` expected a Int. Try using Float::.*, or use Float::truncate to truncate Floats to Ints.",
      "The .* param \\((?<value>.*)\\) is a Float, but (?<fn>.*) only works on Ints. Use Float::.* to .* Floats or use Float::truncate to truncate Floats to Ints."
    ],
    [
      "Int::sqrt",
      "(?<fn>.*) was called with a Float \\((?<value>.*)\\), but `.*` expected a Int. Try using Float::.*, or use Float::truncate to truncate Floats to Ints.",
      "The param \\((?<value>.*)\\) is a Float, but (?<fn>.*) only works on Ints. Use Float::.* to .* Floats or use Float::truncate to truncate the Float to an Int."
    ],
    [
      "(Int::add|\\+)",
      ".* was called with a Str .*, but `(a|b)` expected a Int. Use .* to concatenate",
      "The (first|second) param .* is a String, but .* only works on Ints. Use .* or String::append to join Strings or parse Strings to Ints with String::toInt."
    ],
    [
      "(Int::add|\\+)",
      "(?<fn>.*) was called with a Float ((?<value>.*)), but `.*` expected a Int.",
      "The .* param ((?<value>.*)) is a Float, but (?<fn>.*) only works on Ints.  Use \\+\\+ or String::append to join Strings or parse Strings to Ints with String::toInt."
    ],

    // -----------------------------
    // Incorrect return type from a lambda
    // -----------------------------
    [
      ".*",
      "Expected `fn` to return .*, but it returned .*",
      "Expected .* to return .*"
    ],
    [
      ".*",
      "Expected `fn` to return .*, but it returned .*",
      "Expecting .* to return .*"
    ],
    [
      // TODO: could be worded much better - not clear that this is the lambda function
      ".*",
      "Expected `.*` to return a result",
      "Expected the function to return `(?<arg>.*)`, but the result was .*"
    ],
    [
      // TODO: are there parameters here we could improve
      ".*",
      "Expected `(?<arg>.*)` to return a .*, but it returned `.*`",
      "Expected the argument `(?<arg>.*)` passed to `.*` to return .*. However, it returned `.*` for the input `.*`."
    ],
    // -----------------------------
    // Remove functions
    // -----------------------------
    [".*", ".* was removed from Dark", "This function no longer exists."]
  ]
}
