let log (s: String) : Unit =
  let _ = WASM.Editor.callJSFunction "console.log" [ s ]
  ()

let logErr (s: String) : Unit =
  let _ = WASM.Editor.callJSFunction "console.error" [ s ]
  ()


// todo: throw this stuff into an OpenAI module?
type OpenAIChatCompletionRequestMessage = { role: String; content: String }

type OpenAIChatCompletionRequest =
  { model: String
    max_tokens: Int
    temperature: Float
    messages: List<OpenAIChatCompletionRequestMessage> }

type OpenAIChatCompletionResponseChoiceMessage = { content: String }

type OpenAIChatCompletionResponseChoice =
  { message: OpenAIChatCompletionResponseChoiceMessage }

type OpenAIChatCompletionResponse =
  { choices: List<OpenAIChatCompletionResponseChoice> }

let openAIcompletion
  (prompt: String)
  : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
  let apiKey =
    let url = "http://dark-editor.dlio.localhost:11003/openai-apikey-yikes"

    match Builtin.HttpClient.request "get" url [] Builtin.Bytes.empty with
    | Ok response -> response.body |> Builtin.String.fromBytes

  let openAIRequest =
    OpenAIChatCompletionRequest
      { model = "gpt-3.5-turbo"
        max_tokens = 700
        temperature = 0.7
        messages =
          [ OpenAIChatCompletionRequestMessage { role = "user"; content = prompt } ] }

  match Builtin.Json.serialize<OpenAIChatCompletionRequest> openAIRequest with
  | Ok reqBody ->
    let headers =
      [ ("authorization", "Bearer " ++ apiKey)
        ("content-type", "application/json") ]

    let openAIResponse =
      Builtin.HttpClient.request
        "POST"
        "https://api.openai.com/v1/chat/completions"
        headers
        (Builtin.String.toBytes reqBody)

    match openAIResponse with
    | Ok r ->
      match
        Builtin.Json.parse<OpenAIChatCompletionResponse> (
          Builtin.String.fromBytes r.body
        )
      with
      | Ok r ->
        match PACKAGE.Darklang.Stdlib.List.head r.choices with
        | Some c -> Ok c.message.content

        | None -> Error("No choices returned")
      | Error err -> Error("Couldn't parse open ai completino response - " ++ err)
    | Error e -> Error("OpenAI API request failed\n" ++ e)
  | Error e -> Error("Couldn't serialize request" ++ e)


let parseAndSerializeProgram
  (userProgram: String)
  : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
  let response =
    Builtin.HttpClient.request
      "POST"
      "http://dark-editor.dlio.localhost:11003/get-program-json"
      []
      (Builtin.String.toBytes userProgram)

  let statusCode = response |> Builtin.unwrap |> (fun r -> r.statusCode)

  match statusCode with
  | 200 ->
    Ok(response |> Builtin.unwrap |> (fun r -> r.body) |> Builtin.String.fromBytes)
  | 400 ->
    Error(
      response |> Builtin.unwrap |> (fun r -> r.body) |> Builtin.String.fromBytes
    )
  | _ -> Error("Unexpected response code: " ++ Builtin.Int.toString statusCode)


// TODO: in the prompt, include something like
// "all code snippets returned must be executable without any other context needed"

// Model

type Status =
  | Todo
  | InProgress
  | Done

type Task =
  { id: String
    description: String
    status: Status }

type Action =
  { id: String
    description: String
    status: Status }

type BotResponseItem =
  | Text of text: String
  | CodeSnippet of id: String
  | Tasks of tasks: List<Task>
  | Actions of actions: List<Action>

type ChatHistoryItem =
  | UserPrompt of id: String * prompt: String
  | BotResponse of id: String * items: List<BotResponseItem> // todo: add promptId to tie together with relevant UserPrompt

type CodeSnippet =
  { id: String
    code: String
    eval: PACKAGE.Darklang.Stdlib.Option.Option<String> }

type Model =
  { isLoading: Bool
    systemPrompt: String
    chatHistory: List<ChatHistoryItem>
    codeSnippets: List<CodeSnippet>
    tasks: List<Task>
    actions: List<Action>
    functions: List<String>
    types: List<String> }


// Update
type Msg =
  | LoadSystemPrompt
  | UserGavePrompt of prompt: String
  | UserRequestedCodeEval of id: String * codeSnippet: String
  | CodeEval of code: String


let sendError (model: Model) (codeSnippet: String) (err: String) : Model =
  let errMsg =
    "update the code snippet to fix "
    ++ "\n"
    ++ err
    ++ "\n"
    ++ "```"
    ++ codeSnippet
    ++ "```"

  update model (Msg.UserGavePrompt errMsg)


let update (model: Model) (msg: Msg) : Model =
  match msg with
  | LoadSystemPrompt ->
    let systemPrompt =
      Builtin.HttpClient.request
        "get"
        "http://dark-editor.dlio.localhost:11003/system-prompt"
        []
        Builtin.Bytes.empty

    match systemPrompt with
    | Ok response ->
      { response with
          systemPrompt = Builtin.String.fromBytes response.body }
    | Error err -> logErr "Couldn't load system prompt"


  | UserGavePrompt userPrompt ->
    let newModel =
      { model with
          isLoading = true
          chatHistory =
            Builtin.List.append
              model.chatHistory
              [ ChatHistoryItem.UserPrompt
                  (Builtin.unwrap (Builtin.String.random 5))
                  userPrompt ] }

    updateStateInJS newModel

    let getTasksPrompt =
      (Builtin.HttpClient.request
        "get"
        "http://dark-editor.dlio.localhost:11003/task-creation-prompt"
        []
        Builtin.Bytes.empty)
      |> Builtin.unwrap
      |> (fun r -> r.body)
      |> Builtin.String.fromBytes
      |> Builtin.String.append $"\n\n {userPrompt}"

    // I guess, until we have cmds or something,
    // we have to deal with http calls and such in-line, like here
    let fullPrompt = model.systemPrompt ++ userPrompt

    match openAIcompletion getTasksPrompt, openAIcompletion fullPrompt with
    | Ok apiResponseTasks, Ok apiResponse ->
      let taskIndex = Builtin.String.indexOf_v0 apiResponseTasks "Tasks:"

      let newtasks =
        match taskIndex with
        | None -> []
        | Some taskIndex ->
          apiResponseTasks
          |> Builtin.String.slice_v0
            taskIndex
            (Builtin.String.length apiResponseTasks)
          |> Builtin.String.split "\n"
          |> Builtin.List.map (fun line ->
            Task
              { id = (Builtin.String.random 5) |> Builtin.unwrap
                description = line
                status = Status.Todo })

      let (newCodeSnippets, botResponseParts) =
        (Builtin.String.split (" " ++ apiResponse) "```")
        |> Builtin.List.indexedMap (fun i text -> (i, text))
        |> Builtin.List.fold ([], []) (fun acc curr ->
          let (codeSnippets, responseParts) = acc
          let (i, text) = curr
          let text = Builtin.String.trim text

          if text == "" then
            acc
          else if i % 2 == 1 then
            let snippetId = Builtin.unwrap (Builtin.String.random 5)

            let updatedCodeSnippets =
              Builtin.List.append
                codeSnippets
                [ CodeSnippet
                    { id = snippetId
                      code = text
                      eval = PACKAGE.Darklang.Stdlib.Option.Option.None } ]

            let updatedResponseParts =
              Builtin.List.append
                responseParts
                [ BotResponseItem.CodeSnippet snippetId ]

            (updatedCodeSnippets, updatedResponseParts)
          else
            codeSnippets,
            (Builtin.List.append responseParts [ BotResponseItem.Text text ]))

      let newChatItemsItems =
        [ ChatHistoryItem.UserPrompt
            (Builtin.unwrap (Builtin.String.random 5))
            userPrompt
          ChatHistoryItem.BotResponse
            (Builtin.unwrap (Builtin.String.random 5))
            botResponseParts ]

      Model
        { isLoading = false
          systemPrompt = model.systemPrompt
          chatHistory = Builtin.List.append model.chatHistory newChatItemsItems
          codeSnippets = Builtin.List.append model.codeSnippets newCodeSnippets
          tasks = Builtin.List.append model.tasks newtasks
          actions = model.actions
          functions = model.functions
          types = model.types }

    | Error err, _ -> log "error getting tasks " ++ err
    | _, Error err -> log "error getting response " ++ err
    | Error err1, Error err2 ->
      log "error getting tasks and response " ++ err1 ++ " " ++ err2


  | UserRequestedCodeEval id codeSnippet ->
    // split this into 2 groups - the one we're updating, and the rest
    let (snippetToUpdate, otherSnippets) =
      model.codeSnippets |> Builtin.List.partition (fun cs -> cs.id == id)

    match PACKAGE.Darklang.Stdlib.List.head snippetToUpdate with
    | None -> log "couldn't find snippet"
    | Some snippetToUpdate ->
      let parsedAndSerialized = parseAndSerializeProgram codeSnippet

      match parsedAndSerialized with
      | Ok parsedAndSerialized ->
        let evalPgm = (WASM.Editor.evalUserProgram parsedAndSerialized)

        match evalPgm with
        | Ok evalPgm ->
          evalPgm

          let updatedCodeSnippets =
            Builtin.List.append
              [ CodeSnippet
                  { id = snippetToUpdate.id
                    code = codeSnippet
                    eval = PACKAGE.Darklang.Stdlib.Option.Option.Some evalPgm } ]
              otherSnippets

          Model
            { isLoading = false
              systemPrompt = model.systemPrompt
              chatHistory = model.chatHistory
              codeSnippets = updatedCodeSnippets
              tasks = model.tasks
              actions = model.actions
              functions = model.functions
              types = model.types }

        | Error err -> sendError model codeSnippet err

      | Error err -> sendError model codeSnippet err

  | CodeEval code ->
    let parsedAndSerialized = parseAndSerializeProgram code

    match parsedAndSerialized with
    | Ok parsedAndSerialized ->
      let evalPgm = (WASM.Editor.evalUserProgram parsedAndSerialized)

      match evalPgm with
      | Ok evalPgm ->
        evalPgm

        let codeSnippet =
          CodeSnippet
            { id = "evaluated-program"
              code = code
              eval = PACKAGE.Darklang.Stdlib.Option.Option.Some evalPgm }

        Model
          { isLoading = false
            systemPrompt = model.systemPrompt
            chatHistory = model.chatHistory
            codeSnippets = [ codeSnippet ]
            tasks = model.tasks
            actions = model.actions
            functions = model.functions
            types = model.types }

      | Error err -> log "couldn't eval program"

    | Error err -> log "couldn't parse and serialize program"


/// Single point of communicating to JS host
///
/// Let the JS host know that the state has been updated,
/// so that it can update the UI accordingly.
let updateStateInJS
  (newState: Model)
  : PACKAGE.Darklang.Stdlib.Result.Result<Unit, String> =
  match Builtin.Json.serialize<Model> newState with
  | Ok serialized ->
    let _ = WASM.Editor.callJSFunction "self.receiveEvalResult" [ serialized ]
    Ok()
  | Error err ->
    let _ =
      WASM.Editor.callJSFunction "console.warn" [ "Couldn't serialize - " ++ err ]

    Error "Couldn't serialize updated state"


/// Single point of communication from JS host
///
/// Listen for events from the JS host, and update the state accordingly.
let handleEvent
  (evt: String)
  : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
  match Builtin.Json.parse<Msg> evt with
  | Ok msg ->
    match WASM.Editor.getState<Model> () with
    | Ok currentState ->
      let newState = update currentState msg

      // returns result, but let's assume it worked...
      let _ = WASM.Editor.setState<Model> newState

      updateStateInJS newState

    | Error err ->
      log ("Couldn't get current state:  " ++ err)
      Error "Couldn't get current state"

  | Error err ->
    log ("Couldn't get current state: " ++ err)
    Error("Couldn't parse raw msg: " ++ err)


// Init
let init () : Model =
  let initState =
    let demoSnippet =
      CodeSnippet
        { id = (Builtin.String.random 5) |> Builtin.unwrap
          code = "let incr (i: Int): Int = i + 1\n\nincr 5"
          eval = PACKAGE.Darklang.Stdlib.Option.Option.None }

    let demoAction =
      [ Action
          { id = (Builtin.String.random 5) |> Builtin.unwrap
            description = "Demo action"
            status = Status.InProgress } ]

    let chatHistory =
      [ ChatHistoryItem.UserPrompt
          (Builtin.unwrap (Builtin.String.random 5))
          "Hello, I want a function that increments an integer!"

        ChatHistoryItem.BotResponse
          (Builtin.unwrap (Builtin.String.random 5))
          [ BotResponseItem.Text "OK - here's some code:"
            BotResponseItem.CodeSnippet demoSnippet.id
            BotResponseItem.Actions demoAction ] ]

    let getFnList =
      let response =
        Builtin.HttpClient.request
          "GET"
          "http://dark-editor.dlio.localhost:11003/all-canvas-functions"
          []
          Builtin.Bytes.empty

      match response with
      | Ok response ->
        log "got response"
        response.body |> Builtin.String.fromBytes |> Builtin.String.split "\n\n"

      | Error err -> "Error getting response: " ++ err


    let getTypeList =
      let response =
        Builtin.HttpClient.request
          "GET"
          "http://dark-editor.dlio.localhost:11003/all-canvas-types"
          []
          Builtin.Bytes.empty

      match response with
      | Ok response ->
        log "got response"
        response.body |> Builtin.String.fromBytes |> Builtin.String.split "\n\n"

      | Error err -> "Error getting response: " ++ err



    Model
      { isLoading = false
        systemPrompt = "Loading..."
        chatHistory = chatHistory
        codeSnippets = [ demoSnippet ]
        tasks = []
        actions = demoAction
        functions = getFnList
        types = getTypeList }

  updateStateInJS initState

  initState





// // Models to interop with JS host
// // (TODO: wrap this in `module JS = `)
// type BotResponseJS

// type ChatHistoryItemJS =
//   | BotResponse of { author : String; body : String  }

// type ModelForJS =
//   // should be 1:1 with Model, but nice and serializeable
//   { systemPrompt : String
//     state : String
//     code: String
//     chatHistory: List<ChatHistoryItemJS> }

// // TODO: result
// let stateForJS (state: Model) : ModelForJS =
//   { systemPrompt = state.systemPrompt
//     state = match state.State with
//             | WaitingForFirstInput -> "WaitingForFirstInput"
//             | WaitingForUserInput -> "WaitingForUserInput"
//             | BotIsThinking -> "BotIsThinking"
//     chatHistory =
//       state.chatHistory
//       |> Builtin.List.map (fun item ->
//            { author = match item.author with User -> "User" | Bot -> "Bot"
//              prompt = item.text }) }

// // TODO: result
// let modelFromJS (model: ModelForJS) : Model =
//   { SystemPrompt = Prompt model.systemPrompt
//     State =
//       match model.state with
//       | "WaitingForFirstInput" -> WaitingForFirstInput
//       | "WaitingForUserInput" -> WaitingForUserInput
//       | "BotIsThinking" -> BotIsThinking
//     ChatHistory =
//       model.chatHistory
//       |> Builtin.List.map (fun item ->
//            { Author = match item.author with "User" -> User | "Bot" -> Bot
//              Prompt = item.text }) }


// type EventJS = { eventName: String; data: String }

// let msgOfJS (msg: EventJS) : Msg =
//   match msg.eventName with
//   | "userGavePrompt" -> UserGavePrompt (Prompt msg.data)
//   | "botResponded" -> BotResponded (Prompt msg.data)
//   | _ -> failwith "Couldn't parse event name"

// let msgToJS (msg: Msg) : EventJS =
//   match msg with
//   | UserGavePrompt prompt ->
//     { eventName = "userGavePrompt"
//       data = match prompt with Prompt p -> p }
//   | BotResponded prompt ->
//     { eventName = "botResponded"
//       data = match prompt with Prompt p -> p }