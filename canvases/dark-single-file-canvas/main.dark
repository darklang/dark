type CustomEnum =
  | A
  | B
  | C

let stringify (e: CustomEnum) : String =
  match e with
  | A -> "eh"
  | B -> "bee"
  | C -> "sea"

// TODO: demo DB

// TODO: demo workers

// TODO: demo CRON

// TODO: demo REPL

[<HttpHandler("GET", "/")>]
let _indexHandler _req =
  let respBody = PACKAGE.Darklang.Stdlib.String.toBytes "testing 123"
  PACKAGE.Darklang.Stdlib.Http.response respBody 200


[<HttpHandler("POST", "/stringify-enum")>]
let _stringifyEnumHandler (request) =
  // req body should be like { "A": [] }
  let reqBody =
    request.body
    |> PACKAGE.Darklang.Stdlib.String.fromBytes_v0
    |> Builtin.Json.parse<CustomEnum>

  let reqBody = PACKAGE.Darklang.Stdlib.Result.withDefault_v0 reqBody B

  let respBody = (stringify reqBody) |> PACKAGE.Darklang.Stdlib.String.toBytes_v0

  PACKAGE.Darklang.Stdlib.Http.response respBody 200




type Test = { id: Int; name: String }

[<DB>]
type TestDB = Test

[<HttpHandler("GET", "/get-tests")>]
let _handler _req =
  let allRecords = Builtin.DB.getAll TestDB
  let respBody = allRecords |> Builtin.Json.serialize<List<Test>>

  let respBody =
    match respBody with
    | Ok v -> v |> PACKAGE.Darklang.Stdlib.String.toBytes
    | Err e -> "fail"


  PACKAGE.Darklang.Stdlib.Http.response respBody 200


[<HttpHandler("GET", "/add-test")>]
let _handler _req =
  let key = Builtin.DB.generateKey_v0 ()
  let _ = Builtin.DB.set (Test { id = 1; name = key }) key TestDB
  PACKAGE.Darklang.Stdlib.Http.response Builtin.Bytes.empty 200