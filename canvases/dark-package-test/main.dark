let rUnwrap (result: Result<'a, 'b>) : 'a =
  match result with
  | Ok s -> s
  | Error e -> e

[<HttpHandler("GET", "/openai-completion")>]
let _handler _req =
  let result =
    (PACKAGE.OpenAI.Completion.completion "create a function that adds two numbers")
    |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200


[<HttpHandler("GET", "/openai-chat")>]
let _handler _req =
  let result =
    (PACKAGE.OpenAI.ChatCompletion.completion
      "create a function that adds two numbers")
    |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200



[<HttpHandler("GET", "/openai-test-image")>]
let _handler _req =
  let result =
    (PACKAGE.OpenAI.ImageGeneration.imageGeneration "a cute cat") |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200


[<HttpHandler("GET", "/openai-test-retrieve-model")>]
let _handler _req =
  let result = (PACKAGE.OpenAI.Model.retrieveModel "davinci") |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200


[<HttpHandler("GET", "/openai-test-get-models-list")>]
let _handler _req =
  let result = (PACKAGE.OpenAI.Model.getListOfModels ()) |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200


[<HttpHandler("GET", "/openai-test-completion-options")>]
let _handler _req =
  let result =
    (PACKAGE.OpenAI.ChatCompletion.completionWithOption
      "create a function that adds two numbers"
      (PACKAGE.Darklang.Stdlib.Option.Option.Some(
        PACKAGE.OpenAI.ChatCompletion.CompletionOptions
          { model = "gpt-3.5-turbo"
            messages =
              [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                  { role = "user"
                    content = "create a function that adds two numbers" } ]
            temperature = 0.7
            max_tokens = 700
            top_p = 1.0
            n = 1
            stream = false }
      )))
    |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200

[<HttpHandler("GET", "/openai-test-completion-options-nothing")>]
let _handler _req =
  let result =
    (PACKAGE.OpenAI.ChatCompletion.completionWithOption
      "create a function that multiplies two numbers"
      PACKAGE.Darklang.Stdlib.Option.Option.None)
    |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200


[<HttpHandler("GET", "/openai-test-completion-options2")>]
let _handler _req =
  let options =
    { PACKAGE.OpenAI.ChatCompletion.completionOptionsDefault () with
        temperature = 0.0
        max_tokens = 1 }

  let result =
    (PACKAGE.OpenAI.ChatCompletion.completionWithOption
      "create a function that divides two numbers"
      (Some options))
    |> rUnwrap

  PACKAGE.Darklang.Stdlib.Http.response
    (PACKAGE.Darklang.Stdlib.String.toBytes result)
    200