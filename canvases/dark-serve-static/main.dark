[<HttpHandler("GET", "/:path")>]
let _handler _req =
  let body =

    (Experiments.readFromStaticDir $"{path}")
    |> PACKAGE.Darklang.Stdlib.Result.withDefault Builtin.Bytes.empty

  let contentType =
    match
      (PACKAGE.Darklang.Stdlib.String.split path ".")
      |> PACKAGE.Darklang.Stdlib.List.last
      |> PACKAGE.Darklang.Stdlib.Option.withDefault ""
    with
    | "wasm" -> "application/wasm"
    | "js" -> "text/javascript"
    | "dll" -> "application/octet-stream"
    | "dat" -> "application/octet-stream"
    | "blat" -> "application/octet-stream"
    | "json" -> "application/json"
    | _ -> "text/plain"

  let incomingHost =
    request.headers
    |> PACKAGE.Darklang.Stdlib.List.findFirst (fun t ->
      PACKAGE.Darklang.Stdlib.Tuple2.first t == "origin")
    |> PACKAGE.Darklang.Stdlib.Option.map (fun t ->
      PACKAGE.Darklang.Stdlib.Tuple2.second t)
    |> PACKAGE.Darklang.Stdlib.Option.withDefault
      "Couldn't find 'origin' request header to determine Access-Control-Allow-Origin"

  let headers =
    [ ("Access-Control-Allow-Origin", incomingHost)
      ("Access-Control-Allow-Credentials", "true")
      ("Content-type", contentType)
      ("Accept-Ranges", "bytes") ]

  PACKAGE.Darklang.Stdlib.Http.responseWithHeaders body headers 200