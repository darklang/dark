[<HttpHandler("GET", "/")>]
let _handler _req =
  PACKAGE.Darklang.Stdlib.Http.redirectTo "/assets/index.html"

[<HttpHandler("GET", "/assets/:path")>]
let _handler _req =
  let body =
    (Experiments.readFromCanvases ("dark-repl/assets/" ++ path))
    |> PACKAGE.Darklang.Stdlib.Result.withDefault Builtin.Bytes.empty

  let contentType =
    match
      (PACKAGE.Darklang.Stdlib.String.split path ".")
      |> PACKAGE.Darklang.Stdlib.List.last
      |> PACKAGE.Darklang.Stdlib.Option.withDefault ""
    with
    | "js" -> "text/javascript"
    | "json" -> "application/json"
    | "html" -> "text/html"
    | "dark" -> "text/plain"
    | _ -> "text/plain"

  let incomingHost =
    request.headers
    |> PACKAGE.Darklang.Stdlib.List.findFirst (fun t ->
      PACKAGE.Darklang.Stdlib.Tuple2.first t == "origin")
    |> PACKAGE.Darklang.Stdlib.Option.map (fun t ->
      PACKAGE.Darklang.Stdlib.Tuple2.second t)
    |> PACKAGE.Darklang.Stdlib.Option.withDefault
      "Couldn't find 'origin' request header to determine Access-Control-Allow-Origin"

  let headers =
    [ ("Access-Control-Allow-Origin", incomingHost)
      ("Access-Control-Allow-Credentials", "true")
      ("Content-type", contentType)
      ("Accept-Ranges", "bytes") ]

  PACKAGE.Darklang.Stdlib.Http.responseWithHeaders body headers 200


// We're sharing the Worker script between this canvas and
// dark-editor, and Worker scripts can't be loaded across
// origins, so we need to serve it from the same origin.
// Nothing else should be served from this handler,
// so let's assume JS content-type.
[<HttpHandler("GET", "/static/:path")>]
let _handler _req =
  let body =
    (Experiments.readFromStaticDir $"{path}")
    |> PACKAGE.Darklang.Stdlib.Result.withDefault Builtin.Bytes.empty

  let headers = [ ("Content-type", "text/javascript") ]

  PACKAGE.Darklang.Stdlib.Http.responseWithHeaders body headers 200


[<HttpHandler("POST", "/get-program-json")>]
let _handler _req =
  let sourceInBytes = request.body

  let program =
    Experiments.parseAndSerializeProgram
      (PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement sourceInBytes)
      "code.dark"

  match program with
  | Ok program ->
    let types =
      PACKAGE.Darklang.Stdlib.Option.withDefault
        (PACKAGE.Darklang.Stdlib.Dict.get program "types")
        "[]"

    let fns =
      PACKAGE.Darklang.Stdlib.Option.withDefault
        (PACKAGE.Darklang.Stdlib.Dict.get program "fns")
        "[]"

    let constants =
      PACKAGE.Darklang.Stdlib.Option.withDefault
        (PACKAGE.Darklang.Stdlib.Dict.get program "constants")
        "[]"

    let exprs =
      PACKAGE.Darklang.Stdlib.Option.withDefault
        (PACKAGE.Darklang.Stdlib.Dict.get program "exprs")
        "[]"

    let json =
      "{ \"types\": "
      ++ types
      ++ ", \"fns\": "
      ++ fns
      ++ ", \"constants\": "
      ++ constants
      ++ ", \"exprs\": "
      ++ exprs
      ++ "}"

    PACKAGE.Darklang.Stdlib.Http.responseWithHeaders
      (PACKAGE.Darklang.Stdlib.String.toBytes json)
      [ ("content-type", "application-json") ]
      200

  | Error _err ->
    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "Couldn't parse the program")
      400