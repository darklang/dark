[<HttpHandler("GET", "/")>]
let _handler _req =
  Http.redirectTo "/assets/index.html"

[<HttpHandler("POST", "/handle-bytes")>]
let _handler _req =
  Http.response (request.body |> Bytes.length |> Int.toString |> String.toBytes) 200

[<HttpHandler("GET", "/assets/:path")>]
let _handler _req =
  let body =
    (Experiments.readFromCanvases  ("dark-repl/assets/" ++ path))
    |> Result.withDefault Bytes.empty

  let contentType =
    match (String.split_v1 path ".") |> List.last_v2 |> Option.withDefault "" with
    | "js" -> "text/javascript"
    | "json" -> "application/json"
    | "html" -> "text/html"
    | "dark" -> "text/plain"
    | _ -> "text/plain"

  let incomingHost =
    request.headers
    |> List.findFirst_v2 (fun t -> Tuple2.first t == "origin")
    |> Option.map_v1 (fun t -> Tuple2.second t)
    |> Option.withDefault "Couldn't find 'origin' request header to determine Access-Control-Allow-Origin"

  let headers =
    Dict.fromListOverwritingDuplicates
      [
        ("Access-Control-Allow-Origin", incomingHost)
        ("Access-Control-Allow-Credentials", "true")
        ("Content-type", contentType)
        ("Accept-Ranges", "bytes")
      ]

  Http.responseWithHeaders body headers 200


[<HttpHandler("POST", "/get-program-json")>]
let _handler _req =
  let sourceInBytes = request.body
  let program =
    Experiments.parseAndSerializeProgram (String.fromBytes sourceInBytes) "code.dark"

  match program with
  | Ok program ->
    let types = Option.withDefault (Dict.get_v2 program "types") "[]"
    let fns = Option.withDefault (Dict.get_v2 program "fns") "[]"
    let exprs = Option.withDefault (Dict.get_v2 program "exprs") "[]"

    let json = "{ \"types\": " ++ types ++ ", \"fns\": " ++ fns ++ ", \"exprs\": " ++ exprs ++ "}"

    Http.responseWithHeaders
      (String.toBytes json)
      (Dict.fromListOverwritingDuplicates [ ("content-type","application-json")])
      200

  | Error _err -> Http.response (String.toBytes "Couldn't parse the program") 400

