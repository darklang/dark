module Darklang =
  module Stdlib =
    module Int =

      /// Returns the result of wrapping <param a> around so that {{0 <= res < b}}.
      /// The modulus <param b> must be 0 or negative.
      /// Use <fn Int.remainder> if you want the remainder after division, which has
      /// a different behavior for negative numbers.
      let ``mod`` (a: Int) (b: Int) : Int = a % b


      /// Returns the integer remainder left over after dividing <param value> by
      /// <param divisor>, as a <type Result>.
      /// For example, {{Int.remainder 15 6 == Ok 3}}. The remainder will be
      /// negative only if {{<var value> < 0}}.
      /// The sign of <param divisor> doesn't influence the outcome.
      /// Returns an {{Error}} if <param divisor> is {{0}}.
      let remainder
        (value: Int)
        (divisor: Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<Int, String> =
        Builtin.Int.remainder value divisor


      /// Adds two integers together
      let add (a: Int) (b: Int) : Int = a + b


      /// Subtracts two integers
      let subtract (a: Int) (b: Int) : Int = a - b


      /// Multiplies two integers
      let multiply (a: Int) (b: Int) : Int = a * b


      /// Divides two integers
      let divide (a: Int) (b: Int) : Int = Builtin.Int.divide a b


      /// Raise <param base> to the power of <param exponent>.
      /// <param exponent> must to be positive.
      /// Return value wrapped in a {{Result}}
      let power
        (``base``: Int)
        (exponent: Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<Int, String> =
        ``base`` ^ exponent


      /// Returns the absolute value of <param a> (turning negative inputs into positive outputs)
      let absoluteValue (a: Int) : Int = if a < 0 then -a else a


      /// Returns the negation of <param a>, {{-a}}
      let negate (a: Int) : Int = -a


      /// Returns {{true}} if <param a> is greater than <param b>
      let greaterThan (a: Int) (b: Int) : Bool = a > b


      /// Returns {{true}} if <param a> is greater than or equal to <param b>
      let greaterThanOrEqualTo (a: Int) (b: Int) : Bool = a >= b


      /// Returns {{true}} if <param a> is less than <param b>
      let lessThan (a: Int) (b: Int) : Bool = a < b

      /// Returns {{true}} if <param a> is less than or equal to <param b>
      let lessThanOrEqualTo (a: Int) (b: Int) : Bool = a <= b


      /// Returns a random integer between <param start> and <param end> (inclusive)
      let random (start: Int) (``end``: Int) : Int = Builtin.Int.random start ``end``


      /// Get the square root of an <type Int>
      let sqrt (a: Int) : Float = Builtin.Int.sqrt a


      /// Converts an <type Int> to a <type Float>
      let toFloat (a: Int) : Float = Builtin.Int.toFloat a


      /// Returns the sum of all the ints in the list
      let sum (lst: List<Int>) : Int =
        PACKAGE.Darklang.Stdlib.List.fold lst 0 (fun acc x -> acc + x)


      /// Returns the higher of <param a> and <param b>
      let max (a: Int) (b: Int) : Int = if a > b then a else b


      /// Returns the lower of <param a> and <param b>
      let min (a: Int) (b: Int) : Int = if a < b then a else b


      /// If <param value> is within the range given by <param limitA> and <param
      /// limitB>, returns <param value>.
      /// If <param value> is outside the range, returns <param limitA> or <param
      /// limitB>, whichever is closer to <param value>.
      /// <param limitA> and <param limitB> can be provided in any order.
      let clamp (value: Int) (limitA: Int) (limitB: Int) : Int =
        let min = if limitA < limitB then limitA else limitB
        let max = if limitA > limitB then limitA else limitB

        if value < min then min
        else if value > max then max
        else value


      /// Returns the <type Int> value of a <type String>
      let parse (s: String) : PACKAGE.Darklang.Stdlib.Result.Result<Int, String> =
        Builtin.Int.parse s


      /// Stringify <param int>
      let toString (int: Int) : String = Builtin.Int.toString int