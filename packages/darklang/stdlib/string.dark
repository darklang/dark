module Darklang =
  module Stdlib =
    module String =

      /// Returns a string containing a single '\n'
      let newline = "\n"


      /// Truncates the string <param s> to the specified <param length> and appends an ellipsis ("...")
      /// to it if the original string exceeds the given length. Otherwise, returns the original string.
      let ellipsis (s: String) (length: Int) : String =
        if PACKAGE.Darklang.Stdlib.String.length s > length then
          (PACKAGE.Darklang.Stdlib.String.slice_v0 s 0 length) ++ "..."
        else
          s


      /// Returns 'a' or 'an' (the indefinite article) for a string, based on
      /// whether it begins with a vowel
      let articleFor (nextWord: String) : String =
        let vowels = [ 'A'; 'E'; 'I'; 'O'; 'U'; 'a'; 'e'; 'i'; 'o'; 'u' ]

        match PACKAGE.Darklang.Stdlib.String.head nextWord with
        | None -> ""
        | Some c ->
          if
            PACKAGE.Darklang.Stdlib.String.length nextWord > 1
            && (PACKAGE.Darklang.Stdlib.Bool.not (
              PACKAGE.Darklang.Stdlib.Char.isASCIILetter c
            ))
          then
            articleFor (PACKAGE.Darklang.Stdlib.String.dropFirst nextWord 1)
          else if PACKAGE.Darklang.Stdlib.List.``member`` vowels c then
            "an"
          else
            "a"


      /// Returns {{true}} if <param s> is the empty string {{\"\"}
      let isEmpty (s: String) : Bool = s == ""


      /// Iterate over each Character (EGC, not byte) in the string, performing the
      /// operation in <param fn> on each one.
      let map (s: String) (fn: Char -> Char) : String = Builtin.String.map s fn


      /// Returns the list of Characters (EGC, not byte) in the string
      let toList (s: String) : List<Char> = Builtin.String.toList s


      /// Replace all instances on <param searchFor> in <param s> with <param replaceWith>
      let replaceAll (s: String) (searchFor: String) (replaceWith: String) : String =
        Builtin.String.replaceAll s searchFor replaceWith


      /// Returns the string, uppercased
      let toUppercase (s: String) : String = Builtin.String.toUppercase s


      /// Returns the string, lowercased
      let toLowercase (s: String) : String = Builtin.String.toLowercase s


      /// Returns the length of the string
      let length (s: String) : Int = Builtin.String.length s


      /// Concatenates the two strings by appending <param s2> to <param s1> and returns the joined string.
      let append (s1: String) (s2: String) : String = $"{s1}{s2}"


      /// Concatenates the two strings by prepending <param s2> to <param s1> and
      /// returns the joined string
      let prepend (s1: String) (s2: String) : String = s2 ++ s1


      //TODO: write the dark version of this function once we have regex
      /// Turns a string into a prettified slug, including only lowercased
      /// alphanumeric characters, joined by hyphens
      // let slugify (s: String) : String =
      //   Builtin.String.slugify s


      /// Reverses <param string>
      let reverse (string: String) : String = Builtin.String.reverse string


      /// Splits a string at the separator, returning a list of strings without the separator.
      /// If the separator is not present, returns a list containing only the initial string.
      let split (string: String) (separator: String) : List<String> =
        Builtin.String.split string separator


      /// Combines a list of strings with the provided separator
      let join (l: List<String>) (separator: String) : String =
        Builtin.String.join l separator


      /// Returns the list of characters as a string
      let fromList (lst: List<Char>) : String =
        (PACKAGE.Darklang.Stdlib.List.map lst (fun c ->
          PACKAGE.Darklang.Stdlib.Char.toString c))
        |> Builtin.String.join ""


      /// Converts a <type Char> to a <type String>
      let fromChar (c: Char) : String = PACKAGE.Darklang.Stdlib.Char.toString c


      /// URLBase64 encodes a string without padding. Uses URL-safe encoding with
      /// {{-}} and {{_}} instead of {{+}} and {{/}}, as defined in
      /// [RFC 4648 section 5](https://www.rfc-editor.org/rfc/rfc4648.html#section-5)
      let base64UrlEncode (s: String) : String =
        let encoded =
          s
          |> PACKAGE.Darklang.Stdlib.String.toBytes
          |> PACKAGE.Darklang.Stdlib.Base64.urlEncode

        PACKAGE.Darklang.Stdlib.String.replaceAll encoded "=" ""

      /// Base64 encodes a string. Uses {{-}} and {{_}} instead of {{+}} and {{/}}, as defined in
      /// [RFC 4648 section 4](https://www.rfc-editor.org/rfc/rfc4648.html#section-4) with padding.
      let base64Encode (s: String) : String =
        s
        |> PACKAGE.Darklang.Stdlib.String.toBytes
        |> PACKAGE.Darklang.Stdlib.Base64.encode


      /// Base64 decodes a string. The returned value is wrapped in {{Result}}.
      /// Works with both the URL-safe and standard Base64
      /// alphabets defined in [RFC 4648
      /// sections](https://www.rfc-editor.org/rfc/rfc4648.html)
      /// [4](https://www.rfc-editor.org/rfc/rfc4648.html#section-4) and
      /// [5](https://www.rfc-editor.org/rfc/rfc4648.html#section-5).
      let base64Decode
        (s: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
        match PACKAGE.Darklang.Stdlib.Base64.decode s with
        | Ok bytes ->
          match PACKAGE.Darklang.Stdlib.String.fromBytes bytes with
          | Some str -> PACKAGE.Darklang.Stdlib.Result.Result.Ok str
          | None ->
            PACKAGE.Darklang.Stdlib.Result.Result.Error "Invalid UTF-8 string"
        | Error err -> PACKAGE.Darklang.Stdlib.Result.Result.Error err


      /// Take a string and hash it to a cryptographically-secure digest.
      /// Don't rely on either the size or the algorithm.
      let digest (s: String) : String =
        let sha384Hash =
          PACKAGE.Darklang.Stdlib.Crypto.sha384_v0 (
            PACKAGE.Darklang.Stdlib.String.toBytes_v0 s
          )

        sha384Hash |> PACKAGE.Darklang.Stdlib.Base64.urlEncode


      /// Generate a <type String> of length <param length> from random characters
      let random
        (length: Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
        if length < 0 then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            $"Expected `length` to be positive, but it was `{length |> PACKAGE.Darklang.Stdlib.Int.toString}`"
        else
          let characters =
            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

          let randomChar =
            fun _ ->
              (let index =
                PACKAGE.Darklang.Stdlib.Int.random
                  0
                  ((PACKAGE.Darklang.Stdlib.String.length characters) - 1)

               PACKAGE.Darklang.Stdlib.String.slice_v0 characters index (index + 1))

          let result =
            (PACKAGE.Darklang.Stdlib.List.range 0 (length - 1))
            |> PACKAGE.Darklang.Stdlib.List.map (fun _ -> randomChar ())
            |> PACKAGE.Darklang.Stdlib.String.join ""

          PACKAGE.Darklang.Stdlib.Result.Result.Ok(result)


      /// Escape an untrusted string in order to include it safely in HTML output
      let htmlEscape (html: String) : String =
        html
        |> PACKAGE.Darklang.Stdlib.String.toList
        |> PACKAGE.Darklang.Stdlib.List.map (fun c ->
          match c with
          | '<' -> "&lt;"
          | '>' -> "&gt;"
          | '&' -> "&amp;"
          // include these for html-attribute-escaping
          // even though they're not strictly necessary
          // for html-escaping proper.
          | '"' -> "&quot;"
          // &apos; doesn't work in IE....
          | ''' -> "&#x27;"
          | _ -> PACKAGE.Darklang.Stdlib.String.fromChar c)
        |> PACKAGE.Darklang.Stdlib.String.join ""


      /// Checks if <param lookingIn> contains <param searchingFor>
      let contains (lookingIn: String) (searchingFor: String) : Bool =
        Builtin.String.indexOf lookingIn searchingFor != -1


      /// Returns the substring of <param string> between the <param from> and <param to> indices.
      /// Negative indices start counting from the end of <param string>.
      let slice (string: String) (from: Int) (``to``: Int) : String =
        let len = PACKAGE.Darklang.Stdlib.String.length string

        let normalize =
          (fun i ->
            (if i < 0 then len + i else i)
            |> PACKAGE.Darklang.Stdlib.Int.min len
            |> PACKAGE.Darklang.Stdlib.Int.max 0)

        let f = normalize from
        let l = normalize ``to``
        let l = if f > l then f else l

        string |> Builtin.String.slice f l


      /// Returns the first <param characterCount> characters of <param string>, as a Builtin.String.
      /// If <param characterCount> is longer than <param string>, returns <param string>.
      /// If <param characterCount> is negative, returns the empty string."
      let first (string: String) (characterCount: Int) : String =
        if characterCount < 0 then
          ""
        else if characterCount > PACKAGE.Darklang.Stdlib.String.length string then
          string
        else
          PACKAGE.Darklang.Stdlib.String.slice_v0 string 0 characterCount


      /// Returns the last <param characterCount> characters of <param string>, as a Builtin.String.
      /// If <param characterCount> is longer than <param string>, returns <param string>.
      /// If <param characterCount> is negative, returns the empty string.
      let last (string: String) (characterCount: Int) : String =
        if characterCount < 0 then
          ""
        else if characterCount > PACKAGE.Darklang.Stdlib.String.length string then
          string
        else
          PACKAGE.Darklang.Stdlib.String.slice_v0
            string
            (PACKAGE.Darklang.Stdlib.String.length string - characterCount)
            (PACKAGE.Darklang.Stdlib.String.length string)


      /// Returns all but the last <param characterCount> characters of <param string>, as a Builtin.String.
      /// If <param characterCount> is longer than <param string>, returns the empty string.
      /// If <param characterCount> is negative, returns <param string>.
      let dropLast (string: String) (characterCount: Int) : String =
        if characterCount < 0 then
          string
        else if characterCount > PACKAGE.Darklang.Stdlib.String.length string then
          ""
        else
          PACKAGE.Darklang.Stdlib.String.slice_v0
            string
            0
            (PACKAGE.Darklang.Stdlib.String.length string - characterCount)


      /// Returns all but the first <param characterCount> characters of <param string>, as a <type String>.
      /// If <param characterCount> is longer than <param string>, returns the empty string.
      /// If <param characterCount> is negative, returns <param string>.
      let dropFirst (string: String) (characterCount: Int) : String =
        if characterCount < 0 then
          string
        else if characterCount > PACKAGE.Darklang.Stdlib.String.length string then
          ""
        else
          PACKAGE.Darklang.Stdlib.String.slice_v0
            string
            characterCount
            (PACKAGE.Darklang.Stdlib.String.length string)


      /// If <param string> is shorter than <param goalLength> characters, returns a
      /// copy of <param string> starting with enough copies of <param padWith> for the
      /// result have <param goalLength>. A returning value is wrapped in a {{Result}}.
      /// If the <param string> is longer than <param goalLength>, returns an unchanged copy of <param string>
      let padStart
        (string: String)
        (padWith: String)
        (goalLength: Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
        if PACKAGE.Darklang.Stdlib.String.length padWith != 1 then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            $"Expected `padWith` to be 1 character long, but it was `\"{padWith}\"`"
        else if PACKAGE.Darklang.Stdlib.String.length string >= goalLength then
          PACKAGE.Darklang.Stdlib.Result.Result.Ok string
        else
          let padCount = goalLength - PACKAGE.Darklang.Stdlib.String.length string
          let pad = PACKAGE.Darklang.Stdlib.String.repeat padWith padCount
          PACKAGE.Darklang.Stdlib.Result.Result.Ok(pad ++ string)


      /// If <param string> is shorter than <param goalLength> characters, returns a
      /// copy of <param string> ending with enough copies of <param padWith> for the
      /// result have <param goalLength>. A returning value is wrapped in a {{Result}}.
      /// If the <param string> is longer than <param goalLength>, returns an unchanged copy of <param string>.
      let padEnd
        (string: String)
        (padWith: String)
        (goalLength: Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =
        if PACKAGE.Darklang.Stdlib.String.length padWith != 1 then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            $"Expected `padWith` to be 1 character long, but it was `\"{padWith}\"`"
        else if PACKAGE.Darklang.Stdlib.String.length string >= goalLength then
          PACKAGE.Darklang.Stdlib.Result.Result.Ok string
        else
          let padCount = goalLength - PACKAGE.Darklang.Stdlib.String.length string
          let pad = PACKAGE.Darklang.Stdlib.String.repeat padWith padCount
          PACKAGE.Darklang.Stdlib.Result.Result.Ok(string ++ pad)


      // TODO: re-write in dark
      /// Returns a copy of <param str> with all leading and trailing whitespace
      /// removed. 'whitespace' here means all Unicode characters with the
      /// {{White_Space}} property, which includes {{\" \"}}, {{\"\\t\"}} and
      /// {{\"\\n\"}}
      let trim (str: String) : String = Builtin.String.trim str


      // TODO: re-write in dark
      /// Returns a copy of <param str> with all leading whitespace removed. 'whitespace'
      /// here means all Unicode characters with the {{White_Space}} property, which
      /// includes {{\" \"}}, {{\"\\t\"}} and {{\"\\n\"}}
      let trimStart (str: String) : String = Builtin.String.trimStart str


      // TODO: re-write in dark
      /// Returns a copy of <param str> with all trailing whitespace removed.
      /// 'whitespace' here means all Unicode characters with the {{White_Space}}
      /// property, which includes {{\" \"}}, {{\"\\t\"}} and {{\"\\n\"}}.
      let trimEnd (str: String) : String = Builtin.String.trimEnd str


      /// Converts the given unicode string to a UTF8-encoded byte sequence.
      let toBytes (str: String) : Bytes = Builtin.String.toBytes str


      /// Converts the UTF8-encoded byte sequence into a string. Errors will be ignored by replacing invalid characters
      let fromBytesWithReplacement (bytes: Bytes) : String =
        Builtin.String.fromBytesWithReplacement bytes


      /// Converts the UTF8-encoded byte sequence into a string
      let fromBytes (bytes: Bytes) : PACKAGE.Darklang.Stdlib.Option.Option<String> =
        Builtin.String.fromBytes bytes


      /// Checks if <param subject> starts with <param prefix>
      let startsWith (subject: String) (prefix: String) : Bool =
        PACKAGE.Darklang.Stdlib.String.slice_v0
          subject
          0
          (PACKAGE.Darklang.Stdlib.String.length prefix)
        == prefix


      /// Checks if <param subject> ends with <param suffix>
      let endsWith (subject: String) (suffix: String) : Bool =
        PACKAGE.Darklang.Stdlib.String.slice_v0
          subject
          (PACKAGE.Darklang.Stdlib.String.length subject
           - PACKAGE.Darklang.Stdlib.String.length suffix)
          (PACKAGE.Darklang.Stdlib.String.length subject)
        == suffix


      /// Returns {{Just index}} of the first occurrence of <param searchFor> in <param str>, or returns {{Nothing}} if <param searchFor> does not occur.
      let indexOf
        (str: String)
        (searchFor: String)
        : PACKAGE.Darklang.Stdlib.Option.Option<Int> =
        if (Builtin.String.indexOf str searchFor) == -1 then
          PACKAGE.Darklang.Stdlib.Option.Option.None
        else
          PACKAGE.Darklang.Stdlib.Option.Option.Some(
            Builtin.String.indexOf str searchFor
          )



      /// Returns the <param string> repeated for a specified <param count> times.
      /// If <param count> is less than or equal to 0, returns an empty string.
      let repeat (string: String) (count: Int) : String =
        if count <= 0 then
          ""
        else
          PACKAGE.Darklang.Stdlib.String.join
            ((PACKAGE.Darklang.Stdlib.List.repeat count string) |> Builtin.unwrap)
            ""


      /// Converts an integer <param n> to its ordinal representation as a string.
      let toOrdinal (n: Int) : String =
        let suffix =
          match n % 10 with
          | 1 -> "st"
          | 2 -> "nd"
          | 3 -> "rd"
          | _ -> "th"

        (PACKAGE.Darklang.Stdlib.Int.toString n) ++ suffix


      /// Splits the given <param str> at each newline character and returns a list of substrings.
      /// If the <param str> is empty, it returns an empty list.
      let splitOnNewline (str: String) : List<String> =
        if str == "" then
          []
        else
          PACKAGE.Darklang.Stdlib.String.split str "\n"


      /// Returns {{Some char}} of the first character of <param str>, or returns {{None}} if <param str> is empty.
      let head (str: String) : PACKAGE.Darklang.Stdlib.Option.Option<Char> =
        if str == "" then
          PACKAGE.Darklang.Stdlib.Option.Option.None
        else
          str
          |> PACKAGE.Darklang.Stdlib.String.toList
          |> PACKAGE.Darklang.Stdlib.List.head