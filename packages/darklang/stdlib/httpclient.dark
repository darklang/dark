module Darklang =
  module Stdlib =
    module HttpClient =

      // Note: this function currently doesn't work, as Base64.encode doesn't exist
      /// Returns a header <type (String*String))> with {{'authorization'}} created using HTTP basic auth
      let basicAuth
        (username: String)
        (password: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<(String * String), String> =
        if Builtin.String.contains "-" username then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            "Username cannot contain a hyphen"
        else
          let encoded = Builtin.String.base64Encode $"{username}:{password}"

          PACKAGE.Darklang.Stdlib.Result.Result.Ok(
            "authorization",
            $"basic {encoded}"
          )

      /// Returns a header <type (String*String))> with {{'authorization'}} set to <param token>
      let bearerToken (token: String) : (String * String) =
        ("authorization", ("bearer " ++ token))


      // TODOs:
      // - maybe the below should be in another ContentType module,
      //   accessible by e.g. `HttpClient.ContentType.form`?
      // - these should likely be Constants (rather than fns)

      /// Returns a header <type (String*String))> with {{content-type}} set for HTML form requests or responses
      let formContentType () : (String * String) =
        ("content-type", "application/x-www-form-urlencoded")

      /// Returns a header <type (String*String))> with {{content-type}} set for JSON requests or responses
      let jsonContentType () : (String * String) =
        ("content-type", "application/json; charset=utf-8")

      /// Returns a header <type (String*String))> with {{'content-type'}} set for plain text requests or responses
      let plainTextContentType () : (String * String) =
        ("content-type", "text/plain; charset=utf-8")

      /// Returns a header <type (String*String))> with {{'content-type'}} set for html requests
      let htmlContentType () : (String * String) =
        ("content-type", "text/html; charset=utf-8")