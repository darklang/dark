module Darklang =
  module Stdlib =
    module Http =
      type Request =
        { url: String
          headers: List<String * String>
          body: Bytes }

      module Request =
        let queryParams
          (req: PACKAGE.Darklang.Stdlib.Http.Request)
          : List<String * String> =
          match req.url |> Builtin.String.split "?" with
          | [] -> []
          | _ :: queryParts ->
            (Builtin.String.join queryParts "")
            |> Builtin.String.split "&"
            |> Builtin.List.map (fun param ->
              match Builtin.String.split param "=" with
              | [ key; value ] -> (key, value)
              | _ -> (param, ""))

        let queryParam
          (req: PACKAGE.Darklang.Stdlib.Http.Request)
          (key: String)
          : PACKAGE.Darklang.Stdlib.Option.Option<String> =
          let found =
            (PACKAGE.Darklang.Stdlib.Http.Request.queryParams req)
            |> Builtin.List.filterMap (fun pair ->
              match pair with
              | (k, v) ->
                if k == key then
                  PACKAGE.Darklang.Stdlib.Option.Option.Some v
                else
                  PACKAGE.Darklang.Stdlib.Option.Option.None
              | _ -> PACKAGE.Darklang.Stdlib.Option.Option.None)

          match found with
          | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
          | [ v ] -> PACKAGE.Darklang.Stdlib.Option.Option.Some v
          // TODO: something else?
          | items ->
            PACKAGE.Darklang.Stdlib.Option.Option.Some(Builtin.String.join items ",")


      type Response =
        { statusCode: Int
          headers: List<String * String>
          body: Bytes }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status <param code> and <param response> body.
      let response
        (body: Bytes)
        (statusCode: Int)
        : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = statusCode
            headers = []
            body = body }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status <param code>, <param response> body and
      /// <param headers>.
      let responseWithHeaders
        (body: Bytes)
        (headers: List<String * String>)
        (statusCode: Int)
        : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = statusCode
            headers = headers
            body = body }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status 200 and <param response> body.
      let success (body: Bytes) : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 200
            headers = []
            body = body }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status 200, <param response> body, with the
      /// Content-Type header set to "text/html; charset=utf-8".
      let responseWithHtml
        (body: String)
        (statusCode: Int)
        : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = statusCode
            headers = [ ("Content-Type", "text/html; charset=utf-8") ]
            body = body |> Builtin.String.toBytes }


      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status 200, <param response> body, with the
      /// Content-Type header set to "text/plain; charset=utf-8".
      let responseWithText
        (text: String)
        (statusCode: Int)
        : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = statusCode
            headers = [ ("Content-Type", "text/plain; charset=utf-8") ]
            body = Builtin.String.toBytes text }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with HTTP status 200, <param response> body, with the
      /// Content-Type header set to "application/json".
      let responseWithJson
        (json: String)
        (statusCode: Int)
        : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = statusCode
            headers = [ ("Content-Type", "application/json") ]
            body = Builtin.String.toBytes json }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with {{302}} status code and redirect to <param url>.
      let redirectTo (url: String) : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 302
            headers = [ ("Location", url) ]
            body = Builtin.Bytes.empty }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with {{400}} status code and <param response> body.
      let badRequest (error: String) : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 400
            headers = []
            body = Builtin.String.toBytes error }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with {{404}} status code.
      let notFound () : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 404
            headers = []
            body = Builtin.Bytes.empty }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with {{401}} status code.
      let unauthorized () : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 401
            headers = []
            body = Builtin.Bytes.empty }

      /// Returns a <type Response> that can be returned from an HTTP handler to
      /// respond with {{403}} status code.
      let forbidden () : PACKAGE.Darklang.Stdlib.Http.Response =
        PACKAGE.Darklang.Stdlib.Http.Response
          { statusCode = 403
            headers = []
            body = Builtin.Bytes.empty }

      type Cookie =
        { expires: DateTime
          maxAge: Int
          domain: String
          path: String
          secure: Bool
          httpOnly: Bool
          sameSite: String }

// TODO: this references several things that don't actually exist
// (e.g. Builtin.DateTime.dayOfWeek)
// /// Returns an HTTP Set-Cookie header <type (String*String)> suitable for use with <fn
// /// Http.responseWithHeaders>, given a cookie <param name>, a <type String>
// /// <param value> for it, and a <type Dict> of Set-Cookie <param params>
// /// ({{Expires}}, {{Max-Age}}, {{Domain}}, {{Path}}, {{Secure}}, {{HttpOnly}},
// /// and/or {{SameSite}}).
// let cookie
//   (name: String)
//   (value: String)
//   (cookie: Cookie)
//   : PACKAGE.Darklang.Stdlib.Result.Result<(String * String), String> =
//   if
//     not (
//       Builtin.List.contains
//         [ "strict"; "lax"; "none" ]
//         (Builtin.String.toLowercase cookie.sameSite)
//     )
//   then
//     Error "SameSite must be either \"Strict\" or \"Lax\" or \"None\""
//   else
//     let expires =
//       let e = cookie.expires
//       $"{Builtin.DateTime.dayOfWeek e}, {Builtin.DateTime.day e} {Builtin.DateTime.month e} {Builtin.DateTime.year e} {Builtin.DateTime.hour e}:{Builtin.DateTime.minute e}:{Builtin.DateTime.second} GMT"

//     let cookie =
//       [ ("Expires", expires)
//         ("Max-Age", cookie.maxAge |> Builtin.Int.toString)
//         ("Domain", cookie.domain)
//         ("Path", cookie.path)
//         ("Secure", cookie.secure |> PACKAGE.Darklang.Stdlib.Bool.toString)
//         ("HttpOnly", cookie.httpOnly |> PACKAGE.Darklang.Stdlib.Bool.toString)
//         ("SameSite", cookie.sameSite) ]
//       |> Builtin.List.filterMap (fun (k, v) -> if v == "" then PACKAGE.Darklang.Stdlib.Option.Option.None else PACKAGE.Darklang.Stdlib.Option.Option.Some(k, v))
//       |> Builtin.List.map (fun (k, v) -> k ++ "=" ++ v)
//       |> Builtin.String.join "; "

//     if cookie == "" then
//       Error "Cookie must have at least one parameter"
//     else
//       Ok("Set-Cookie", name ++ "=" ++ value ++ "; " ++ cookie)