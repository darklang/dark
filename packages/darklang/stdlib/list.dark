module Darklang =
  module Stdlib =
    module List =
      /// Returns an empty list
      let empty = []

      /// Returns a one-element list containing the given <param val>
      let singleton (value: 'a) : List<'a> = [ value ]


      /// Returns {{Some}} the head (first value) of a list.
      /// Returns {{None}} if the list is empty.
      let head (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | head :: _ -> PACKAGE.Darklang.Stdlib.Option.Option.Some head


      /// If <param list> contains at least one value, returns {{Some}} with a list of
      /// every value other than the first. Otherwise, returns {{None}}.
      let tail (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<List<'a>> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | _ :: tail -> PACKAGE.Darklang.Stdlib.Option.Option.Some tail


      /// Add element <param val> to front of <type list> <param list>
      let push (list: List<'a>) (value: 'a) : List<'a> =
        PACKAGE.Darklang.Stdlib.List.append_v0 [ value ] list


      /// Add element <param val> to back of <type list> <param list>
      let pushBack (list: List<'a>) (value: 'a) : List<'a> =
        PACKAGE.Darklang.Stdlib.List.append_v0 list [ value ]


      /// Returns the last value in <param list>, wrapped in an option (<paramNone> if the list is empty)
      let last (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | head :: tail ->
          match tail with
          | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Some head
          | _ -> PACKAGE.Darklang.Stdlib.List.last tail


      // Todo: remove the helper function once we have recursive lambdas
      let reverseHelper (list: List<'a>) (acc: List<'a>) : List<'a> =
        match list with
        | [] -> acc
        | head :: tail ->
          reverseHelper tail (PACKAGE.Darklang.Stdlib.List.push acc head)

      /// Returns a reversed copy of <param list>
      let reverse (list: List<'a>) : List<'a> =
        PACKAGE.Darklang.Stdlib.List.reverseHelper list []


      /// Returns {{Some firstMatch}} where <var firstMatch> is the first value of the
      /// list for which <param fn> returns {{true}}. Returns {{None}} if no such
      /// value exists
      let findFirst
        (list: List<'a>)
        (fn: 'a -> Bool)
        : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | head :: tail ->
          if (fn head) then
            PACKAGE.Darklang.Stdlib.Option.Option.Some head
          else
            PACKAGE.Darklang.Stdlib.List.findFirst tail fn


      /// Returns {{true}} if <param value> is in the list
      let ``member`` (list: List<'a>) (value: 'a) : Bool =
        PACKAGE.Darklang.Stdlib.Option.isSome (
          PACKAGE.Darklang.Stdlib.List.findFirst list (fun elem -> elem == value)
        )


      // TODO: remove this once we have a way to call lambdas recursively
      let repeatUnsafe (times: Int) (value: 'a) : List<'a> =
        if times <= 0 then
          []
        else
          PACKAGE.Darklang.Stdlib.List.push_v0 (repeatUnsafe (times - 1) value) value


      /// Returns a list containing <param val> repeated <param times> times
      let repeat
        (times: Int)
        (value: 'a)
        : PACKAGE.Darklang.Stdlib.Result.Result<List<'a>, String> =
        if times < 0 then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            $"Expected `times` to be positive, but it was `{times |> Builtin.Int.toString}`"
        else
          PACKAGE.Darklang.Stdlib.Result.Result.Ok(
            PACKAGE.Darklang.Stdlib.List.repeatUnsafe times value
          )


      /// Returns the number of values in <param list>
      let ``length`` (list: List<'a>) : Int = Builtin.List.length_v0 list


      /// Returns a list of numbers where each element is {{1}} larger than the
      /// previous. You provide the <param lowest> and <param highest> numbers in the list.
      let range (lowest: Int) (highest: Int) : List<Int> =
        if lowest > highest then
          []
        else
          PACKAGE.Darklang.Stdlib.List.push_v0
            (PACKAGE.Darklang.Stdlib.List.range (lowest + 1) highest)
            lowest


      /// Folds <param list> into a single value, by repeatedly applying <param fn> to any two pairs.
      let fold (list: List<'a>) (init: 'b) (fn: 'b -> 'a -> 'b) : 'b =
        match list with
        | [] -> init
        | head :: tail ->
          let init = fn init head
          PACKAGE.Darklang.Stdlib.List.fold tail init fn


      /// Returns a single list containing the values of every list directly in <paramlist>
      /// (does not recursively flatten nested lists)
      let flatten (list: List<List<'a>>) : List<'a> =
        match list with
        | [] -> []
        | head :: tail ->
          PACKAGE.Darklang.Stdlib.List.append_v0
            head
            (PACKAGE.Darklang.Stdlib.List.flatten tail)


      /// Returns a single list containing the values of <param list> separated by <param sep>
      let interpose (list: List<'a>) (sep: 'a) : List<'a> =
        match list with
        | [] -> []
        | [ single ] -> [ single ]
        | head :: tail ->
          (PACKAGE.Darklang.Stdlib.List.interpose tail sep)
          |> PACKAGE.Darklang.Stdlib.List.push_v0 sep
          |> PACKAGE.Darklang.Stdlib.List.push_v0 head


      /// Returns a list with the first value from <param l1> then the first value
      /// from <param l2>, then the second value from <param l1> then the second value
      /// other list.
      let interleave (l1: List<'a>) (l2: List<'a>) : List<'a> =
        match l1 with
        | [] -> l2
        | aHead :: aTail ->
          match l2 with
          | [] -> l1
          | bHead :: bTail ->
            (PACKAGE.Darklang.Stdlib.List.interleave aTail bTail)
            |> PACKAGE.Darklang.Stdlib.List.push_v0 bHead
            |> PACKAGE.Darklang.Stdlib.List.push_v0 aHead


      /// Returns the passed list, with only unique values, where uniqueness is based
      /// on the result of <param fn>. Only one of each value will be returned, but the
      /// order will not be maintained.
      let uniqueBy (list: List<'a>) (fn: 'a -> 'b) : List<'a> =
        Builtin.List.uniqueBy_v0 list fn


      /// Returns the passed list, with only unique values.
      /// Only one of each value will be returned, but the
      /// order will not be maintained.
      let unique (list: List<'a>) : List<'a> = Builtin.List.unique_v0 list


      /// Returns true if <param list> has no values
      let isEmpty (list: List<'a>) : Bool = list == []


      /// Returns a copy of <param list> with every value sorted in ascending order.
      /// Use this if the values have types Dark knows how to sort.
      /// Consider <fn List.sortBy> or <fn List.sortByComparator> if you need more
      /// control over the sorting process.
      let sort (list: List<'a>) : List<'a> = Builtin.List.sort_v0 list


      /// Returns a copy of <param list>, sorted in ascending order, as if each value
      /// evaluated to {{fn val}}.
      /// For example, {{List.sortBy [\"x\",\"jkl\",\"ab\"] \\val -> String.length
      /// val}} returns {{[ \"x\", \"ab\", \"jkl\" ]}}.
      /// Consider <fn List.sort> if the list values can be directly compared, or <fn
      /// List.sortByComparator> if you want more control over the sorting process.
      let sortBy (list: List<'a>) (fn: 'a -> 'b) : List<'a> =
        Builtin.List.sortBy_v0 list fn


      /// Returns a copy of <param list>, sorted using {{fn a b}} to compare values
      /// <var a> and <var b>.
      /// <param f> must return {{-1}} if <var a> should appear before <var b>, {{1}}
      /// if <var a> should appear after <var b>, and {{0}} if the order of <var a>
      /// and <var b> doesn't matter.
      /// Consider <fn List.sort> or <fn List.sortBy> if you don't need this level
      /// of control.
      let sortByComparator
        (list: List<'a>)
        (fn: 'a -> 'a -> Int)
        : PACKAGE.Darklang.Stdlib.Result.Result<List<'a>, String> =
        Builtin.List.sortByComparator_v0 list fn


      /// Returns a new list with all values in <param as> followed by all values in <param bs>,
      /// preserving the order
      let append (as_: List<'a>) (bs: List<'a>) : List<'a> =
        Builtin.List.append_v0 as_ bs


      /// Return {{true}} if all elements in the list meet the function's criteria, else {{false}}
      let all (list: List<'a>) (fn: 'a -> Bool) : Bool =
        match list with
        | [] -> true
        | head :: tail ->
          if (fn head) then
            PACKAGE.Darklang.Stdlib.List.all tail fn
          else
            false


      // Calls <param f> on every <var val> in <param list>, returning a list of only
      // those values for which {{fn val}} returns {{true}}.
      // Preserves the order of values that were not dropped. Consider <fn
      // List.filterMap> if you also want to transform the values.
      let filter (list: List<'a>) (f: 'a -> Bool) : List<'a> =
        (PACKAGE.Darklang.Stdlib.List.fold list [] (fun acc elem ->
          if (f elem) then
            PACKAGE.Darklang.Stdlib.List.push_v0 acc elem
          else
            acc))
        |> PACKAGE.Darklang.Stdlib.List.reverse


      // Calls <param fn> on every <var val> in <param list>, returning a list that
      // drops some values (filter) and transforms others (map).
      // If {{fn val}} returns {{None}}, drops <var val> from the list.
      // If {{fn val}} returns {{Some newValue}}, replaces <var val> with <var newValue>.
      // Preserves the order of values that were not dropped.
      // This function combines <fn List.filter> and <fn List.map>.
      let filterMap
        (list: List<'a>)
        (fn: 'a -> PACKAGE.Darklang.Stdlib.Option.Option<'b>)
        : List<'b> =
        match list with
        | [] -> []
        | head :: tail ->
          match (fn head) with
          | Some newValue ->
            PACKAGE.Darklang.Stdlib.List.push_v0
              (PACKAGE.Darklang.Stdlib.List.filterMap tail fn)
              newValue
          | None -> PACKAGE.Darklang.Stdlib.List.filterMap tail fn


      /// Drops the first <param count> values from <param list>
      let drop (list: List<'a>) (count: Int) : List<'a> =
        if count <= 0 then
          list
        else
          match list with
          | [] -> []
          | _ :: tail -> PACKAGE.Darklang.Stdlib.List.drop tail (count - 1)


      /// Drops the longest prefix of <param list> which satisfies the predicate <param val>
      let dropWhile (list: List<'a>) (fn: 'a -> Bool) : List<'a> =
        match list with
        | [] -> []
        | head :: tail ->
          if (fn head) then
            PACKAGE.Darklang.Stdlib.List.dropWhile tail fn
          else
            list


      /// Drops the last value from <param list>
      let dropLast (list: List<'a>) : List<'a> =
        match list with
        | [] -> []
        | head :: tail ->
          match tail with
          | [] -> []
          | _ ->
            PACKAGE.Darklang.Stdlib.List.push_v0
              (PACKAGE.Darklang.Stdlib.List.dropLast tail)
              head


      /// Drops all but the first <param count> values from <param list>
      let take (list: List<'a>) (count: Int) : List<'a> =
        if count <= 0 then
          []
        else
          match list with
          | [] -> []
          | head :: tail ->
            PACKAGE.Darklang.Stdlib.List.push_v0
              (PACKAGE.Darklang.Stdlib.List.take tail (count - 1))
              head


      /// Return the longest prefix of <param list> which satisfies the predicate <param fn>
      let takeWhile (list: List<'a>) (fn: 'a -> Bool) : List<'a> =
        match list with
        | [] -> []
        | head :: tail ->
          if (fn head) then
            PACKAGE.Darklang.Stdlib.List.push_v0
              (PACKAGE.Darklang.Stdlib.List.takeWhile tail fn)
              head
          else
            []


      // Calls <param fn> on every <var val> in <param list>, returning a list of the
      // results of those calls.
      // Consider <fn List.filterMap> if you also want to drop some of the values.
      let map (list: List<'a>) (fn: 'a -> 'b) : List<'b> =
        (PACKAGE.Darklang.Stdlib.List.fold list [] (fun acc elem ->
          PACKAGE.Darklang.Stdlib.List.push_v0 acc (fn elem)))
        |> PACKAGE.Darklang.Stdlib.List.reverse


      /// Calls <fn fn> on every <var val> and its <var index> in <param list>,
      /// returning a list of the results of those calls.
      /// Consider <fn List.map> if you don't need the index.
      let indexedMap (list: List<'a>) (fn: 'a -> Int -> 'b) : List<'b> =
        Builtin.List.indexedMap_v0 list fn


      /// Maps <param fn> over <param as> and <param bs> in parallel, calling {{fn a
      /// b}} on every pair of values from <param as> and <param bs>.
      /// If the lists differ in length, values from the longer list are dropped.
      /// For example, if <param as> is {{[1,2]}} and <param bs> is
      /// {{[\"x\",\"y\",\"z\"]}}, returns {{[(f 1 \"x\"), (f 2 \"y\")]}}
      /// Use <fn List.map2> if you want to enforce equivalent lengths for <param as>
      /// and <param bs>.
      let map2shortest
        (as_: List<'a>)
        (bs: List<'b>)
        (fn: 'a -> 'b -> 'c)
        : List<'c> =
        Builtin.List.map2shortest_v0 as_ bs fn


      /// If the lists are the same length, returns {{Just list}} formed by mapping
      /// <param fn> over <param as> and <param bs> in parallel, calling {{fn a b}} on
      /// every pair of values from <param as> and <param bs>.
      /// For example, if <param as> is {{[1,2,3]}} and <param bs> is
      /// {{[\"x\",\"y\",\"z\"]}}, returns {{[(fn 1 \"x\"), (f 2 \"y\"), (f 3
      /// \"z\")]}}.
      /// If the lists differ in length, returns {{Nothing}} (consider <fn
      /// List.map2shortest> if you want to drop values from the longer list
      /// instead).
      let map2
        (as_: List<'a>)
        (bs: List<'b>)
        (fn: 'a -> 'b -> 'c)
        : PACKAGE.Darklang.Stdlib.Option.Option<List<'c>> =
        Builtin.List.map2_v0 as_ bs fn


      /// Returns a list of parallel pairs from <param as> and <param bs>.
      /// If the lists differ in length, values from the longer list are dropped.
      /// For example, if <param as> is {{[1,2]}} and <param bs> is
      /// {{[\"x\",\"y\",\"z\"]}}, returns {{[(1,\"x\"), (2,\"y\")]}}.
      /// Use <fn List.zip> if you want to enforce equivalent lengths for <param as>
      /// and <param bs>.
      /// See <fn List.unzip> if you want to deconstruct the result into <param as>
      /// and <param bs> again.
      let zipShortest (as_: List<'a>) (bs: List<'b>) : List<('a * 'b)> =
        match as_ with
        | [] -> []
        | aHead :: aTail ->
          match bs with
          | [] -> []
          | bHead :: bTail ->
            PACKAGE.Darklang.Stdlib.List.push_v0
              (PACKAGE.Darklang.Stdlib.List.zipShortest aTail bTail)
              (aHead, bHead)


      /// If the lists have the same length, returns {{Some list of tuples}} formed from
      /// parallel pairs in <param l1> and <param l2>.
      /// For example, if <param l1> is {{[1,2,3]}} and <param l2> is
      /// {{[\"x\",\"y\",\"z\"]}}, returns {{[(1,\"x\"), (2,\"y\"), (3,\"z\")]}}.
      /// See <fn List.unzip> if you want to deconstruct <var list> into <param l1>
      /// and <param l2> again.
      /// If the lists differ in length, returns {{None}} (consider
      /// <fn List.zipShortest> if you want to drop values from the longer list
      /// instead).
      let zip
        (l1: List<'a>)
        (l2: List<'b>)
        : PACKAGE.Darklang.Stdlib.Option.Option<List<('a * 'b)>> =
        if
          (PACKAGE.Darklang.Stdlib.List.length l1)
          != (PACKAGE.Darklang.Stdlib.List.length l2)
        then
          PACKAGE.Darklang.Stdlib.Option.Option.None
        else
          match l1 with
          | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Some []
          | aHead :: aTail ->
            match l2 with
            | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Some []
            | bHead :: bTail ->
              match PACKAGE.Darklang.Stdlib.List.zip aTail bTail with
              | Some zipped ->
                PACKAGE.Darklang.Stdlib.Option.Option.Some(
                  PACKAGE.Darklang.Stdlib.List.push_v0 zipped (aHead, bHead)
                )
              | None -> PACKAGE.Darklang.Stdlib.Option.Option.None


      /// Given a <param pairs> list where each value is a tuple of two values (such
      /// lists are constructed by <fn List.zip> and <fn List.zipShortest>), returns
      /// a tuple of two lists, one with every first value, and one with every second
      /// value.
      /// For example, if <fn pairs> is {{[(1,\"x\"), (2,\"y\"), (3,\"z\")]}}, returns
      /// {{([1,2,3], [\"x\",\"y\",\"z\"])}}.
      let unzip (pairs: List<('a * 'b)>) : (List<'a> * List<'b>) =
        match pairs with
        | [] -> ([], [])
        | (a, b) :: tail ->
          let (firsts, seconds) = PACKAGE.Darklang.Stdlib.List.unzip tail

          (PACKAGE.Darklang.Stdlib.List.push_v0 firsts a,
           PACKAGE.Darklang.Stdlib.List.push_v0 seconds b)


      /// Returns {{Some value}} at <param index> in <param list> if <param index> is
      /// less than the length of the list otherwise returns {{None}}.
      let getAt
        (list: List<'a>)
        (index: Int)
        : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        if index < 0 then
          PACKAGE.Darklang.Stdlib.Option.Option.None
        else
          match list with
          | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
          | head :: tail ->
            if index == 0 then
              PACKAGE.Darklang.Stdlib.Option.Option.Some head
            else
              PACKAGE.Darklang.Stdlib.List.getAt tail (index - 1)


      /// Returns {{Just <var randomValue>}}, where <var randomValue> is a randomly
      /// selected value in <param list>. Returns {{Nothing}} if <param list> is
      /// empty.
      let randomElement
        (list: List<'a>)
        : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        Builtin.List.randomElement_v0 list


      /// Groups <param list> into tuples (key, elements), where the key is computed by applying
      /// <param fn> to each element in the list.
      /// For example, if <param list> is {{[1, 2, 3, 4, 5]}} and <param fn>
      /// is {{fn item -> Int.mod_v0 item 2}}, returns {{[(1, [1, 3, 5]), (0, [2, 4])]}}.
      /// Preserves the order of values and of the keys.
      let groupByWithKey (list: List<'a>) (fn: 'a -> 'b) : List<('b * List<'a>)> =
        Builtin.List.groupByWithKey_v0 list fn


      /// Calls <param f> on every <var val> in <param list>, splitting the list into
      /// two - those values for which {{fn val}} returns {{true}}, and those that
      /// return {{false}}
      let partition (ls: List<'a>) (f: 'a -> Bool) : (List<'a> * List<'a>) =
        match ls with
        | [] -> ([], [])
        | head :: tail ->
          let (trueList, falseList) = PACKAGE.Darklang.Stdlib.List.partition tail f

          if (f head) then
            (PACKAGE.Darklang.Stdlib.List.push_v0 trueList head, falseList)
          else
            (trueList, PACKAGE.Darklang.Stdlib.List.push_v0 falseList head)


      /// Applies the given function <param fn> to each element of the <param list>.
      let iter (list: List<'a>) (f: 'a -> Unit) : Unit =
        match list with
        | [] -> ()
        | head :: tail ->
          f head
          PACKAGE.Darklang.Stdlib.List.iter tail f