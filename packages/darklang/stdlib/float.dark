module Darklang =
  module Stdlib =
    module Float =
      /// Round up to an integer value
      let ceiling (a: Float) : Int = Builtin.Float.ceiling a


      /// Round up to an integer value
      let roundUp (a: Float) : Int = Builtin.Float.roundUp a

      /// Round down to an integer value.
      /// Consider <fn Float.truncate> if your goal
      /// is to discard the fractional part of a number: {{Float.floor -1.9 == -2.0}}
      /// but {{Float.truncate -1.9 == -1.0}}
      let floor (a: Float) : Int = Builtin.Float.floor a


      /// Round down to an integer value.
      /// Consider <fn Float.truncate> if your goal is to discard the fractional part
      /// of a number: {{Float.floor -1.9 == -2.0}} but {{Float.truncate -1.9 ==
      /// -1.0}}
      let roundDown (a: Float) : Int = Builtin.Float.roundDown a


      /// Round to the nearest integer value
      let round (a: Float) : Int = Builtin.Float.round a


      /// Returns the <type Float> value wrapped in a {{Result}} of the <type String>
      let roundTowardsZero (a: Float) : Int = Builtin.Float.roundTowardsZero a


      /// Discard the fractional portion of the float, rounding towards zero
      let truncate (a: Float) : Int = Builtin.Float.truncate a


      /// Returns the absolute value of <param a> (turning negative inputs into positive outputs)
      let absoluteValue (a: Float) : Float =
        if (Builtin.Float.lessThan a 0.0) then
          Builtin.Float.multiply a -1.0
        else
          a


      /// Returns the negation of <param a>, {{-a}}
      let negate (a: Float) : Float = Builtin.Float.multiply a -1.0


      /// Returns the sum of all the floats in the list
      let sum (a: List<Float>) : Float =
        PACKAGE.Darklang.Stdlib.List.fold a 0.0 (fun acc next ->
          Builtin.Float.add acc next)


      /// Get the square root of a float
      let sqrt (a: Float) : Float = Builtin.Float.sqrt a


      /// Add <type Float> <param a> to <type Float> <param b>
      let add (a: Float) (b: Float) : Float = Builtin.Float.add a b


      /// Subtract <type Float> <param b> from <type Float> <param a>
      let subtract (a: Float) (b: Float) : Float = Builtin.Float.subtract a b


      /// Multiply <type Float> <param a> by <type Float> <param b>
      let multiply (a: Float) (b: Float) : Float = Builtin.Float.multiply a b


      /// Returns <param base> raised to the power of <param exponent>
      let power (``base``: Float) (exponent: Float) : Float =
        Builtin.Float.power ``base`` exponent


      /// Divide <type Float> <param a> by <type Float> <param b>
      let divide (a: Float) (b: Float) : Float = Builtin.Float.divide a b


      /// Returns true if a is greater than b
      let greaterThan (a: Float) (b: Float) : Bool = Builtin.Float.greaterThan a b

      /// Returns true if a is greater than or equal to b
      let greaterThanOrEqualTo (a: Float) (b: Float) : Bool =
        Builtin.Float.greaterThanOrEqualTo a b


      /// Returns true if a is less than b
      let lessThan (a: Float) (b: Float) : Bool = Builtin.Float.lessThan a b


      /// Returns true if a is less than or equal to b
      let lessThanOrEqualTo (a: Float) (b: Float) : Bool =
        Builtin.Float.lessThanOrEqualTo a b


      /// Returns the lesser of <type Float> <param a> and <type Float> <param b>
      let min (a: Float) (b: Float) : Float =
        if (Builtin.Float.lessThan a b) then a else b


      /// Returns the greater of <type Float> <param a> and <type Float> <param b>
      let max (a: Float) (b: Float) : Float =
        if (Builtin.Float.greaterThan a b) then a else b


      /// If <param value> is within the range given by <param limitA> and <param
      /// limitB>, returns <param value>.
      /// If <param value> is outside the range, returns <param limitA> or <param
      /// limitB>, whichever is closer to <param value>.
      /// Returns <param value> wrapped in a {{Result}}.
      /// <param limitA> and <param limitB> can be provided in any order.
      let clamp
        (value: Float)
        (limitA: Float)
        (limitB: Float)
        : PACKAGE.Darklang.Stdlib.Result.Result<Float, String> =
        if Builtin.Float.isNan limitA || Builtin.Float.isNan limitB then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            "clamp requires arguments to be valid numbers"
        else
          let (lower, upper) =
            if Builtin.Float.lessThan limitA limitB then
              (limitA, limitB)
            else
              (limitB, limitA)

          if Builtin.Float.lessThan value lower then
            PACKAGE.Darklang.Stdlib.Result.Result.Ok lower
          else if Builtin.Float.greaterThan value upper then
            PACKAGE.Darklang.Stdlib.Result.Result.Ok upper
          else
            PACKAGE.Darklang.Stdlib.Result.Result.Ok value


      /// Returns the <type Float> value wrapped in a {{Result}} of the <type String>
      let parse (s: String) : PACKAGE.Darklang.Stdlib.Result.Result<Float, String> =
        Builtin.Float.parse s


      /// Stringify <param float>
      let toString (a: Float) : String = Builtin.Float.toString a


      /// Returns true if <param f> is NaN
      let isNaN (f: Float) : Bool = Builtin.Float.isNan f