module Darklang =
  module LanguageTools =
    /// For interacting with the `dark-packages` canvas,
    /// where package items (types, constants, fns, etc) are maintained.

    // Somehow (*waves hands*) this needs access to a proper namre solvers
    module PackageManager =
      // TODO: This is not the most elegant or complete solution. Revisit.
      let baseUrl () : String =
        match Builtin.environmentGet "DARK_CONFIG_PACKAGE_MANAGER_BASE_URL" with
        | Some baseUrl -> baseUrl
        | None -> "https://packages.darklang.com"

      type FetchError =
        | HttpRequestError of Stdlib.HttpClient.RequestError
        | Not200 of Stdlib.HttpClient.Response
        | JsonParseError of String


      module Owner =
        let getListOfContents
          (owner: String)
          : Stdlib.Result.Result<String, FetchError> =
          let httpResponse =
            Stdlib.HttpClient.request "GET" $"{baseUrl ()}/owner/{owner}" [] []

          match httpResponse with
          | Ok response ->
            if response.statusCode == 200L then
              response.body
              |> Stdlib.String.fromBytesWithReplacement
              |> Stdlib.Result.Result.Ok
            else
              (FetchError.Not200 response) |> Stdlib.Result.Result.Error
          | Error err ->
            (FetchError.HttpRequestError err) |> Stdlib.Result.Result.Error


      module Module =
        let getByName
          (qualifiedModuleName: String)
          : Stdlib.Result.Result<LanguageTools.ProgramTypes.Packages, FetchError> =
          let httpResponse =
            Stdlib.HttpClient.request
              "GET"
              $"{baseUrl ()}/modules/{qualifiedModuleName}"
              []
              []

          match httpResponse with
          | Ok response ->
            if response.statusCode == 200L then
              let parsedMaybe =
                response.body
                |> Stdlib.String.fromBytesWithReplacement
                |> Builtin.jsonParse<LanguageTools.ProgramTypes.Packages>

              match parsedMaybe with
              | Ok parsed -> Stdlib.Result.Result.Ok parsed
              | Error err ->
                (FetchError.JsonParseError err) |> Stdlib.Result.Result.Error
            else
              (FetchError.Not200 response) |> Stdlib.Result.Result.Error
          | Error err ->
            (FetchError.HttpRequestError err) |> Stdlib.Result.Result.Error



      module Stats =
        type Stats = Unit // TODO

      //   let get (baseUrl: String) : Stdlib.Result.Result<Stats, String> =
      //     Error "TODO"


      module Type =
        // let getAll
        //   ()
        //   : Stdlib.Result.Result<List<ProgramTypes.PackageType>, FetchError> =
        //   let httpResponse =
        //     Stdlib.HttpClient.request "GET" $"{baseUrl ()}/types/" [] []

        //   match httpResponse with
        //   | Error err ->
        //     (FetchError.HttpRequestError err) |> Stdlib.Result.Result.Error
        //   | Ok response ->
        //     if response.statusCode == 200L then
        //       let parsedMaybe =
        //         response.body
        //         |> Builtin.String.fromBytesWithReplacement
        //         |> Builtin.Json.parse<List<ProgramTypes.PackageType>>

        //       match parsedMaybe with
        //       | Ok parsed -> Stdlib.Result.Result.Ok parsed
        //       | Error err ->
        //         (FetchError.JsonParseError err) |> Stdlib.Result.Result.Error
        //     else
        //       (FetchError.Not200 response) |> Stdlib.Result.Result.Error

        let byName
          (typeName: String)
          : Stdlib.Result.Result<ProgramTypes.PackageType, String> =
          let typ =
            Stdlib.HttpClient.request
              "GET"
              $"{baseUrl ()}/type/by-name/{typeName}"
              []
              []

          let statusCode =
            typ
            |> Stdlib.Result.map (fun response -> response.statusCode)
            |> Builtin.unwrap

          match statusCode with
          | 200L -> Stdlib.Result.Result.Ok typ
          | e -> Stdlib.Result.Result.Error e

      // let getByTlid (baseUrl: String) (tlid: String) : String = "TODO"

      // let getByFullyQualifiedName (baseUrl: String) (qualifiedTypeName: String):




      module Function =
        // let getAll (baseUrl: String) : String = "TODO"

        // let getByTlid (baseUrl: String) (tlid: String) : String = "TODO"

        let byName
          (fnName: String)
          : Stdlib.Result.Result<LanguageTools.ProgramTypes.PackageFn.PackageFn, String> =
          let fn =
            Stdlib.HttpClient.request
              "GET"
              $"{baseUrl ()}/function/by-name/{fnName}"
              []
              []

          let statusCode =
            fn
            |> Stdlib.Result.map (fun response -> response.statusCode)
            |> Builtin.unwrap

          match statusCode with
          | 200L -> Stdlib.Result.Result.Ok fn
          | e -> Stdlib.Result.Result.Error e


// let getByFullyQualifiedName (baseUrl: String) (name: String) : String =
//   "TODO"


// module Constants =
//   let getAll (baseUrl: String) : String = "TODO"

//   let getByTlid (baseUrl: String) (tlid: String) : String = "TODO"

//   let getByFullyQualifiedName (baseUrl: String) (name: String) : String =
//     "TODO"