module Darklang.LanguageTools.Parser.FunctionDeclaration

type ArgMapEntry = | Entry of name: String * index: int

/// Parses a package function declaration parameter
///
/// i.e. in `let foo (x: Int): ...`, this parses `(x: Int)`
let parseFnDeclParam
  (node: ParsedNode)
  : Stdlib.Result.Result<WrittenTypes.FnDeclaration.Parameter * ArgMapEntry, WrittenTypes.Unparseable> =
  if node.typ == "unit" then
    (WrittenTypes.FnDeclaration.UnitParameter { range = node.range })
    |> WrittenTypes.FnDeclaration.Parameter.Unit
    |> Stdlib.Result.Result.Ok

  elif node.typ == "fn_decl_param" then
    let nameNode =
      findAndParseRequired node "identifier" (fun node ->
        (Identifiers.parseVariable node) |> Stdlib.Result.Result.Ok)

    let typNode = findAndParseRequired node "typ" TypeReference.parse
    let symLeftParenNode = findField node "symbol_left_paren"
    let symColonNode = findField node "symbol_colon"
    let symRightParenNode = findField node "symbol_right_paren"

    match
      nameNode, typNode, symLeftParenNode, symColonNode, symRightParenNode
    with
    | Ok name, Ok typ, Ok leftParen, Ok colon, Ok rightParen ->
      (WrittenTypes.FnDeclaration.NormalParameter
        { range = node.range
          name = name
          typ = typ
          symbolLeftParen = leftParen.range
          symbolColon = colon.range
          symbolRightParen = rightParen.range })
      |> WrittenTypes.FnDeclaration.Parameter.Normal
      |> Stdlib.Result.Result.Ok

    | _ -> createUnparseableError node

  else
    createUnparseableError node

/// Parses a package function definition's parameters
let parseParams
  (node: ParsedNode)
  : Stdlib.Result.Result<List<WrittenTypes.FnDeclaration.Parameter>, ArgMap, WrittenTypes.Unparseable> =
  if node.typ == "fn_decl_params" then
    let defs =
      Stdlib.List.fold // change to foldi
        node.children
        (Stdlib.Result.Result.Ok [])
        (fun defs param i ->
          match defs, parseFnDeclParam param with
          | Ok defs, Ok fnDeclParam ->
            // oh it parsed OK
            // the index is 'i'
            // add (fnDeclParam.name, i) to the argMapThing
            (Stdlib.List.push defs fnDeclParam) |> Stdlib.Result.Result.Ok

          | _ -> createUnparseableError node)

    match defs with
    | Error _e -> defs
    | Ok defs -> (Stdlib.List.reverse defs) |> Stdlib.Result.Result.Ok

  else
    createUnparseableError node


/// Parses a package function declaration
///
/// i.e. `let add (x: Int64) (y: Int64): Int64 = x + y`,
///
/// - `add` is the function name
/// - `x: Int` and `y: Int` are the parameters
/// - `Int` is the return type
/// - `x + y` is the body
let parse
  (node: ParsedNode)
  : Stdlib.Result.Result<WrittenTypes.FnDeclaration.FnDeclaration, WrittenTypes.Unparseable> =
  if node.typ == "fn_decl" then
    let nameNode =
      findAndParseRequired node "name" (fun node ->
        (Identifiers.parseFn node) |> Stdlib.Result.Result.Ok)

    let selfName = Option.Some nameNode.something

    let typeParams =
      match findNodeByFieldName node "type_params" with
      | Some typeParamsNode ->
        typeParamsNode
        |> findNodeByFieldName "params"
        |> Stdlib.Option.map (fun node ->
          match node.children |> Stdlib.List.chunkBySize 2L with
          | Ok pairs ->
            pairs |> Stdlib.List.map (fun typeParamSeparatorPair ->
              match typeParamSeparatorPair with
              | [ typeParamNode; _separator ] | [ typeParamNode ] ->
                match typeParamNode |> findField "variable" with
                | Ok name ->
                  (typeParamNode.range, name.text) |> Stdlib.Result.Result.Ok
                | Error _ ->
                  (createUnparseableError typeParamNode) |> Stdlib.Result.Result.Error

              | _ ->
                (createUnparseableError typeParamsNode)
                |> Stdlib.Result.Result.Error)
          | Error _ ->
            [ (createUnparseableError typeParamsNode) |> Stdlib.Result.Result.Error ])

      | None -> Stdlib.Option.Option.None

    let typeParams =
      match typeParams with
      | Some typeParams -> typeParams |> Stdlib.Result.collect
      | None -> [] |> Stdlib.Result.Result.Ok

    let paramsNode, argMap =
      findAndParseRequired node "params" FunctionDeclaration.parseParams

    let returnTypeNode =
      findAndParseRequired node "return_type" TypeReference.parse

    let exprParsingContext = { selfName = selfName; argMap = argMap }

    let bodyNode = findAndParseRequired node "body" Expr.parse exprParsingContext
    let keywordLetNode = findField node "keyword_let"
    let symColonNode = findField node "symbol_colon"
    let symEqualsNode = findField node "symbol_equals"

    match
      nameNode,
      typeParams,
      paramsNode,
      returnTypeNode,
      bodyNode,
      keywordLetNode,
      symColonNode,
      symEqualsNode
    with
    | Ok name,
      Ok typeParams,
      Ok params,
      Ok rt,
      Ok body,
      Ok keywordLet,
      Ok colon,
      Ok equals ->
      (WrittenTypes.FnDeclaration.FnDeclaration
        { range = node.range
          name = name
          typeParams = typeParams
          parameters = params
          returnType = rt
          body = body
          keywordLet = keywordLet.range
          symbolColon = colon.range
          symbolEquals = equals.range })
      |> Stdlib.Result.Result.Ok

    | _ -> createUnparseableError node

  else
    createUnparseableErrorMsg node $"Expected fn_decl, got {node.typ}"