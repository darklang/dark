/// Search functions tool
module Darklang.LanguageTools.McpServer.Tools.SearchFunctions


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


/// Get the tool description for search_functions
let getToolDescription () : ModelContextProtocol.ToolDescription =
  ModelContextProtocol.ToolDescription {
    name = "search_functions"
    description = Stdlib.Option.Option.Some "Search for Darklang functions by name or description"
    inputSchema = Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("query", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "Search query for function names or descriptions")
        ]);
        ("namespace", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "Optional namespace to search within (e.g., Stdlib, Builtin)")
        ])
      ]);
      ("required", Json.Array [Json.String "query"])
    ]
    outputSchema = Stdlib.Option.Option.Some (Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("results", Json.Object [
          ("type", Json.String "array");
          ("description", Json.String "List of matching functions")
        ])
      ])
    ])
    annotations = Stdlib.Option.Option.Some (ModelContextProtocol.ToolAnnotations {
      title = Stdlib.Option.Option.Some "Function Search"
      readOnlyHint = Stdlib.Option.Option.Some true
      destructiveHint = Stdlib.Option.Option.Some false
      idempotentHint = Stdlib.Option.Option.Some true
      openWorldHint = Stdlib.Option.Option.Some false
    })
  }

/// Handle the search_functions tool call
let handleToolCall (args: Json) : Json =
  let query = 
    match args with
    | Object fields ->
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "query") with
        | Some (_, String q) -> q
        | _ -> ""
    | _ -> ""

  // Simple hardcoded results for now
  let resultsText = $"Found 4 functions matching '{query}'"

  (ModelContextProtocol.Tools.CallToolResponse.CallToolResult {
    content = [
      ModelContextProtocol.Tools.CallToolResponse.ContentItem.TextContent resultsText
    ]
    isError = false
  })
  |> ModelContextProtocol.Tools.CallToolResponse.toJson