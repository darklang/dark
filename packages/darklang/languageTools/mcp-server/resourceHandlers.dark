/// Resource handlers for the MCP server
module Darklang.LanguageTools.McpServer.ResourceHandlers


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>



/// Handle a resources/list request
let handleListResourcesRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  : McpState =
  log "Handling resources/list request"
  
  let resourcesList = state.resources |> Stdlib.Dict.values
  
  // Convert internal resource format to MCP ResourceDescription
  let mcpResources = resourcesList |> Stdlib.List.map (fun resource ->
    ModelContextProtocol.Resources.ListResourcesResponse.ResourceDescription {
      uri = resource.uri;
      name = resource.name;
      description = resource.description;
      mimeType = resource.mimeType
    }
  )
  
  let listResponse = 
    ModelContextProtocol.Resources.ListResourcesResponse.ListResourcesResponse {
      resources = mcpResources;
      nextCursor = Stdlib.Option.Option.None
    }
  
  let responseJson = ModelContextProtocol.Resources.ListResourcesResponse.toJson listResponse

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) responseJson
  state

/// Handle a resources/read request
let handleReadResourceRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  (params: ModelContextProtocol.Resources.ReadResourceParams.ReadResourceParams)
  : McpState =
  log $"Handling resources/read request for: {params.uri}"
  
  let content = Resources.getResourceContent params.uri

  let response = 
    (ModelContextProtocol.Resources.ReadResourceResponse.ReadResourceResponse {
      contents = [content]
    })
    |> ModelContextProtocol.Resources.ReadResourceResponse.toJson

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) response
  state

