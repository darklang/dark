/// Prompt handlers for the MCP server
module Darklang.LanguageTools.McpServer.PromptHandlers


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


/// Handle a prompts/list request
let handleListPromptsRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  : McpState =
  log "Handling prompts/list request"

  let promptsList = state.prompts |> Stdlib.Dict.values

  log "A"

  // Convert internal prompt format to MCP PromptDescription
  let mcpPrompts = promptsList |> Stdlib.List.map (fun prompt ->
    let mcpArguments =
      match prompt.arguments with
      | Some args ->
        let convertedArgs = args |> Stdlib.List.map (fun arg ->
          ModelContextProtocol.Prompts.PromptArgument.PromptArgument {
            name = arg.name;
            description = arg.description;
            required = arg.required
          }
        )
        Stdlib.Option.Option.Some convertedArgs
      | None -> Stdlib.Option.Option.None

    ModelContextProtocol.Prompts.PromptDescription.PromptDescription {
      name = prompt.name;
      description = prompt.description;
      arguments = mcpArguments
    }
  )
  log "B"

  let listResult =
    ModelContextProtocol.Prompts.ListPromptsResponse.ListPromptsResult {
      prompts = mcpPrompts;
      nextCursor = Stdlib.Option.Option.None
    }

  log "C"
  Builtin.debug "c" listResult


  let resultJson = ModelContextProtocol.Prompts.ListPromptsResponse.toJson listResult

  log "D"

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) resultJson
  state

/// Handle a prompts/get request
let handleGetPromptRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  (name: String)
  (arguments: Json)
  : McpState =
  log $"Handling prompts/get request for: {name}"

  let messages = Prompts.generatePromptContent name arguments

  let response =
    (ModelContextProtocol.Prompts.GetPromptResponse.GetPromptResult {
      description = Stdlib.Option.Option.None
      messages = messages
    })
    |> ModelContextProtocol.Prompts.GetPromptResponse.toJson

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) response
  state