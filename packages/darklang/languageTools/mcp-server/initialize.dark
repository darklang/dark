/// Initialization handling for the MCP server
module Darklang.LanguageTools.McpServer


// <aliases>
// Json type alias removed to prevent UNIQUE constraint conflicts - use shared aliases.dark
// </aliases>


/// Handle the MCP initialize request and return initial server state
let handleInitializeRequest 
  (requestId: JsonRPC.RequestId)
  (params: ModelContextProtocol.LifeCycle.InitializeRequest.InitializeParams)
  : McpState =
  log "Handling initialize request"

  // Build server capabilities using proper types
  let serverCapabilities = 
    ModelContextProtocol.ServerCapabilities {
      resources = Stdlib.Option.Option.Some (ModelContextProtocol.ResourceCapabilities {
        listChanged = Stdlib.Option.Option.Some true;
        subscribe = Stdlib.Option.Option.Some false
      });
      tools = Stdlib.Option.Option.Some (ModelContextProtocol.ToolCapabilities {
        listChanged = Stdlib.Option.Option.Some true
      });
      prompts = Stdlib.Option.Option.Some (ModelContextProtocol.PromptCapabilities {
        listChanged = Stdlib.Option.Option.Some true
      });
      logging = Stdlib.Option.Option.Some (Json.Object []);
      completions = Stdlib.Option.Option.None;
      experimental = Stdlib.Option.Option.None
    }

  let serverInfo = 
    ModelContextProtocol.ServerInfo {
      name = "Darklang MCP Server";
      version = "1.0.0"
    }

  let initializeResult = 
    ModelContextProtocol.LifeCycle.InitializeRequest.InitializeResult.InitializeResult {
      protocolVersion = ModelContextProtocol.protocolVersion;
      serverInfo = serverInfo;
      capabilities = serverCapabilities;
      instructions = Stdlib.Option.Option.None
    }

  // Convert to JSON using the typed approach
  let resultJson = ModelContextProtocol.LifeCycle.InitializeRequest.InitializeResult.toJson initializeResult

  // Send the response
  sendSuccessResponse (Stdlib.Option.Option.Some requestId) resultJson

  // Return initialized state with all capabilities loaded
  let state = initialState ()
  
  // Load available tools
  let tools = Tools.getAllTools ()
  
  // Load available resources  
  let resources = Resources.getAllResources ()
  
  // Load available prompts
  let prompts = Prompts.getAllPrompts ()

  { state with
      initialized = true
      tools = tools
      resources = resources
      prompts = prompts }

/// Handle the initialized notification
let handleInitializedNotification (state: McpState) : McpState =
  log "Received initialized notification"
  { state with initialized = true }