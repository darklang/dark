module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      // <aliases>
      type Option = PACKAGE.Darklang.Stdlib.Option.Option
      type ID = PACKAGE.Darklang.LanguageTools.ID
      type TLID = PACKAGE.Darklang.LanguageTools.TLID

      // language
      type RTTypeReference =
        PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeReference

      type RTDval = PACKAGE.Darklang.LanguageTools.RuntimeTypes.Dval

      type RTTypeName = PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeName.TypeName

      type RTFnName = PACKAGE.Darklang.LanguageTools.RuntimeTypes.FnName.FnName
      type RTParam = PACKAGE.Darklang.LanguageTools.RuntimeTypes.Param

      // RuntimeErrors
      type REErrorOutput = PACKAGE.Darklang.LanguageTools.RuntimeErrors.ErrorOutput
      // </aliases>


      module TypeChecker =
        type Location = Option<TLID * ID>

        type Context =
          | FunctionCallParameter of
            fnName: RTFnName *
            parameter: RTParam *
            paramIndex: Int *
            location: Location

          | FunctionCallResult of
            fnName: RTFnName *
            returnType: RTTypeReference *
            location: Location

          | RecordField of
            recordTypeName: RTTypeName *
            fieldName: String *
            fieldType: RTTypeReference *
            location: Location

          | DictKey of key: String * typ: (RTTypeReference * Location)

          | EnumField of
            enumTypeName: RTTypeName *
            caseName: String *
            fieldIndex: Int *  // nth argument to the enum constructor
            fieldCount: Int *
            fieldType: RTTypeReference *
            location: Location

          | DBQueryVariable of
            varName: String *
            expected: RTTypeReference *
            location: Location

          | DBSchemaType of
            name: String *
            expectedType: RTTypeReference *
            location: Location

          | ListIndex of index: Int * listTyp: RTTypeReference * parent: Context

          | TupleIndex of index: Int * elementType: RTTypeReference * parent: Context


        type Error =
          //| VTTODOMismatchedType of String
          //| VTTODOMergedValueTypeWrapper of Darklang.LanguageTools.RuntimeTypes.Dval.SomeErrorType

          | ValueNotExpectedType of
            actualValue: RTDval *
            expectedType: RTTypeReference *
            Context

          | TypeDoesntExist of RTTypeName * Context

        module Error =
          let valuePath (context: Context) : String =
            // match context with
            // | TCK.FunctionCallParameter(_, parameter, _, _) -> parameter.name
            // | TCK.FunctionCallResult(_, _, _) -> "result"
            // | TCK.RecordField(_, fieldName, _, _) -> fieldName
            // | TCK.DictKey(key, _, _) -> $".{key}"
            // | TCK.EnumField(_, caseName, _, _, _, _) -> caseName
            // | TCK.DBSchemaType(dbName, _, _) -> dbName
            // | TCK.DBQueryVariable(varName, _, _) -> varName
            // | TCK.ListIndex(index, _, parent) -> valuePath parent + $"[{index}]"
            // | TCK.TupleIndex(index, _, parent) -> valuePath parent + $"[{index}]"
            "RTETODO: valuePath"

          let rootContext (context: Context) : Context =
            match context with
            | FunctionCallParameter _ -> context
            | FunctionCallResult _ -> context
            | RecordField _ -> context
            | DictKey _ -> context
            | EnumField _ -> context
            | DBSchemaType _ -> context
            | DBQueryVariable _ -> context
            | ListIndex(_, _, parent) -> rootContext parent
            | TupleIndex(_, _, parent) -> rootContext parent


          /// Return the segments describing the context as a short name, used in the description of errors
          let contextSummary (context: Context) : List<ErrorSegment.ErrorSegment> =
            match context with
            | FunctionCallParameter(fnName, parameter, paramIndex, _) ->
              [ ErrorSegment.ErrorSegment.FunctionName fnName
                ErrorSegment.ErrorSegment.String "'s "
                ErrorSegment.ErrorSegment.Ordinal(paramIndex + 1)
                ErrorSegment.ErrorSegment.String " argument ("
                ErrorSegment.ErrorSegment.ParamName parameter.name
                ErrorSegment.ErrorSegment.String ")" ]

            | FunctionCallResult(fnName, returnType, _) ->
              [ ErrorSegment.ErrorSegment.FunctionName fnName
                ErrorSegment.ErrorSegment.String "'s return value" ]



            | RecordField(recordType, fieldName, _, _) ->
              [ ErrorSegment.ErrorSegment.TypeName recordType
                ErrorSegment.ErrorSegment.String "'s "
                ErrorSegment.ErrorSegment.FieldName fieldName
                ErrorSegment.ErrorSegment.String " field" ]

            // | DictKey(key, _, _) ->
            //   let typeName =
            //     FQName.BuiltIn { name = TypeName.TypeName "Dict"; modules = []; version = 0 }
            //   [ TypeName typeName; String "'s "; FieldName key; String " value" ]

            | EnumField(enumType, caseName, fieldIndex, _, _, _) ->
              [ ErrorSegment.ErrorSegment.TypeName enumType
                ErrorSegment.ErrorSegment.String "."
                ErrorSegment.ErrorSegment.InlineFieldName caseName
                ErrorSegment.ErrorSegment.String "'s "
                ErrorSegment.ErrorSegment.Ordinal(fieldIndex + 1)
                ErrorSegment.ErrorSegment.String " argument" ]

            | DBSchemaType(dbName, expectedType, _) ->
              [ ErrorSegment.ErrorSegment.String "DB "
                ErrorSegment.ErrorSegment.DBName dbName
                ErrorSegment.ErrorSegment.String "'s value" ]

            | DBQueryVariable(varName, _, _) ->
              [ ErrorSegment.ErrorSegment.String "Variable "
                ErrorSegment.ErrorSegment.VarName varName ]

            // | TupleIndex(index, typ, parent) ->
            //   let rootContext = rootContext parent
            //   [ String "In " ]
            //   @ contextSummary rootContext
            //   @ [ String ", the nested value "; VarName(valuePath context) ]

            // | ListIndex(index, typ, parent) ->
            //   let rootContext = rootContext parent
            //   [ String "In " ]
            //   @ contextSummary rootContext
            //   @ [ String ", the nested value "; VarName(valuePath context) ]

            | context ->
              [ ErrorSegment.ErrorSegment.String
                  $"(RTETODO: contextSummary {(Builtin.Json.serialize<Context> context) |> Builtin.unwrap})" ]

          let rec contextAsActualExpected
            (argument: RuntimeTypes.Dval)
            (context: Context)
            : List<ErrorSegment.ErrorSegment> * List<ErrorSegment.ErrorSegment> =

            // RTETODO: We do actual and expected in the same function so that we can display
            // them the same way. This hasn't been ported for all Context types, but
            // should be.
            let defaultActual =
              [ ErrorSegment.ErrorSegment.IndefiniteArticle
                ErrorSegment.ErrorSegment.TypeOfValue argument
                ErrorSegment.ErrorSegment.String ": "
                ErrorSegment.ErrorSegment.FullValue argument ]

            match context with
            | FunctionCallParameter(fnName, parameter, paramIndex, _) ->
              let segments =
                [ ErrorSegment.ErrorSegment.String "("
                  ErrorSegment.ErrorSegment.InlineParamName parameter.name
                  ErrorSegment.ErrorSegment.String ": "
                  ErrorSegment.ErrorSegment.TypeReference parameter.typ
                  ErrorSegment.ErrorSegment.String ")" ]

              (defaultActual, segments)


            | FunctionCallResult(fnName, returnType, _) ->
              //   // format:
              //   // Option<String>
              let segment = [ ErrorSegment.ErrorSegment.TypeReference returnType ]
              (defaultActual, segment)

            | RecordField(recordType, fieldName, fieldType, _) ->
              //   // format:
              //   // TODO: fetch the type and lookup the field definition as a comment
              let comment = []
              //   // ({ name : string; ... }) // some description
              // let comment =
              //   if fieldDef.description = "" then
              //     []
              //   else
              //     [ String " // "; Description fieldDef.description ]

              let segment =
                Builtin.List.append
                  [ ErrorSegment.ErrorSegment.String "({ "
                    ErrorSegment.ErrorSegment.InlineFieldName fieldName
                    ErrorSegment.ErrorSegment.String ": "
                    ErrorSegment.ErrorSegment.TypeReference fieldType
                    ErrorSegment.ErrorSegment.String "; ... })" ]
                  comment

              (defaultActual, segment)


            //   defaultActual,
            //   ([ String "({ "
            //     InlineFieldName fieldName
            //     String ": "
            //     TypeReference fieldType
            //     String "; ... })" ]
            //   @ comment)


            // | TCK.DictKey(key, typ, _) ->
            // format:
            // ({ "name" : String; ... })
            //   defaultActual,
            //   ([ String "({ "
            //     InlineFieldName key
            //     String ": "
            //     TypeReference typ
            //     String "; ... })" ])


            | EnumField(enumType, caseName, fieldIndex, fieldCount, fieldType, _) ->
              //   // format:
              //   //   Ok (..., string, ...) // some description
              //   // RTETODO: extract description from the type definition later

              let prefix =
                if fieldIndex == 0 then
                  []
                else
                  [ ErrorSegment.ErrorSegment.String "..., " ]

              let suffix =
                if fieldIndex == fieldCount - 1 then
                  []
                else
                  [ ErrorSegment.ErrorSegment.String ", ..." ]

              let openParen =
                if fieldCount > 0 then
                  [ ErrorSegment.ErrorSegment.String "(" ]
                else
                  []

              let closeParen =
                if fieldCount > 0 then
                  [ ErrorSegment.ErrorSegment.String ")" ]
                else
                  []

              //CLEANUP de-duplicate these 2 segments a bit
              let fieldTypeSegment =
                [ ErrorSegment.ErrorSegment.ShortTypeName enumType
                  ErrorSegment.ErrorSegment.String "."
                  ErrorSegment.ErrorSegment.InlineFieldName caseName
                  ErrorSegment.ErrorSegment.String " " ]
                |> Builtin.List.append openParen
                |> Builtin.List.append prefix
                |> Builtin.List.append
                  [ ErrorSegment.ErrorSegment.TypeReference fieldType ]
                |> Builtin.List.append suffix
                |> Builtin.List.append closeParen

              let argumentSegment =
                [ ErrorSegment.ErrorSegment.ShortTypeName enumType
                  ErrorSegment.ErrorSegment.String "."
                  ErrorSegment.ErrorSegment.InlineFieldName caseName
                  ErrorSegment.ErrorSegment.String " " ]
                |> Builtin.List.append openParen
                |> Builtin.List.append prefix
                |> Builtin.List.append
                  [ ErrorSegment.ErrorSegment.TypeOfValue argument ]
                |> Builtin.List.append suffix
                |> Builtin.List.append closeParen

              (argumentSegment, fieldTypeSegment)


            | DBSchemaType(dbName, expectedType, _) ->
              //   // format:
              //   // String
              let segment = [ ErrorSegment.ErrorSegment.TypeReference expectedType ]
              (defaultActual, segment)


            | DBQueryVariable(varName, expected, _) ->
              let segment =
                [ ErrorSegment.ErrorSegment.String "("
                  ErrorSegment.ErrorSegment.InlineVarName varName
                  ErrorSegment.ErrorSegment.String ": "
                  ErrorSegment.ErrorSegment.TypeReference expected
                  ErrorSegment.ErrorSegment.String ")" ]

              (defaultActual, segment)

            // | TCK.ListIndex(index, typ, parent) -> defaultActual, [ TypeReference typ ]

            // | TCK.TupleIndex(index, typ, parent) -> defaultActual, [ TypeReference typ ]
            | _ ->
              defaultActual,
              [ ErrorSegment.ErrorSegment.String
                  $"(RTETODO: contextAsActualExpected {(Builtin.Json.serialize<Context> context) |> Builtin.unwrap})" ]

          // let contextVerb (context: Context) : String =
          //   match context with
          //   | FunctionCallParameter _ -> "passed"
          //   | FunctionCallResult _ -> "returned"
          //   | RecordField _ -> "passed"
          //   | DictKey _ -> "passed"
          //   | EnumField _ -> "passed"
          //   | DBSchemaType _ -> "passed"
          //   | DBQueryVariable _ -> "passed"
          //   | ListIndex _ -> "passed"
          //   | TupleIndex _ -> "passed"

          let toSegments (e: Error) : REErrorOutput =
            match e with
            | ValueNotExpectedType(argument, expected, context) ->
              let summary =
                Builtin.List.append
                  (contextSummary context)
                  [ ErrorSegment.ErrorSegment.String " should be "
                    ErrorSegment.ErrorSegment.IndefiniteArticle
                    ErrorSegment.ErrorSegment.TypeReference expected ]

              let extraExplanation =
                [ ErrorSegment.ErrorSegment.String ". However, "
                  ErrorSegment.ErrorSegment.IndefiniteArticle
                  ErrorSegment.ErrorSegment.TypeOfValue argument
                  ErrorSegment.ErrorSegment.String " ("
                  ErrorSegment.ErrorSegment.InlineValue argument
                  ErrorSegment.ErrorSegment.String ") was passed instead." ]

              let (actual, expected) = contextAsActualExpected argument context

              ErrorOutput
                { summary = summary
                  extraExplanation = extraExplanation
                  actual = actual
                  expected = expected }

            // | TypeDoesntExist(typeName, _) ->
            //   // Perhaps this should be an internal error as this shouldn't be possible
            //   let summary = [ TypeName typeName; String " doesn't exist" ]

            //   let extraExplanation = []
            //   let actual = []
            //   let expected = []

            //   { summary = summary
            //     extraExplanation = extraExplanation
            //     actual = actual
            //     expected = expected }

            // | VTTODOMismatchedType msg ->
            //   { summary = [ String "VTTODOMismatchedType"; String msg ]
            //     extraExplanation = []
            //     actual = []
            //     expected = [] }

            // | VTTODOMergedValueTypeWrapper err ->
            //   { summary = [ String "VTTODOMergedValueTypeWrapper"; String err ]
            //     extraExplanation = []
            //     actual = []
            //     expected = [] }
            | _ ->
              ErrorOutput
                { summary =
                    [ ErrorSegment.ErrorSegment.String
                        "RTETODO typeChecker.toSegments" ]
                  extraExplanation = []
                  actual = []
                  expected = [] }