// TODO:
//alias PT = PACKAGE.Darklang.LanguageTools.ProgramTypes
//alias RT = PACKAGE.Darklang.Stdlib.RuntimeTypes

module Darklang =
  module PrettyPrinter =
    module Packages =

      type Module =
        { name: String
          types: List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType>
          fns: List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn>
          constants:
            List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant>
          submodules: List<Module> }

      let withType
        (ms: List<Module>)
        (t: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType)
        : List<Module> =
        match t.name.modules with
        | [] ->
          [ Module
              { name =
                  (t.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                constants = []
                submodules = [] } ]

        | firstModuleNamePart :: submoduleNames ->
          // TODO: check if firstModuleNamePart is already in m
          let (foundModuleMaybe, otherModules) =
            ms
            |> PACKAGE.Darklang.Stdlib.List.partition (fun m ->
              m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              Module
                { name = firstModuleNamePart
                  types =
                    [ { t with
                          name = { t.name with modules = [] } } ]
                  fns = []
                  constants = []
                  submodules = [] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let typeWithoutFirstModuleNamePartOfModule =
              { t with
                  name = { t.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  constants = []
                  submodules = withType [] typeWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append
              otherModules
              [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  types =
                    PACKAGE.Darklang.Stdlib.List.append
                      foundModule.types
                      [ { t with
                            name = { t.name with modules = [] } } ] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let typeWithoutFirstModuleNamePartOfModule =
              { t with
                  name = { t.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    withType
                      foundModule.submodules
                      typeWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]


      let withFn
        (ms: List<Module>)
        (f: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn)
        : List<Module> =
        match f.name.modules with
        | [] ->
          [ Module
              { name =
                  (f.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                constants = []
                submodules = [] } ]

        | firstModuleNamePart :: submoduleNames ->
          let (foundModuleMaybe, otherModules) =
            ms
            |> PACKAGE.Darklang.Stdlib.List.partition (fun m ->
              m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              Module
                { name = firstModuleNamePart
                  types = []
                  fns =
                    [ { f with
                          name = { f.name with modules = [] } } ]
                  constants = []
                  submodules = [] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let fnWithoutFirstModuleNamePartOfModule =
              { f with
                  name = { f.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  constants = []
                  submodules = withFn [] fnWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append
              otherModules
              [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  fns =
                    PACKAGE.Darklang.Stdlib.List.append
                      foundModule.fns
                      [ { f with
                            name = { f.name with modules = [] } } ] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let fnWithoutFirstModuleNamePartOfModule =
              { f with
                  name = { f.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    withFn
                      foundModule.submodules
                      fnWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]

      let withConstant
        (ms: List<Module>)
        (c: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant)
        : List<Module> =
        match c.name.modules with
        | [] ->
          [ Module
              { name =
                  (c.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                constants = []
                submodules = [] } ]

        | firstModuleNamePart :: submoduleNames ->
          let (foundModuleMaybe, otherModules) =
            ms
            |> PACKAGE.Darklang.Stdlib.List.partition (fun m ->
              m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  constants =
                    [ { c with
                          name = { c.name with modules = [] } } ]
                  submodules = [] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let constantWithoutFirstModuleNamePartOfModule =
              { c with
                  name = { c.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  constants = []
                  submodules =
                    withConstant [] constantWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append
              otherModules
              [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  constants =
                    PACKAGE.Darklang.Stdlib.List.append
                      foundModule.constants
                      [ { c with
                            name = { c.name with modules = [] } } ] }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let constantWithoutFirstModuleNamePartOfModule =
              { c with
                  name = { c.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    withConstant
                      foundModule.submodules
                      constantWithoutFirstModuleNamePartOfModule }

            PACKAGE.Darklang.Stdlib.List.append otherModules [ updatedModule ]



      let toModules (p: PACKAGE.Darklang.Stdlib.Packages) : List<Module> =
        let empty = []

        let modulesAfterTypes =
          PACKAGE.Darklang.Stdlib.List.fold p.types empty (fun (modules, t) ->
            withType modules t)

        let modulesWithTypesAndFns =
          PACKAGE.Darklang.Stdlib.List.fold
            p.fns
            modulesAfterTypes
            (fun (modules, f) -> withFn modules f)

        let modulesWithTypesAndFnsAndConstants =
          PACKAGE.Darklang.Stdlib.List.fold
            p.constants
            modulesWithTypesAndFns
            (fun (modules, c) -> withConstant modules c)

        modulesWithTypesAndFnsAndConstants


    let packageModule (m: Packages.Module) : String =
      let headerPart = $"module {m.name} =\n"

      let typesPart =
        match m.types with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | types ->
          m.types
          |> PACKAGE.Darklang.Stdlib.List.map (fun t ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageType t)
          |> PACKAGE.Darklang.Stdlib.String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some

      let fnsPart =
        match m.fns with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | fns ->
          m.fns
          |> PACKAGE.Darklang.Stdlib.List.map (fun f ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageFn f)
          |> PACKAGE.Darklang.Stdlib.String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some

      let constantsPart =
        match m.constants with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | constants ->
          m.constants
          |> PACKAGE.Darklang.Stdlib.List.map (fun c ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageConstant c)
          |> PACKAGE.Darklang.Stdlib.String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some

      let submodulesPart =
        match m.submodules with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | submodules ->
          submodules
          |> PACKAGE.Darklang.Stdlib.List.map (fun m ->
            PACKAGE.Darklang.PrettyPrinter.packageModule m)
          |> PACKAGE.Darklang.Stdlib.String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some

      let parts =
        [ typesPart; fnsPart; constantsPart; submodulesPart ]
        |> PACKAGE.Darklang.Stdlib.List.filterMap (fun s -> s)

      match parts with
      | [] ->
        // CLEANUP: actually error
        "Error - module defined somehow without parts"
      | parts ->
        let bodyPart =
          (PACKAGE.Darklang.Stdlib.String.join parts "\n\n")
          |> PACKAGE.Darklang.PrettyPrinter.indent

        $"module {m.name} =\n{bodyPart}"

    let packages (p: PACKAGE.Darklang.Stdlib.Packages) : String =
      let withOwnerStuffRepresentedAsRootLevelModule =
        PACKAGE.Darklang.Stdlib.Packages
          { types =
              p.types
              |> PACKAGE.Darklang.Stdlib.List.map (fun t ->
                { t with
                    name =
                      { t.name with
                          modules =
                            PACKAGE.Darklang.Stdlib.List.append
                              [ t.name.owner ]
                              t.name.modules
                          owner = "(redacted)" } })
            fns =
              p.fns
              |> PACKAGE.Darklang.Stdlib.List.map (fun f ->
                { f with
                    name =
                      { f.name with
                          modules =
                            PACKAGE.Darklang.Stdlib.List.append
                              [ f.name.owner ]
                              f.name.modules
                          owner = "(redacted)" } })

            constants =
              p.constants
              |> PACKAGE.Darklang.Stdlib.List.map (fun c ->
                { c with
                    name =
                      { c.name with
                          modules =
                            PACKAGE.Darklang.Stdlib.List.append
                              [ c.name.owner ]
                              c.name.modules
                          owner = "(redacted)" } }) }

      let modules = Packages.toModules withOwnerStuffRepresentedAsRootLevelModule


      // CLEANUP make ordering 'better' in some way
      modules
      |> PACKAGE.Darklang.Stdlib.List.map (fun m ->
        PACKAGE.Darklang.PrettyPrinter.packageModule m)
      |> PACKAGE.Darklang.Stdlib.String.join "\n\n"