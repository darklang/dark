// TODO:
//alias PT = LanguageTools.ProgramTypes
//alias RT = Stdlib.RuntimeTypes

// TODO: update all of the 'namePart's to nameToStrings with fn inputs

// CLEANUP split into a few files - easier to manage, at this point.
// i.e. common, typeReference, expr, declarations, packages, sourceFile
module Darklang.PrettyPrinter.ProgramTypes


module NameResolutionError =
  let source (nre: LanguageTools.ProgramTypes.NameResolutionError) : String =
    match nre with
    | NotFound names
    | InvalidName names -> Stdlib.String.join names "."

  let error (nre: LanguageTools.ProgramTypes.NameResolutionError) : String =
    match nre with
    | NotFound names -> Stdlib.String.join names "." ++ " not found"
    | InvalidName names -> Stdlib.String.join names "." ++ " is not a valid name"


// Context for relative name resolution - when we know what module we're currently in,
// we can shorten names that share the same prefix
type Context =
  { currentModule: Stdlib.Option.Option<String>
    currentFunction: Stdlib.Option.Option<String>
    argMap: Dict<Int64> }

let defaultContext =
  Context { currentModule = Stdlib.Option.Option.None; currentFunction = Stdlib.Option.Option.None; argMap = Stdlib.Dict.empty }

let packageNameWithContext
  (ctx: Context)
  (owner: String)
  (modules: List<String>)
  (name: String)
  : String =
  let modulesPart =
    match modules with
    | [] -> ""
    | modules ->
      let modules = Stdlib.String.join modules "."
      $"{modules}."

  let fullName = $"{owner}.{modulesPart}{name}"

  // Try to shorten relative to current context
  match ctx.currentModule with
  | Some currentModule ->
    // If we're in Darklang.Stdlib and referencing Darklang.Stdlib.Option.Option,
    // just show "Option.Option"
    if Stdlib.String.startsWith fullName currentModule then
      let prefix = currentModule ++ "."
      Stdlib.String.dropFirst fullName (Stdlib.String.length prefix)
    else if owner == "Darklang" then
      // For Darklang packages, drop the "Darklang." prefix for brevity
      let withoutDarklang = Stdlib.String.dropFirst fullName 9L // "Darklang.".length
      withoutDarklang
    else
      fullName
  | None ->
    match owner with
    | "Tests" -> $"{modulesPart}{name}"
    | "Darklang" ->
      // For Darklang packages, just show module path
      $"{modulesPart}{name}"
    | _ -> $"{owner}.{modulesPart}{name}"

let packageName
  (owner: String)
  (modules: List<String>)
  (name: String)
  : String =
  packageNameWithContext defaultContext owner modules name


module FQTypeName =
  module Package =
    let atDefinition
      (hash: LanguageTools.ProgramTypes.FQTypeName.Package)
      : String =
      match LanguageTools.PackageManager.Type.get hash with
      | Some p -> p.name.name
      | None -> hash

    let fullForReference
      (hash: LanguageTools.ProgramTypes.FQTypeName.Package)
      : String =
      match LanguageTools.PackageManager.Type.get hash with
      | Some p -> packageName p.name.owner p.name.modules p.name.name
      | None -> hash


  let atDefinition
    (t: LanguageTools.ProgramTypes.FQTypeName.FQTypeName)
    : String =
    match t with
    | Package p -> PrettyPrinter.ProgramTypes.FQTypeName.Package.atDefinition p

  let fullForReference
    (t: LanguageTools.ProgramTypes.FQTypeName.FQTypeName)
    : String =
    match t with
    | Package p ->
      PrettyPrinter.ProgramTypes.FQTypeName.Package.fullForReference p


module FQValueName =
  module Builtin =
    let fullForReference
      (t: LanguageTools.ProgramTypes.FQValueName.Builtin)
      : String =
      let namePart = t.name

      let versionPart =
        if t.version == 0 then
          ""
        else
          $"_v{Stdlib.Int32.toString t.version}"

      $"Builtin.{namePart}{versionPart}"


  module Package =
    let atDefinition
      (hash: LanguageTools.ProgramTypes.FQValueName.Package)
      : String =
      match LanguageTools.PackageManager.Value.get hash with
      | Some p -> p.name.name
      | None -> hash

    let fullForReference
      (hash: LanguageTools.ProgramTypes.FQValueName.Package)
      : String =
      match LanguageTools.PackageManager.Value.get hash with
      | Some p -> packageName p.name.owner p.name.modules p.name.name
      | None -> hash



  let atDefinition
    (t: LanguageTools.ProgramTypes.FQValueName.FQValueName)
    : String =
    match t with
    | Builtin b ->
      PrettyPrinter.ProgramTypes.FQValueName.Builtin.fullForReference b
    | Package p ->
      PrettyPrinter.ProgramTypes.FQValueName.Package.fullForReference p

  let fullForReference
    (t: LanguageTools.ProgramTypes.FQValueName.FQValueName)
    : String =
    match t with
    | Builtin b ->
      PrettyPrinter.ProgramTypes.FQValueName.Builtin.fullForReference b
    | Package p ->
      PrettyPrinter.ProgramTypes.FQValueName.Package.fullForReference p


module FQFnName =
  module Builtin =
    let fullForReference
      (t: LanguageTools.ProgramTypes.FQFnName.Builtin)
      : String =
      let namePart = t.name

      let versionPart =
        if t.version == 0 then
          ""
        else
          $"_v{Stdlib.Int32.toString t.version}"

      $"Builtin.{namePart}{versionPart}"


  module Package =
    let atDefinition
      (hash: LanguageTools.ProgramTypes.FQFnName.Package)
      : String =
      match LanguageTools.PackageManager.Function.get hash with
      | Some p -> p.name.name
      | None -> hash

    let fullForReference
      (hash: LanguageTools.ProgramTypes.FQFnName.Package)
      : String =
      match LanguageTools.PackageManager.Function.get hash with
      | Some p -> packageName p.name.owner p.name.modules p.name.name
      | None -> hash


  let atDefinition (t: LanguageTools.ProgramTypes.FQFnName.FQFnName) : String =
    match t with
    | Builtin _b ->
      "why are you trying to print a stdlib type name _definition_?"
    | Package p -> PrettyPrinter.ProgramTypes.FQFnName.Package.atDefinition p

  let fullForReference
    (t: LanguageTools.ProgramTypes.FQFnName.FQFnName)
    : String =
    match t with
    | Builtin b ->
      PrettyPrinter.ProgramTypes.FQFnName.Builtin.fullForReference b
    | Package p ->
      PrettyPrinter.ProgramTypes.FQFnName.Package.fullForReference p


let typeReference (t: LanguageTools.ProgramTypes.TypeReference) : String =
  match t with
  | TVariable varName -> "'" ++ varName

  | TUnit -> "Unit"
  | TBool -> "Bool"
  | TInt8 -> "Int8"
  | TUInt8 -> "UInt8"
  | TInt16 -> "Int16"
  | TUInt16 -> "UInt16"
  | TInt32 -> "Int32"
  | TUInt32 -> "UInt32"
  | TInt64 -> "Int64"
  | TUInt64 -> "UInt64"
  | TInt128 -> "Int128"
  | TUInt128 -> "UInt128"
  | TFloat -> "Float"
  | TChar -> "Char"
  | TString -> "String"
  | TDateTime -> "DateTime"
  | TUuid -> "Uuid"

  | TList inner -> $"List<{PrettyPrinter.ProgramTypes.typeReference inner}>"

  | TTuple(first, second, theRest) ->
    (Stdlib.List.append [ first; second ] theRest)
    |> Stdlib.List.map (fun item ->
      PrettyPrinter.ProgramTypes.typeReference item)
    |> Stdlib.String.join " * "
    |> fun parts -> "(" ++ parts ++ ")"

  | TDict inner -> $"Dict<{PrettyPrinter.ProgramTypes.typeReference inner}>"

  | TCustomType(typ, args) ->
    let argsPart =
      match args with
      | [] -> ""
      | args ->
        args
        |> Stdlib.List.map (fun arg ->
          PrettyPrinter.ProgramTypes.typeReference arg)
        |> Stdlib.String.join ", "
        |> fun parts -> $"<{parts}>"

    let typeNamePart =
      match typ with
      | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
      | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

    $"{typeNamePart}{argsPart}"

  | TDB inner -> $"DB<{PrettyPrinter.ProgramTypes.typeReference inner}>"

  | TFn(args, ret) ->
    let argPart =
      args
      |> Stdlib.List.map (fun arg ->
        PrettyPrinter.ProgramTypes.typeReference arg)
      |> Stdlib.String.join " -> "

    $"{argPart} -> {PrettyPrinter.ProgramTypes.typeReference ret}"
  | _ ->
    let s = Builtin.Json.serialize<LanguageTools.ProgramTypes.TypeReference> t

    $"({s})"


let letPattern (lp: LanguageTools.ProgramTypes.LetPattern) : String =
  match lp with
  | LPUnit _id -> "()"
  | LPVariable(_id, name) -> name
  | LPTuple(_id, first, second, theRest) ->
    (Stdlib.List.append [ first; second ] theRest)
    |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.letPattern item)
    |> Stdlib.String.join ", "
    |> fun parts -> "(" ++ parts ++ ")"

let matchPattern (mp: LanguageTools.ProgramTypes.MatchPattern) : String =
  match mp with
  | MPVariable(_id, name) -> name

  | MPUnit _id -> "()"

  | MPBool(_id, b) -> Stdlib.Bool.toString b

  | MPInt8(_id, i) -> (Stdlib.Int8.toString i) ++ "y"
  | MPUInt8(_id, i) -> (Stdlib.UInt8.toString i) ++ "uy"
  | MPInt16(_id, i) -> (Stdlib.Int16.toString i) ++ "s"
  | MPUInt16(_id, i) -> (Stdlib.UInt16.toString i) ++ "us"
  | MPInt32(_id, i) -> (Stdlib.Int32.toString i) ++ "l"
  | MPUInt32(_id, i) -> (Stdlib.UInt32.toString i) ++ "ul"
  | MPInt64(_id, i) -> (Stdlib.Int64.toString i) ++ "L"
  | MPUInt64(_id, i) -> (Stdlib.UInt64.toString i) ++ "UL"
  | MPInt128(_id, i) -> (Stdlib.Int128.toString i) ++ "Q"
  | MPUInt128(_id, i) -> (Stdlib.UInt128.toString i) ++ "Z"

  | MPFloat(_id, sign, whole, remainder) ->
    let remainderPart = PrettyPrinter.processRemainder remainder
    $"{PrettyPrinter.sign sign}{whole}.{remainderPart}"

  | MPChar(_id, c) -> $"'{c}'"
  | MPString(_id, s) -> $"\"{PrettyPrinter.escapeSpecialCharacters s}\""

  | MPList(_id, items) ->
    items
    |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.matchPattern item)
    |> Stdlib.String.join "; "
    |> fun parts -> "[" ++ parts ++ "]"

  | MPListCons(_id, head, tail) ->
    let headPart = PrettyPrinter.ProgramTypes.matchPattern head
    let tailPart = PrettyPrinter.ProgramTypes.matchPattern tail
    $"{headPart} :: {tailPart}"

  | MPTuple(_, first, second, theRest) ->
    (Stdlib.List.append [ first; second ] theRest)
    |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.matchPattern item)
    |> Stdlib.String.join ", "
    |> fun parts -> "(" ++ parts ++ ")"

  | MPEnum(_id, caseName, fieldPats) ->
    match fieldPats with
    | [] -> $"{caseName}"
    | fieldPats ->
      let fieldPart =
        fieldPats
        |> Stdlib.List.map (fun pat -> PrettyPrinter.ProgramTypes.matchPattern pat)
        |> Stdlib.String.join ", "

      $"{caseName}({fieldPart})"

  | MPOr(_id, patterns) ->
    patterns
    |> Stdlib.List.map (fun pat -> PrettyPrinter.ProgramTypes.matchPattern pat)
    |> Stdlib.String.join " | "


let binaryOperation (b: LanguageTools.ProgramTypes.BinaryOperation) : String =
  match b with
  // CLEANUP consider surrounding with spaces
  | BinOpAnd -> "&&"
  | BinOpOr -> "||"

let infixFnName (i: LanguageTools.ProgramTypes.InfixFnName) : String =
  match i with
  | ArithmeticPlus -> "+"
  | ArithmeticMinus -> "-"
  | ArithmeticMultiply -> "*"
  | ArithmeticDivide -> "/"
  | ArithmeticModulo -> "%"
  | ArithmeticPower -> "^"
  | ComparisonGreaterThan -> ">"
  | ComparisonGreaterThanOrEqual -> ">="
  | ComparisonLessThan -> "<"
  | ComparisonLessThanOrEqual -> "<="
  | ComparisonEquals -> "=="
  | ComparisonNotEquals -> "!="
  | StringConcat -> "++"

let infix (i: LanguageTools.ProgramTypes.Infix) : String =
  match i with
  | InfixFnCall i -> PrettyPrinter.ProgramTypes.infixFnName i
  | BinOp b -> PrettyPrinter.ProgramTypes.binaryOperation b

let stringSegment (ctx: Context) (s: LanguageTools.ProgramTypes.StringSegment) : String =
  match s with
  | StringText text -> text
  | StringInterpolation expr -> $"{{{PrettyPrinter.ProgramTypes.expr ctx expr}}}"

let pipeExpr (ctx: Context) (p: LanguageTools.ProgramTypes.PipeExpr) : String =
  match p with
  | EPipeVariable(_id, varName, exprs) ->
    let exprs =
      exprs
      |> Stdlib.List.map (PrettyPrinter.ProgramTypes.expr ctx)
      |> Stdlib.String.join " "
    if exprs == "" then varName else $"({varName} {exprs})"

  | EPipeLambda(_id, pats, body) ->
    let argsPart =
      pats
      |> Stdlib.List.map (fun lp -> letPattern lp)
      |> Stdlib.String.join " "
    $"fun {argsPart} -> {expr ctx body}"

  | EPipeInfix(_id, infix, expr) ->
    let infixPart = PrettyPrinter.ProgramTypes.infix infix
    let exprPart = PrettyPrinter.ProgramTypes.expr ctx expr
    $"({infixPart}) {exprPart}"

  | EPipeFnCall(_id, fnName, typeArgs, args) ->
    let fnNamePart =
      match fnName with
      | Ok name -> PrettyPrinter.ProgramTypes.FQFnName.fullForReference name
      | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

    let typeArgsPart =
      match typeArgs with
      | [] -> ""
      | _ ->
        typeArgs
        |> Stdlib.List.map (fun typeArg ->
          PrettyPrinter.ProgramTypes.typeReference typeArg)
        |> Stdlib.String.join ", "
        |> fun parts -> $"<{parts}>"

    let argsPart =
      args
      |> Stdlib.List.map (fun arg -> PrettyPrinter.ProgramTypes.expr ctx arg)
      |> Stdlib.List.map (fun arg -> $"{arg}")
      |> Stdlib.String.join " "

    if argsPart == "" then
      $"{fnNamePart}{typeArgsPart}"
    else
      $"{fnNamePart}{typeArgsPart} {argsPart}"

  // LanguageTools.ID *
  // typeName: LanguageTools.ProgramTypes.TypeName.TypeName *
  // caseName: String *
  // fields: List<LanguageTools.ProgramTypes.Expr>
  | EPipeEnum(_id, typeName, caseName, fields) ->
    let typeNamePart =
      match typeName with
      | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
      | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

    match fields with
    | [] -> $"{typeNamePart}.{caseName}"
    | fields ->
      let fieldPart =
        fields
        |> Stdlib.List.map (fun field -> PrettyPrinter.ProgramTypes.expr ctx field)
        |> Stdlib.List.map (fun field -> $"({field})")
        |> Stdlib.String.join " "

      $"{typeNamePart}.{caseName}{fieldPart}"

let expr (ctx: Context) (e: LanguageTools.ProgramTypes.Expr) : String =
  match e with
  | EUnit _id -> "()"

  | EBool(_id, b) -> Stdlib.Bool.toString b

  | EInt8(_id, i) -> Stdlib.Int8.toString i ++ "y"
  | EUInt8(_id, i) -> Stdlib.UInt8.toString i ++ "uy"
  | EInt16(_id, i) -> Stdlib.Int16.toString i ++ "s"
  | EUInt16(_id, i) -> Stdlib.UInt16.toString i ++ "us"
  | EInt32(_id, i) -> Stdlib.Int32.toString i ++ "l"
  | EUInt32(_id, i) -> Stdlib.UInt32.toString i ++ "ul"
  | EInt64(_id, i) -> (Stdlib.Int64.toString i) ++ "L"
  | EUInt64(_id, i) -> (Stdlib.UInt64.toString i) ++ "UL"
  | EInt128(_id, i) -> Stdlib.Int128.toString i ++ "Q"
  | EUInt128(_id, i) -> Stdlib.UInt128.toString i ++ "Z"

  | EFloat(_id, sign, whole, remainder) ->
    let signPart = PrettyPrinter.sign sign
    let remainderPart = PrettyPrinter.processRemainder remainder
    $"{signPart}{whole}.{remainderPart}"

  | EChar(_id, c) -> "'" ++ c ++ "'"

  | EString(_id, segments) ->
    match segments with
    | [] -> "\"\""
    | [ StringText text ] -> $"\"{PrettyPrinter.escapeSpecialCharacters text}\""
    | segments ->
      let inner =
        segments
        |> Stdlib.List.map (fun segment -> PrettyPrinter.ProgramTypes.stringSegment ctx segment)
        |> Stdlib.String.join ""
      $"$\"{inner}\""


  // structures of data
  | EList(_id, items) ->
    items
    |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.expr ctx item)
    |> Stdlib.String.join "; "
    |> fun parts -> "[" ++ parts ++ "]"

  | EDict(_id, pairs) ->
    let pairPart =
      pairs
      |> Stdlib.List.map (fun pair ->
        let (key, value) = pair
        $"{key} = {PrettyPrinter.ProgramTypes.expr ctx value}")
      |> Stdlib.String.join "; "
      |> fun parts -> "{ " ++ parts ++ " }"

    $"Dict {pairPart}"


  | ETuple(_id, first, second, theRest) ->
    (Stdlib.List.append [ first; second ] theRest)
    |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.expr ctx item)
    |> Stdlib.String.join ", "
    |> fun parts -> "(" ++ parts ++ ")"

  | ERecord(_id, typeName, typeArgs, fields) ->
    let typeNamePart =
      match typeName with
      | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
      | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

    let typeArgsPart =
      match typeArgs with
      | [] -> ""
      | _ ->
        typeArgs
        |> Stdlib.List.map (fun typeArg ->
          PrettyPrinter.ProgramTypes.typeReference typeArg)
        |> Stdlib.String.join ", "
        |> fun parts -> $"<{parts}>"

    let fieldPart =
      fields
      |> Stdlib.List.map (fun pair ->
        let (name, expr) = pair
        $"{name} = {PrettyPrinter.ProgramTypes.expr ctx expr}")
      |> Stdlib.String.join "; "
      |> fun parts -> "{ " ++ parts ++ " }"

    $"{typeNamePart}{typeArgsPart} {fieldPart}"

  | EEnum(_id, typeName, typeArgs, caseName, fields) ->
    let typeNamePart =
      match typeName with
      | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
      | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

    let typeArgsPart =
      match typeArgs with
      | [] -> ""
      | _ ->
        typeArgs
        |> Stdlib.List.map (fun typeArg ->
          PrettyPrinter.ProgramTypes.typeReference typeArg)
        |> Stdlib.String.join ", "
        |> fun parts -> $"<{parts}>"

    match fields with
    | [] -> $"{typeNamePart}{typeArgsPart}.{caseName}"
    | fields ->
      let fieldPart =
        fields
        |> Stdlib.List.map (fun field -> PrettyPrinter.ProgramTypes.expr ctx field)
        |> Stdlib.String.join ", "
      $"{typeNamePart}{typeArgsPart}.{caseName}({fieldPart})"


  // declaring and accessing variables
  | ELet(_id, pattern, rhs, body) ->
    let patternPart = PrettyPrinter.ProgramTypes.letPattern pattern
    let rhsPart = PrettyPrinter.ProgramTypes.expr ctx rhs
    let bodyPart = PrettyPrinter.ProgramTypes.expr ctx body
    $"let {patternPart} =\n{PrettyPrinter.indent rhsPart}\n{bodyPart}"

  | ERecordFieldAccess(_id, expr, fieldName) ->
    let exprPart = PrettyPrinter.ProgramTypes.expr ctx expr

    // TODO: only sometimes need to wrap exprPart in parens
    match expr with
    | EVariable(_, _)
    | ERecordFieldAccess(_, _, _) -> $"{exprPart}.{fieldName}"
    | _ -> $"({exprPart}).{fieldName}"

  | EVariable(_id, name) -> name

  | EArg(_id, index) ->
    // Find the parameter name that corresponds to this index
    ctx.argMap
    |> Stdlib.Dict.toList
    |> Stdlib.List.findFirst (fun (name, idx) -> idx == index)
    |> Stdlib.Option.map (fun (name, _) -> name)
    |> Stdlib.Option.withDefault $"earg{Stdlib.Int64.toString index}"

  // control flow
  | EIf(_id, cond, thenBranch, elseBranch) ->
    let condPart = PrettyPrinter.ProgramTypes.expr ctx cond

    let thenPart =
      (PrettyPrinter.ProgramTypes.expr ctx thenBranch) |> PrettyPrinter.indent

    match elseBranch with
    | None -> $"if {condPart} then\n{thenPart}"
    | Some elseBranch ->
      match elseBranch with
      | EIf(_, _, _, _) ->
        let elsePart = (PrettyPrinter.ProgramTypes.expr ctx elseBranch)
        $"if {condPart} then\n{thenPart}\nelse {elsePart}"

      | _ ->
        let elsePart = (PrettyPrinter.ProgramTypes.expr ctx elseBranch) |> PrettyPrinter.indent
        $"if {condPart} then\n{thenPart}\nelse\n{elsePart}"

  | EMatch(_id, arg, cases) ->
    let cases =
      cases
      |> Stdlib.List.map (fun case ->
        let patternPart = PrettyPrinter.ProgramTypes.matchPattern case.pat

        let whenPart =
          match case.whenCondition with
          | Some cond ->
            let whenCondition = PrettyPrinter.ProgramTypes.expr ctx cond
            $" when {whenCondition}"
          | None -> ""

        let rhsPart =
          (PrettyPrinter.ProgramTypes.expr ctx case.rhs) |> PrettyPrinter.indent

        $"| {patternPart}{whenPart} ->\n{rhsPart}")

    let casesPart = Stdlib.String.join cases "\n"

    let argPart = PrettyPrinter.ProgramTypes.expr ctx arg

    $"match {argPart} with\n{casesPart}"


  | EPipe(_id, expr, pipeExprs) ->
    // LanguageTools.ID *
    // LanguageTools.ProgramTypes.Expr *
    // List<LanguageTools.ProgramTypes.PipeExpr>
    let exprPart = PrettyPrinter.ProgramTypes.expr ctx expr

    let pipeParts =
      pipeExprs
      |> Stdlib.List.map (fun pipeExpr ->
        PrettyPrinter.ProgramTypes.pipeExpr ctx pipeExpr)
      |> Stdlib.String.join "\n|> "

    $"{exprPart}\n|> {pipeParts}"



  // function calls

  | EInfix(_id, infix, left, right) ->
    let infixPart = PrettyPrinter.ProgramTypes.infix infix
    let leftPart = PrettyPrinter.ProgramTypes.expr ctx left
    let rightPart = PrettyPrinter.ProgramTypes.expr ctx right
    // TODO: might need to wrap in parens
    $"({leftPart}) {infixPart} ({rightPart})"

  | ELambda(_id, pats, body) ->
    let patsPart =
      pats
      |> Stdlib.List.map (fun pat -> letPattern pat)
      |> Stdlib.String.join " "

    let bodyPart = PrettyPrinter.ProgramTypes.expr ctx body

    $"(fun {patsPart} ->\n{PrettyPrinter.indent bodyPart})"

  | EApply(_id, fnName, typeArgs, args) ->
    let fnNamePart = PrettyPrinter.ProgramTypes.expr ctx fnName

    let argsPart =
      args
      |> Stdlib.List.map (fun arg ->
        match arg with
        | EApply(_, _, _, _) -> $"({PrettyPrinter.ProgramTypes.expr ctx arg})"
        | _ -> PrettyPrinter.ProgramTypes.expr ctx arg)
      |> Stdlib.String.join " "

    match typeArgs with
    | [] -> $"{fnNamePart} {argsPart}"
    | _ ->
      let typeArgsPart =
        typeArgs
        |> Stdlib.List.map (fun typeArg ->
          PrettyPrinter.ProgramTypes.typeReference typeArg)
        |> Stdlib.String.join ", "

      $"{fnNamePart}<{typeArgsPart}> {argsPart}"

  | EFnName(_id, fnName) ->
    match fnName with
    | Ok name -> PrettyPrinter.ProgramTypes.FQFnName.fullForReference name
    | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

  // LanguageTools.ID *
  // record: LanguageTools.ProgramTypes.Expr *
  // updates: List<String * LanguageTools.ProgramTypes.Expr>
  | ERecordUpdate(_id, record, updates) ->
    let recordPart = PrettyPrinter.ProgramTypes.expr ctx record

    let updatePart =
      updates
      |> Stdlib.List.map (fun pair ->
        let (fieldName, expr) = pair
        $"{fieldName} = {PrettyPrinter.ProgramTypes.expr ctx expr}")
      |> Stdlib.String.join "; "

    // TODO: don't always need the parens

    $"{{ {recordPart} with {updatePart} }}"

  | EValue(_id, value) ->
    match value with
    | Ok name ->
      PrettyPrinter.ProgramTypes.FQValueName.fullForReference name
    | Error e -> PrettyPrinter.ProgramTypes.NameResolutionError.source e

  | EStatement (_id, first, next) ->
    let firstPart = PrettyPrinter.ProgramTypes.expr ctx first
    let nextPart = PrettyPrinter.ProgramTypes.expr ctx next
    $"{firstPart}\n{nextPart}"

  | ESelf _id ->
    match ctx.currentFunction with
    | Some functionName -> functionName
    // This should never happen - ESelf should only appear within a function body
    // CLEANUP: consider making this a runtime error instead
    | None -> "ESelf"

  // CLEANUP: remove this case before shipping to users
  | expr ->
    let s = Builtin.Json.serialize<LanguageTools.ProgramTypes.Expr> expr

    $"{s}"

// CLEANUP this isn't currently used
// if/when we uncomment this, take note that the `m` argument is a function
// that we may not fully yet support (esp in name-resolution)
// let deprecation<'name>
//   (m: 'name -> String)
//   (d: LanguageTools.ProgramTypes.Deprecation)
//   : String =
//   match d with
//   | NotDeprecated -> "NotDeprecated"
//   | RenamedTo name -> $"RenamedTo {m name}"
//   | ReplacedBy name -> $"ReplacedBy {m name}"
//   | DeprecatedBecause reason -> $"DeprecatedBecause {reason}"

module TypeDeclaration =
  let recordField
    (d: LanguageTools.ProgramTypes.TypeDeclaration.RecordField)
    : String =
    // TODO: /// for description
    $"{d.name}: {PrettyPrinter.ProgramTypes.typeReference d.typ}"

  let enumField
    (d: LanguageTools.ProgramTypes.TypeDeclaration.EnumField)
    : String =
    match d.label with
    | None -> PrettyPrinter.ProgramTypes.typeReference d.typ
    | Some label ->
      $"{label}: {PrettyPrinter.ProgramTypes.typeReference d.typ}"

  let enumCase
    (c: LanguageTools.ProgramTypes.TypeDeclaration.EnumCase)
    : String =
    match c.fields with
    | [] -> "| " ++ c.name
    | fields ->
      let fieldPart =
        fields
        |> Stdlib.List.map (fun field ->
          PrettyPrinter.ProgramTypes.TypeDeclaration.enumField field)
        |> Stdlib.String.join " * "

      $"| {c.name} of {fieldPart}"


let customType
  (d: LanguageTools.ProgramTypes.TypeDeclaration.TypeDeclaration)
  : String =
  match d.definition with
  | Alias typeRef -> PrettyPrinter.ProgramTypes.typeReference typeRef

  | Record fields ->
    let fieldsPart =
      fields
      |> Stdlib.List.map (fun field ->
        PrettyPrinter.ProgramTypes.TypeDeclaration.recordField field)
      |> Stdlib.String.join "\n  "

    "{ " ++ (fieldsPart) ++ " }"

  | Enum cases ->
    cases
    |> Stdlib.List.map (fun case ->
      PrettyPrinter.ProgramTypes.TypeDeclaration.enumCase case)
    |> Stdlib.String.join "\n"


module Handler =
  let cronInterval
    (c: LanguageTools.ProgramTypes.Handler.CronInterval)
    : String =
    match c with
    | EveryDay -> "Every Day"
    | EveryWeek -> "Every Week"
    | EveryFortnight -> "Every Fortnight"
    | EveryHour -> "Every Hour"
    | Every12Hours -> "Every 12 Hours"
    | EveryMinute -> "Every Minute"

  let spec (s: LanguageTools.ProgramTypes.Handler.Spec) : String =
    match s with
    | HTTP(route, method) -> $"[<HttpHandler({method}, {route})>]"
    | Worker name -> $"[<Worker({name})>]"
    | Cron(name, interval) ->
      $"[<Cron({name}, {PrettyPrinter.ProgramTypes.Handler.cronInterval interval})>]"
    | REPL name -> $"[<REPL({name})>]"

let handler (h: LanguageTools.ProgramTypes.Handler.Handler) : String =
  let specPart = PrettyPrinter.ProgramTypes.Handler.spec h.spec

  $"{specPart}\nlet _handler _ignored =\n  {PrettyPrinter.ProgramTypes.expr defaultContext h.ast}"


let db (db: LanguageTools.ProgramTypes.DB) : String =
  let versionPart =
    if db.version == 0 then
      ""
    else
      $"_v{Stdlib.Int32.toString db.version}"

  let typPart = PrettyPrinter.ProgramTypes.typeReference db.typ

  $"type {db.name}{versionPart} = {typPart}"



// let secret (s: Stdlib.Secret.T) : String =
//   let versionPart = if s.version == 0 then "" else $"_v{Stdlib.Int32.toString s.version}"

//   $"let {s.name}{versionPart} = \"*****\""


let packageType
  (p: LanguageTools.ProgramTypes.PackageType.PackageType)
  : String =
  // TODO: take care of deprecated and description
  let typeParamPart =
    match p.declaration.typeParams with
    | [] -> ""
    | _ ->
      p.declaration.typeParams
      |> Stdlib.List.map (fun typeParam -> $"'{typeParam}")
      |> Stdlib.String.join ", "
      |> fun parts -> $"<{parts}>"

  let defPart =
    (PrettyPrinter.ProgramTypes.customType p.declaration)
    |> PrettyPrinter.indent

  $"type {p.name.name}{typeParamPart} =\n{defPart}"


let packageValue
  (p: LanguageTools.ProgramTypes.PackageValue.PackageValue)
  : String =
  let bodyPart = PrettyPrinter.ProgramTypes.expr defaultContext p.body
  $"val {p.name.name} = {bodyPart}"


module PackageFn =
  let parameter (p: LanguageTools.ProgramTypes.PackageFn.Parameter) : String =
    // TODO: /// for description
    $"({p.name}: {PrettyPrinter.ProgramTypes.typeReference p.typ})"


  let signature (f: LanguageTools.ProgramTypes.PackageFn.PackageFn) : String =
    let params =
      f.parameters
      |> Stdlib.List.map (fun p ->
        p |> PrettyPrinter.ProgramTypes.PackageFn.parameter)
      |> Stdlib.String.join ", "

    let returnType = f.returnType |> PrettyPrinter.ProgramTypes.typeReference

    params ++ " -> " ++ returnType


let packageFn (p: LanguageTools.ProgramTypes.PackageFn.PackageFn) : String =
  // TODO: handle `deprecated`, `description`
  let typeParamPart =
    match p.typeParams with
    | [] -> ""
    | _ ->
      p.typeParams
      |> Stdlib.List.map (fun typeParam -> $"'{typeParam}")
      |> Stdlib.String.join ", "
      |> fun parts -> $"<{parts}>"

  let paramPart =
    p.parameters
    |> Stdlib.List.map (fun param ->
      PrettyPrinter.ProgramTypes.PackageFn.parameter param)
    |> Stdlib.String.join " "

  let retPart = PrettyPrinter.ProgramTypes.typeReference p.returnType

  let argMap =
    p.parameters
    |> Stdlib.List.indexedMap (fun i param -> (param.name, i))
    |> Stdlib.List.fold Stdlib.Dict.empty (fun acc (name, idx) ->
      Stdlib.Dict.set acc name idx)

  let context = Context { currentModule = defaultContext.currentModule; currentFunction = Stdlib.Option.Option.Some p.name.name; argMap = argMap }
  let bodyPart = PrettyPrinter.ProgramTypes.expr context p.body

  $"let {p.name.name}{typeParamPart} {paramPart}: {retPart} =\n{PrettyPrinter.indent bodyPart}"


module BuiltinFn =
  let signature (f: LanguageTools.BuiltinFunction) : String =
    // CLEANUP: it's odd that we have to call the runtime pretty-printer here.
    // Potential solution: update RuntimeTypes (.fs) such that BuiltInFn’s returnType and parameters use PT TypeReferences.
    // Main blocker: "RT comes before PT" in LibExecution, and it'd take some wrangling to get it all compiling again if we did that.
    let parameters =
      f.parameters
      |> Stdlib.List.map (fun p ->
          let params = PrettyPrinter.RuntimeTypes.typeReference p.``type``
          $"({p.name} : {params})")
      |> Stdlib.String.join ", "

    parameters ++ " -> " ++ (f.returnType |> PrettyPrinter.RuntimeTypes.typeReference)