// Tracing and logging utilities for the Model Context Protocol
module Darklang.ModelContextProtocol

/// Trace levels for MCP server logging
type TraceLevel =
  | Off
  | Messages
  | Verbose

/// TraceLevel conversion utilities
module TraceLevel =
  let toString (level: TraceLevel) : String =
    match level with
    | Off -> "off"
    | Messages -> "messages"
    | Verbose -> "verbose"
  
  let fromString (s: String) : Stdlib.Result.Result<TraceLevel, String> =
    match s with
    | "off" -> Stdlib.Result.Result.Ok TraceLevel.Off
    | "messages" -> Stdlib.Result.Result.Ok TraceLevel.Messages
    | "verbose" -> Stdlib.Result.Result.Ok TraceLevel.Verbose
    | _ -> Stdlib.Result.Result.Error $"Invalid trace level: {s}"

/// Trace notification parameters
module TraceNotification =
  type TraceNotificationParams =
    { value: TraceLevel }

  let fromJson (json: Json) : Stdlib.Result.Result<TraceNotificationParams, String> =
    match json with
    | Object fields ->
      match Stdlib.List.findFirst fields (fun (k, _) -> k == "value") with
      | Some (_, String s) ->
          match TraceLevel.fromString s with
          | Ok level -> Stdlib.Result.Result.Ok (TraceNotificationParams { value = level })
          | Error e -> Stdlib.Result.Result.Error e
      | Some (_, _) ->
          Stdlib.Result.Result.Error "value must be a string"
      | None ->
          Stdlib.Result.Result.Error "value is required"
    | _ ->
        Stdlib.Result.Result.Error "params must be an object"

  let toJson (params: TraceNotificationParams) : Json =
    Json.Object [
      ("value", Json.String (TraceLevel.toString params.value))
    ]

/// Log message notification parameters
module LogMessageNotification =
  /// Message types for log messages
  type MessageType =
    | Error
    | Warning
    | Info
    | Debug

  type LogMessageParams =
    { type_: MessageType
      message: String }

  let toJson (params: LogMessageParams) : Json =
    let typeNum =
      match params.type_ with
      | Error -> 1
      | Warning -> 2
      | Info -> 3
      | Debug -> 4

    Json.Object [
      ("type", Json.Number (Stdlib.Int64.toFloat typeNum));
      ("message", Json.String params.message)
    ]

/// Telemetry notification parameters
module TelemetryNotification =
  type TelemetryEventParams = Json

  let toJson (params: TelemetryEventParams) : Json = params