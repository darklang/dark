To make HTTPs work I needed to do four things:

+ Generate a certificate and store it as a "TLS secret" in Kubernetes.
+ Create a static IP in Google cloud.
+ Created a new Ingress in Kubernetes using the TLS secret and IP.
+ Switch over DNS (this hasn't been done yet).

I largely followed along with this document:
https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer

I created the certificate with Let's Encrypt for now in order to not
be blocked; we can switch over to something else in the future if it
seems more appropriate. I did that by running

sudo certbot certonly -d "*.builtwithdark.com,builtwithdark.com" --preferred-challenges=dns --manual

(It's necessary to specific both "*.builtwithdark.com" and
"builtwithdark.com", since the latter is not considered part of the
former. "builtwithdark.com then becomes part of the "Server
alternative names" in the certificate. It's also important to use
--preferred-challenge=dns and --manual for now, since I don't have a
cloudflare API key, and that's where our DNS lives right now. In the
future it may be worth using
https://certbot-dns-cloudflare.readthedocs.io/en/latest/).

That prompts you to set a DNS record for
_acme_challenge.builtwithdark.com. Since Dark's DNS is currently on
cloudflare I asked Paul and Ian to help me with that. Once they did
that I ran 

dig TXT _acme-challenge.builtwithdark.com

to verify that the DNS had been set properly and clicked enter.

(I saved a tarball of the /etc/letsencrypt on the machine I ran it
on. It might be useful for someone else to have that in the future to
renew it.)

Then I created the Kubernetes secret by doing the following:

kubectl create secret tls bwd-tls --cert=/etc/letsencrypt/builtwithdark.com/cert.pem --key= /etc/letsencrypt/live/builtwithdark.com/privkey.pem

(You can also edit it with `kubectl edit secret bwd-tls`, but you need
to paste a base64'd version of these files in; there doesn't seem to be
a way to avoid do it from a file).

Next I created a static IP in Google cloud with

gcloud compute addresses create bwd-tls-ip --global

You can see that IP (and the others) at
https://console.cloud.google.com/networking/addresses/list?project=balmy-ground-195100. It's
35.227.208.117.


Finally I made a new ingress for TLS with

kubectl create -f - <<EOF
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: bwd-tls-ingress
  annotations:
        kubernetes.io/ingress.global-static-ip-name: "bwd-tls-ip"
spec:
  backend:
    serviceName: bwd-nodeport
    servicePort: 80
  tls:
    - secretName: bwd-tls
EOF

I created a new one instead of using the old one for two reasons: one,
so I wasn't messing with the production config, in case I made some
disastrous error; and two, because the old one, unfortunately, uses an
ephemeral IP address.

I tested out the HTTPs cert and saw what the DNS switchover would do
by setting the following in my /etc/hosts:

35.227.208.117  builtwithdark.com
35.227.208.117  lizzie.builtwithdark.com

This caused those domains to resolve to 35.227.208.117; my browser
then parsed the certs etc correctly. You can see screenshots here:

https://imgur.com/a/BHEHsQo

So now need to update the DNS in cloudflare to point the A record for
builtwithdark.com and *.builtwithdark.com to 35.227.208.117.

Since I created this certificate with Let's Encrypt, it will expire in
90 days. Before that happens we should either renew with certbot and
my /etc/letsencrypt with `sudo certbot renew', create new certs with
Let's Encrypt as I did above, or create new certs with a different CA.
Then we can `kubectl edit bwd-tls' with the base64 of the new values
of /etc/letsencrypt/live/builtwithdark.com/cert.pem and
/etc/letsencrypt/live/builtwithdark.com/privkey.pem. You can generate
the base64 with e.g. `base64 -w 0
/etc/letsencrypt/live/builtwithdark.com/cert.pem". Or, we can generate
these certificates with some other CA.

We should also change the web server for builtwithdark.com to redirect
http:// requests to the corresponding https:// domain. I made a card
for that here:
https://trello.com/c/8JN7Ol6M/120-redirect-http-to-https-on-builtwithdarkcom

- Lizzie <_@lizzie.io>, 2018-07-31
