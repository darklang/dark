//#!/usr/bin/env darklang

type DockerImageID = { imageID: String }

type DirectoryContents = { files: List<String> }

type DockerBuildResponse = { id: String }

let Builtin.unwrap
  (result: PACKAGE.Darklang.Stdlib.Result.Result<String, 'a>)
  : String =
  match result with
  | Ok value -> value
  | Error error -> ()

let main () : Int =

  let dockerfiles =
    (Builtin.Directory.list "containers")
    |> Builtin.List.map (fun directory -> Builtin.Directory.list directory)
    |> PACKAGE.Darklang.Stdlib.List.flatten
    |> Builtin.List.filter (fun filePath ->
      PACKAGE.Darklang.Stdlib.String.endsWith filePath "Dockerfile")

  let imageIds =
    dockerfiles
    |> Builtin.List.map (fun dockerfile ->
      let buildCommand = $"docker build -q -f {dockerfile} ."
      let response = Posix.runCommandWithOutput buildCommand
      let parsedResponse = Builtin.Json.parse<DockerBuildResponse> (response)
      DockerImageID { imageID = parsedResponse.id })

  let jsonImageIds =
    (Builtin.Json.serialize<List<DockerImageId>> imageIds) |> Builtin.unwrap

  let _ = Builtin.File.write (Builtin.String.toBytes jsonImageIds) "ids.json"

  let _ = Builtin.print "done"

  6

main ()