//#!/usr/bin/env darklang-internal

// We do not currently have a database in production that we can safely rely on
// between deploys. This script is a temporary solution to backup packages and
// canvases before a deploy, and restore them after a deploy.
//
// A companion canvas exists in `dark-classic`, at `dark-ai-backup`, which contains:
// - a simple data store of `Exports`
//   roughly: `{ canvases: List<String>; packages: String; timestamp: Date }`
// - an endpoint to export to (`POST /save-export`)
// - an endpoint to import from (`GET /latest-export`)

type CanvasExport = { name: String; content: String }

type DataExport =
  {
    /// One big pretty-printed collection of all the nested package modules
    packages: String

    canvases: List<CanvasExport>
  }

type ImportResults =
  {
    /// List of top-level modules imported
    packagesImported: List<String>

    canvasesImported: List<String>
  }

let gatherDataToExport () : Result<DataExport, String> =
  let packages = DarkInternal.Packages.all ()
  let canvases = [] // TODO: something like DarkInternal.Canvases.all ()

  let prettyPackages = PACKAGE.Darklang.PrettyPrinter.packages packages

  let prettyCanvases =
    canvases
    |> Builtin.List.map (fun canvas ->
      CanvasExport
        { name = canvas.name
          content = PACKAGE.Darklang.PrettyPrinter.canvas canvas })

  (DataExport
    { packages = prettyPackages
      canvases = prettyCanvases })
  |> Ok

let export (unit: Unit) : Result<Unit, String> =
  Builtin.print "gathering data to export"
  let data = (gatherDataToExport ()) |> Builtin.unwrap

  Builtin.print "serializing data to export"
  let json = (Builtin.Json.serialize<DataExport> data) |> Builtin.unwrap

  Builtin.print "exporting data to `dark-ai-backup`"

  let response =
    (Builtin.HttpClient.request
      "POST"
      "http://dark-ai-backup.builtwithdark.com/save-export"
      [ ("Content-Type", "application/json") ]
      (Builtin.String.toBytes json))
    |> Builtin.unwrap

  // TODO: ensure 200 OK

  Builtin.print "done export"

  Ok()

let import () : Result<ImportResults, String> =
  Builtin.print "fetching latest export from `dark-ai-backup`"

  let response =
    (Builtin.HttpClient.request
      "GET"
      "http://dark-ai-backup.builtwithdark.com/latest-export"
      [ ("Accept", "application/json") ]
      Builtin.Bytes.empty)
    |> Builtin.unwrap

  Builtin.print "deserializing response from `dark-ai-backup`"
  let deserialized = (Builtin.Json.parse<DataExport> response) |> Builtin.unwrap

  Builtin.print "parsing and importing packages"

  let packageImportResults =
    DarkInternal.Packages.parseAndImport deserialized.Packages

    Builtin.List.fold packageImportResults (Ok []) (fun acc result ->
      match acc with
      | Error error -> Error error
      | Ok acc ->
        let result = DarkInternal.Packages.parseAndImport package

        match result with
        | Ok _ -> Ok(Builtin.List.append acc [ package.name ])
        | Error error -> Error error)


  Builtin.print "parsing and importing canvases"
  // List of results -- hopefully List of OKs
  let canvasImportResults =
    Builtin.List.fold canvasImportResults (Ok []) (fun acc result ->
      match acc with
      | Error error -> Error error
      | Ok acc ->
        let result = DarkInternal.Canvas.parseAndImport canvas

        match result with
        | Ok _ -> Ok(Builtin.List.append acc [ canvas.name ])
        | Error error -> Error error)

  Builtin.print "handling results"

  match (packageImportResults, canvasImportResults) with
  | (Ok packages, Ok canvases) ->
    (ImportResults
      { packagesImported = packages
        canvasesImported = canvases })
    |> Ok
  | (Error error, _) -> Error error
  | (_, Error error) -> Error error


let main (args: List<String>) : Int =
  Builtin.print "running `sync-packages-and-canvases.dark`"

  match args with
  | [ "export" ] ->
    match export () with
    | Ok _ -> 0
    | Error error ->
      Builtin.print error
      1

  | [ "import" ] ->
    match import () with
    | Ok _ -> 0
    | Error error ->
      Builtin.print error
      1
  | _ ->
    Builtin.print
      "Usage: ./scripts/run-cli-internal ./scripts/deployment/sync-packages-and-canvases.dark [export|import]"

    1

main args