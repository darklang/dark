#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

PUBLISHED=false

for i in "$@"
do
  case "${i}" in
    --published)
    PUBLISHED=true
    shift
    ;;
  esac
done

if [[ "$PUBLISHED" == "true" ]]; then
  APISERVER_BINPATH="fsharp-backend/Build/out/ApiServer/Release/net7.0/linux-x64/publish/"
  BWDSERVER_BINPATH="fsharp-backend/Build/out/BwdServer/Release/net7.0/linux-x64/publish/"
  CRONCHECKER_BINPATH="fsharp-backend/Build/out/CronChecker/Release/net7.0/linux-x64/publish/"
  QUEUEWORKER_BINPATH="fsharp-backend/Build/out/QueueWorker/Release/net7.0/linux-x64/publish/"
  EXECHOST_BINPATH="fsharp-backend/Build/out/ExecHost/Release/net7.0/linux-x64/publish/"
else
  APISERVER_BINPATH="fsharp-backend/Build/out/ApiServer/Debug/net7.0/linux-x64/"
  BWDSERVER_BINPATH="fsharp-backend/Build/out/BwdServer/Debug/net7.0/linux-x64/"
  CRONCHECKER_BINPATH="fsharp-backend/Build/out/CronChecker/Debug/net7.0/linux-x64/"
  QUEUEWORKER_BINPATH="fsharp-backend/Build/out/QueueWorker/Debug/net7.0/linux-x64/"
  EXECHOST_BINPATH="fsharp-backend/Build/out/ExecHost/Debug/net7.0/linux-x64/"
fi

APISERVER_EXE="${APISERVER_BINPATH}/ApiServer"
BWDSERVER_EXE="${BWDSERVER_BINPATH}/BwdServer"
CRONCHECKER_EXE="${CRONCHECKER_BINPATH}/CronChecker"
QUEUEWORKER_EXE="${QUEUEWORKER_BINPATH}/QueueWorker"
EXECHOST_EXE="${EXECHOST_BINPATH}/ExecHost"
TUNNEL_DAEMON_EXE="containers/tunnel2/tunnel2-daemon"

# Stop the server processes
echo "Stopping servers"
sudo pkill -f "ApiServer" || true
sudo pkill -f "BwdServer" || true
sudo pkill -f "CronChecker" || true
sudo pkill -f "QueueWorker" || true

# tunnel cleanup
echo "pkill tunnel"
sudo pkill -f "${TUNNEL_DAEMON_EXE}" || true
echo "rm tunnel"
sudo rm -rf /home/tunnel/.ssh/id_rsa{,.pub} /home/tunnel/.ssh/authorized_keys
echo "pkill sleep"
sudo pkill -f sleep.infinity || true
# end tunnel cleanup

# Run tunnel
sudo mkdir -p /run/sshd
echo "Starting tunnel"
# shellcheck disable=SC2024
sudo ./"${TUNNEL_DAEMON_EXE}" > rundir/logs/tunnel.log 2>&1 &
echo "Started tunnel"

echo "Waiting for postgres"
./scripts/devcontainer/_wait-for-background-services postgresql

# if it hasn't been compiled yet, wait for it
echo "Waiting for compiled servers"
for ((i=1;i<=1000;i++));
do
  if [[ ! -f "${APISERVER_EXE}" || ! -f "${BWDSERVER_EXE}" || ! -f "${CRONCHECKER_EXE}" || ! -f "${QUEUEWORKER_EXE}" || ! -f "${EXECHOST_EXE}" ]]; then
    sleep 0.01
  fi
done
echo "Done waiting for compiled servers"


LOGS="${DARK_CONFIG_RUNDIR}/logs"
./scripts/run-ocaml-legacy-server
echo "Running migrations"
"${EXECHOST_EXE}" migrations run > "$LOGS/fsharp-migrations.log"
echo "Running apiserver"
"${APISERVER_EXE}" > "$LOGS/fsharp-apiserver.log" 2>&1 &
echo "Running bwdserver"
"${BWDSERVER_EXE}" > "$LOGS/fsharp-bwdserver.log" 2>&1 &
echo "Running cronchecker"
"${CRONCHECKER_EXE}" > "$LOGS/fsharp-cronchecker.log" 2>&1 &
echo "Running queueworker"
"${QUEUEWORKER_EXE}" > "$LOGS/fsharp-queueworker.log" 2>&1 &

./scripts/run-nginx-server
echo "Finished loading server"
