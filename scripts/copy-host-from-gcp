#!/usr/bin/env bash
. ./scripts/support/assert-in-container $0 $@

set -euo pipefail

HOST=$1
PASSWORD=$(cat config/gcp-prod | grep PASS | sed 's/.*=//')
export PGPASSWORD=$PASSWORD; # for psql auth

# Now use pql directly
l="psql -d proddb -t -c "
r="psql -d postgres -U postgres -h 35.203.144.131 -t -c "

function clean {
  # convert from remote IDs to local IDs
  sed "s/${ACCOUNTID}/${LOCALACC}/";
}

function trim {
  tr -d '[:space:]';
}

function rcopy_uuid {
  name=$1;
  field=$2;
  val=$3;
  echo "Remote fetch: $name ($field=$val)"
  $r "COPY (SELECT * from $name WHERE $field = '$val'::uuid) to STDOUT" > $name.sql;
}

function rcopy_string {
  name=$1;
  field=$2;
  val=$3;
  echo "Remote fetch: $name ($field=$val)"
  $r "COPY (SELECT * from $name WHERE $field = '$val') to STDOUT" > $name.sql;
}

function lcopy {
  name=$1;
  echo "Local copy: $name"
  cat $name.sql | clean | $l "COPY $name from STDIN";
}

function ldelete_uuid {
  name=$1;
  field=$2;
  val=$3;
  echo "Local delete: $name ($field=$val)"
  $l "DELETE FROM $name WHERE $field = '$val'::uuid";
}

function ldelete_string {
  name=$1;
  field=$2;
  val=$3;
  echo "Local delete: $name ($field=$val)"
  $l "DELETE FROM $name WHERE $field = '$val'";
}

###########################
echo "Fetching IDs for $HOST"
###########################

echo "If the script pauses here, run gcp-psql briefly in another terminal to whitelist your IP. You don't need to restart this command, nor to enter your password or actually connect to the server using gcp-psql."

CANVASID=$($r "select id from canvases where name = '$HOST'" | trim);
ACCOUNTID=$($r "select account_id from canvases where name = '$HOST'" | trim);
USERNAME=$($r "select username from accounts where id = '$ACCOUNTID'" | trim);

# we need to convert both the account_id and canvas_id to the local
# version (see `clean`)
LOCALACC=$($l "select id from accounts where username = '$USERNAME'" | trim);
LOCALCAN=$($l "select id from canvases where name = '$HOST'" | trim);
if [[ "$LOCALCAN" = "" ]]; then
  echo "No local canvas"
  LOCALCAN=$CANVASID;
fi

echo "Remote Canvas ID: $CANVASID"
echo "Local Canvas ID: $LOCALCAN"
echo "Remote account ID: $ACCOUNTID"
echo "Local account ID: $LOCALACC"
echo "Username: $USERNAME"

###########################
echo "Fetching server data for $HOST, $CANVASID"
###########################

rcopy_uuid canvases id $CANVASID
rcopy_uuid cron_records canvas_id $CANVASID
rcopy_uuid events canvas_id $CANVASID
rcopy_uuid function_results canvas_id $CANVASID
rcopy_string json_oplists host $HOST
rcopy_string oplists host $HOST
rcopy_uuid stored_events canvas_id $CANVASID
rcopy_uuid user_data canvas_id $CANVASID

###########################
echo "Delete local data for $HOST, $LOCALCAN"
###########################
ldelete_uuid cron_records canvas_id $LOCALCAN
ldelete_uuid events canvas_id $LOCALCAN
ldelete_uuid function_results canvas_id $LOCALCAN
ldelete_string json_oplists host $HOST
ldelete_string oplists host $HOST
ldelete_uuid stored_events canvas_id $LOCALCAN
ldelete_uuid user_data canvas_id $LOCALCAN
ldelete_uuid canvases id $LOCALCAN

###########################
echo "Loading the data into local DB for $HOST, $LOCALCAN, $LOCALACC"
###########################
lcopy canvases
lcopy cron_records
lcopy events
lcopy function_results
lcopy json_oplists
lcopy oplists
lcopy stored_events
lcopy user_data


echo "Done"
