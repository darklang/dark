#/usr/bin/env bash
set -euo pipefail
./scripts/support/assert-in-container $0 $@

PROJECT="balmy-ground-195100"
ZONE="--zone=dark-single-instance"
DNS_SETTINGS="--name=darksingleinstance.com. --type=A $ZONE"
FULL_DNS_SETTINGS="$DNS_SETTINGS --ttl=300"
INSTANCE="instance-2"

GCLOUD="gcloud --project=$PROJECT "


#########################
# Deploy Docker image
#########################
IMAGE_ID=$(docker images dark-gcp -q | head -n 1)
IMAGE="gcr.io/$PROJECT/dark-prod:$IMAGE_ID"

echo "Deploying container to GCP"
docker tag dark-gcp:latest $IMAGE
$GCLOUD docker -- push $IMAGE

#########################
# Configure instance and containers
#########################

# Get the info from the running instance for use later
INFO=$($GCLOUD beta compute instances describe $INSTANCE --format=json)

# This updates automatically
echo "Setting GCP instance metadata"
$GCLOUD compute instances add-metadata $INSTANCE \
  --metadata-from-file startup-script=scripts/support/gcp-instance-startup-script


# GCP always restarts, so only restart if something has changed
OLDIMAGE=$(echo $INFO | jq -r '.metadata.items | map(select(.key == "gce-container-declaration")) | .[0].value' | grep image | sed -E "s/[[:space:]]+image: //")

if [[ "$OLDIMAGE" != "$IMAGE" ]]; then
  echo "New image - updating container"
  $GCLOUD beta compute instances update-container $INSTANCE \
    --container-image $IMAGE \
    --container-env-file config/gcp-prod \
    --container-mount-host-path mount-path=/home/dark/gcp-persistdir,host-path=/mnt/disks/dark-disk/persistdir,mode=rw \
    --container-mount-host-path mount-path=/home/dark/gcp-rundir,host-path=/mnt/disks/dark-disk/rundir,mode=rw
else
  echo "Not updating container as image hasnt changed"
fi

#########################
# Set DNS
#########################
OLDIP=$($GCLOUD dns record-sets list $DNS_SETTINGS \
  --format=json | jq --raw-output .[0].rrdatas[0])
NEWIP=$(echo $INFO \
  | jq --raw-output .networkInterfaces[0].accessConfigs[0].natIP)


echo "Setting DNS"
if [[ -e transaction.yaml ]]; then
  echo "Deleting old DNS"
  $GCLOUD dns record-sets transaction abort $ZONE
fi

$GCLOUD dns record-sets transaction start $ZONE

$GCLOUD dns record-sets transaction remove ${FULL_DNS_SETTINGS} $OLDIP
$GCLOUD dns record-sets transaction add ${FULL_DNS_SETTINGS} $NEWIP

$GCLOUD dns record-sets transaction execute $ZONE

rm -f transaction.yaml
