#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

trap ctrl_c INT

function ctrl_c() {
  killall -9 Benchmark
  exit 1
}

PUBLISHED=false

for i in "$@"
do
  case "${i}" in
    --published)
    PUBLISHED=true
    shift
    ;;
  esac
done

sudo killall legacy_serialization_server.exe || true
sudo killall legacy_fuzzing_server.exe || true
killall -9 Benchmark || true

./scripts/devcontainer/_wait-for-background-services postgresql
#dropdb --if-exists testdb
#createdb testdb

# These scripts run in the docker container. When this script is run from in the
# container, these scripts and the spawned processes stay running. this is helpful if
# you want to run the debugger in Visual Studio. However, if they script is run from
# the Docker host, they do not stay running, and then tests fail because the tests
# can't connect to these servers.
./scripts/run-ocaml-legacy-server

if [[ "$PUBLISHED" == "true" ]]; then
  EXE=Build/out/Benchmark/Release/net7.0/linux-x64/Benchmark
else
  EXE=Build/out/Benchmark/Debug/net7.0/linux-x64/Benchmark
fi

cd fsharp-backend
DARK_CONFIG_TELEMETRY_EXPORTER=none \
DARK_CONFIG_ROLLBAR_ENABLED=n \
DARK_CONFIG_DB_HOST=localhost \
DARK_CONFIG_DB_DBNAME=testdb \
DARK_CONFIG_DB_USER=dark \
DARK_CONFIG_DB_PASSWORD=darklang \
"${EXE}" "${@}"

