#!/usr/bin/env bash
. ./scripts/support/assert-in-container $0 $@

set -euo pipefail

set -x

ROLLBAR_ACCESS_TOKEN="ac042ea56b054bbdbddbfffaa149004e"
ENVIRONMENT=production
LOCAL_USERNAME=`cat ~/.config/gcloud/configurations/config_default | grep 'account' | awk '{print $3}' | awk -F "@" '{print $1}'`
IMAGE_ID=$(docker images dark-gcp -q | head -n 1)
QW_IMAGE_ID=$(docker images dark-gcp-qw -q | head -n 1)
CRON_IMAGE_ID=$(docker images dark-gcp-cron -q | head -n 1)
PROJECT="balmy-ground-195100"
IMAGE="gcr.io/$PROJECT/dark-prod:$IMAGE_ID"
QW_IMAGE="gcr.io/$PROJECT/dark-prod-qw:$QW_IMAGE_ID"
CRON_IMAGE="gcr.io/$PROJECT/dark-prod-cron:$CRON_IMAGE_ID"
ZONE="us-west1"
CLUSTER="darkcluster1"


#########################
# Deploy Docker image
#########################
echo "Deploying container to GCP"
docker tag dark-gcp:latest $IMAGE
docker tag dark-gcp-qw:latest $QW_IMAGE
docker tag dark-gcp-cron:latest $CRON_IMAGE
docker-credential-gcr configure-docker
docker push $IMAGE
docker push $QW_IMAGE
docker push $CRON_IMAGE


#########################
# Tell Kubernetes what to do
#########################

# get creds
gcloud container clusters get-credentials projects/$PROJECT/zones/$ZONE/clusters/$CLUSTER --zone=$ZONE

# env vars (replace existing configmap or make a new one)
(kubectl create configmap gke-dark-prod --from-env-file config/gke-builtwithdark -o yaml --dry-run | kubectl replace -f -) ||  kubectl create configmap gke-dark-prod --from-env-file config/gke-builtwithdark


# make sure deployment matches current understanding
kubectl apply -f scripts/support/builtwithdark.yaml
kubectl apply -f scripts/support/queueworker.yaml
kubectl apply -f scripts/support/cronchecker.yaml

# deploy the image
kubectl set image deployment/bwd-deployment bwd-ctr=$IMAGE
kubectl set image deployment/qw-deployment qw-ctr=$QW_IMAGE
kubectl set image deployment/qw-deployment qw-ctr=$CRON_IMAGE

#########################
# Tell everyone else what's going on
#########################
curl -s https://api.rollbar.com/api/1/deploy/ \
  -F access_token="${ROLLBAR_ACCESS_TOKEN}" \
  -F environment="$ENVIRONMENT" \
  -F revision="$IMAGE" \
  -F local_username="${LOCAL_USERNAME}" > /dev/null
echo "Rollbar notified."


