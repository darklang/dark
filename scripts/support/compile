#!/usr/bin/env python3.6

import sys
import subprocess
import glob
import time
import os
from pathlib import Path

run_tests = False

# Make io unbuffered
def flush(fn):
  def newfn(x):
    fn(x)
    sys.stdout.flush()
  return newfn
sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)

def run(start, bash):
  proc = subprocess.run(bash, shell=True)
  stop = time.time()
  success = proc.returncode == 0
  if success:
    print(">> Success in " + str(stop-start) + "s")
  else:
    print(">> Failed in " + str(stop-start) + "s")

  return success

###################
# Build logic
###################
def pretty_print(msg, color):
  print('\x1b[6;30;' + str(color) + 'm' + "\n$ " + msg + '\x1b[0m')

def run_frontend(start, bash):
  pretty_print(bash, 44)
  return run(start, bash)

def run_backend(start, bash):
  pretty_print(bash, 42)
  return run(start, bash)

def run_test(start, bash):
  if run_tests:
    pretty_print(bash, 45)
    return run(start, bash)
  else:
    print("skipping tests")
    return True

def run_other(start, bash):
  pretty_print(bash, 46)
  return run(start, bash)

def is_script(f):
  filetype = subprocess.check_output(["file", f], encoding="utf-8")
  return "Bourne-Again" in filetype

def sass_compile():
  start = time.time()
  return run_frontend(start, "./client/node_modules/node-sass/bin/node-sass client/src/styles/app.scss > backend/static/app.css")

def client_build():
  if os.environ.get("CI"):
    start = time.time()
    result = run_frontend(start, "./scripts/check-format client")
    if not result:
      return result

  start = time.time()
  build = "cd client && unbuffer yarn run-s build:bsb build:js build:fetcher build:analysiswrapper"
  result = run_frontend(start, build)
  return result


def appsupport_build():
  start = time.time()
  build = "cd client && unbuffer yarn run build:appsupport"
  result = run_frontend(start, build)
  return result

def npm_install():
  start = time.time()
  flags = ""
  if os.environ.get("CI"):
    flags += " --frozen-lockfiles"
  build = "cd client && unbuffer ../scripts/support/retrying-yarn-install" + flags
  return run_frontend(start, build)

def client_test():
  start = time.time()
  result = run_test(start, "cd client && unbuffer yarn test")
  return result

def shellcheck(f):
  start = time.time()
  result = run_other(start, "scripts/support/shellchecker " + f)
  return result

landmarks = " OCAML_LANDMARKS='time,allocation,on,auto,format=json,output=profile.json' "
def backend_build():
  start = time.time()
  global profile
  # Get all the ml files in backend/bin, and build executables
  # This is less technically correct than "parse the sexp in backend/bin/dune",
  # but it is also much simpler.
  exes = ["bin/" + x.replace(".ml", ".exe")
          for x
          in os.listdir("backend/bin")
          if x.endswith(".ml")]
  exes.append("@analysis.js")
  exes = " ".join(exes)
  if os.environ.get("CI"):
      compilation_profile = "release"
  else:
      compilation_profile = "dev"

  if os.environ.get("CI"):
      result = run_backend(start, "./scripts/check-format backend")
      if not result:
          return result

  build = "unbuffer" \
        + " scripts/dune-wrapper.sh build" \
        + " --profile " + compilation_profile \
        + " --display short" \
        + " --root backend" \
        + " -j 8 " \
        + exes
  if profile:
    return run_backend(start, landmarks + build)
  else:
    return run_backend(start, build)

def backend_test():
  start = time.time()
  ci = "--verbose" if os.environ.get("CI") else "--quick"
  rundir = os.environ.get("DARK_CONFIG_RUNDIR")
  host = "DARK_CONFIG_DB_HOST=localhost"
  dbname = "DARK_CONFIG_DB_DBNAME=testdb"
  user = "DARK_CONFIG_DB_USER=dark"
  password = "DARK_CONFIG_DB_PASSWORD=eapnsdc"
  env = "DARK_CONFIG_ENV_DISPLAY_NAME=test"
  dbenv = host + " " + dbname + " " + user + " " + password
  return run_test(start,
          "unbuffer scripts/dune-wrapper.sh build --root backend test/test.exe"
          + " && dropdb --if-exists testdb"
          + " && createdb testdb"
          + " && cd " + rundir
          + " && " + dbenv
          + " unbuffer ../backend/_build/default/test/test.exe"
          + " --show-errors "
          + ci
          + " 2>&1")

def stroller_build():
  global profile

  if os.environ.get("CI"):
    start = time.time()
    result = run_backend(start, "cd stroller && cargo fmt -- --check")
    if not result:
      return result

    build_flags = " --release"
  else:
    build_flags = ""

  start = time.time()
  build = "cd stroller && unbuffer cargo build" + build_flags
  if profile:
    return run_backend(start, landmarks + build)
  else:
    return run_backend(start, build)

def reload_stroller():
  start = time.time()
  return run_backend(start, "scripts/support/runstroller")

def stroller_test():
  start = time.time()
  result = run_test(start,
      "cd stroller && unbuffer cargo test")
  if not result:
      return result

  start = time.time()
  if os.environ.get("CI"):
      clippy_flags = "-D warnings"
  else:
      clippy_flags = ""
  return run_test(start,
      "cd stroller"
      + " && unbuffer cargo clippy --all-targets --bin=dark-stroller --tests -- " + clippy_flags)

def reload_server():
  start = time.time()
  global profile
  runserver = "scripts/support/runserver"
  if profile:
    return run_backend(start, landmarks + runserver)
  else:
    return run_backend(start, runserver)

def generate_etags():
  start = time.time()
  return run_frontend(start, "./scripts/support/generate-etags")

def reload_browser():
  start = time.time()
  # Sends a signal to another fswatch on your mac
  return run_frontend(start, "touch .browser-trigger")

class Should:
  def __init__(self):
    self.backend_build = False
    self.backend_test = False
    self.stroller_build = False
    self.stroller_test = False
    self.npm_install = False
    self.client_build = False
    self.appsupport_build = False
    self.client_test = False
    self.sass_compile = False
    self.reload_browser = False
    self.reload_server = False
    self.reload_stroller = False
    self.generate_etags = False
    self.shellcheck = []

def execute(should):
  success = True
  # Fast path: get the important stuff built first
  if should.backend_build:
    if not backend_build(): success = False
    should.generate_etags |= success
    should.backend_test |= success
    should.reload_server |= success
    should.reload_browser |= success

  if should.npm_install:
    if not npm_install(): success = False
    should.client_build |= success
    should.appsupport_build |= success

  if should.client_build:
    if not client_build(): success = False
    should.client_test |= success
    should.generate_etags |= success
    should.reload_browser |= success

  if should.appsupport_build:
    if not appsupport_build(): success = False
    should.generate_etags |= success
    should.reload_browser |= success

  if should.sass_compile:
    if not sass_compile(): success = False
    should.generate_etags |= success
    should.reload_browser |= success

  if should.generate_etags:
    if not generate_etags(): success = False
    should.reload_browser |= success
    # This should probably cause a restart, but it breaks CI atm
    # should.reload_server |= success

  if should.reload_server:
    if not reload_server(): success = False
    should.reload_browser |= success

  if should.reload_browser:
    if not reload_browser(): success = False

  # After the fast path get tests run
  if should.client_test:
    if not client_test(): success = False

  if should.backend_test:
    if not backend_test(): success = False

  # At the end do stroller, which isn't as important atm
  if should.stroller_build:
    if not stroller_build(): success = False
    should.stroller_test |= success
    should.reload_stroller |= success

  if should.reload_stroller:
    if not reload_stroller(): success = False

  if should.stroller_test:
    if not stroller_test(): success = False

  if should.shellcheck != []:
    if not all([shellcheck(f) for f in should.shellcheck]):
      success = False

  return success


def mark(should, f):
  # Ocaml
  if "test/test.ml" in f:
    should.backend_test = True

  elif ("backend/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f) \
                  or ("dune" in f) \
                  or ("_tags" in f) \
                  or ("libtarget.js" in f)):
    should.backend_build = True

  # Touch this to rerun the server
  elif "scripts/support/runserver" in f:
    should.reload_server = True
    should.generate_etags = True

  # Rust
  elif ("stroller/" in f) \
          and (("Cargo.toml" in f) \
                  or ("Cargo.lock" in f) \
                  or (".rs" in f)):
    should.stroller_build = True
  # Touch this to rerun stroller
  elif "scripts/support/runstroller" in f:
    should.reload_stroller = True

  # JS
  elif "client/package.json" in f:
    should.npm_install = True
  elif ("client/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f)):
    should.client_build = True

  elif "client/src/appsupport.js" in f:
    should.appsupport_build = True

  elif ".scss" in f:
    should.sass_compile = True

  elif ("scripts" in f or ".sh" in f) and is_script(f):
    should.shellcheck += [f]


  elif ".html" in f:
    should.reload_browser = True

  else:
    print("unknown file: " + f, end='')

  return should



def ignore(filename):
  if "runserver" in filename:
    return False
  # substring
  ignores = [ ".git"
            , ".merlin"
            , "integration-tests/tests.js"
            , "rundir/"
            , "gcp_rundir/"
            , "transaction.yaml"
            , "backend/_build/"
            , "backend/dark.install"
            , "backend/gmon.out"
            , "backend/ocamlbuild_output.txt"
            , "backend/profile.json"
            , "backend/serialization/"
            , "backend/static/"
            , "client/node_modules"
            , "client/lib"
            , "build.ninja"
            , ".bs.js"
            , ".bsdeps"
            , ".bsbuild"
            , ".sourcedirs.json"
            , ".md"
            , ".sw"
  ]
  for i in ignores:
    if i in filename:
      return True
  # ocaml build temporary
  if filename[-10:-8] == "/C":
    return True
  # emacs thing
  if "/.#" in filename:
    return True
  return False


profile = False # Run ocaml stuff under the landmarks profiler
files = []
def main():
  for f in sys.argv[1:]:
    f = f.replace(os.environ["HOST_PWD"], "/home/dark/app")
    if f == "--test":
      global run_tests
      run_tests = True
    elif not ignore(f):
      files.append(f)

  if len(files) > 0:
    pretty_print("Compiling: " + str(files), 43)

    should = Should()
    for f in files:
      mark(should, f)

    if execute(should):
      sys.exit(0)
    else:
      sys.exit(1)

main()
