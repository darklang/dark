#!/usr/bin/env python3.6

import sys
import subprocess
import glob
import time
import os
from pathlib import Path

run_tests = False

# Make io unbuffered
def flush(fn):
  def newfn(x):
    fn(x)
    sys.stdout.flush()
  return newfn
sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)

def run(start, bash):
  proc = subprocess.run(bash, shell=True)
  stop = time.time()
  success = proc.returncode == 0
  if success:
    print(">> Success in " + str(stop-start) + "s")
  else:
    print(">> Failed in " + str(stop-start) + "s")

  return success

###################
# Build logic
###################
def pretty_print(msg, color):
  print('\x1b[6;30;' + str(color) + 'm' + "\n$ " + msg + '\x1b[0m')

def run_frontend(start, bash):
  pretty_print(bash, 44)
  return run(start, bash)

def run_backend(start, bash):
  pretty_print(bash, 42)
  return run(start, bash)

def run_test(start, bash):
  if run_tests:
    pretty_print(bash, 45)
    return run(start, bash)
  else:
    print("skipping tests")
    return True

def run_other(start, bash):
  pretty_print(bash, 46)
  return run(start, bash)

def is_script(f):
  filetype = subprocess.check_output(["file", f], encoding="utf-8")
  return "Bourne-Again" in filetype

def sass_compile():
  start = time.time()
  return run_frontend(start, "npx node-sass client/styles/app.scss > backend/static/app.css")

def client_build():
  if os.environ.get("CI"):
    start = time.time()
    # ml is checked on the backend
    result = run_frontend(start, "./scripts/format check --prettier-only backend client")
    if not result:
      return result
  else:
    start = time.time()

  start = time.time()
  build = "unbuffer yarn run build"
  result = run_frontend(start, build)
  return result

def npm_install():
  start = time.time()
  flags = ""
  if os.environ.get("CI"):
    flags += " --frozen-lockfiles"
  build = "unbuffer ./scripts/support/retrying-yarn-install" + flags
  return run_frontend(start, build)

def esy_install():
  start = time.time()
  build = "unbuffer esy install && esy build --release"
  return run_backend(start, build)

def client_test():
  start = time.time()
  flags = ""
  if os.environ.get("CI"):
    flags = "--verbose --dom"
  result = run_test(start, f"./scripts/runtests {flags}")
  return result

def shellcheck(f):
  start = time.time()
  result = run_other(start, "scripts/support/shellchecker " + f)
  return result

def backend_build():
  if os.environ.get("CI"):
    start = time.time()
    # checks the frontend too
    result = run_backend(start, "./scripts/format check  --ocaml-only client backend")
    if not result:
      return result
  else:
    start = time.time()

  start = time.time()
  # Get all the ml files in backend/bin, and build executables This is less
  # technically correct than "parse the sexp in backend/bin/dune", but it
  # is also much simpler.
  exes = ["backend/bin/" + x.replace(".ml", ".exe")
          for x
          in os.listdir("backend/bin")
          if x.endswith(".ml")]
  exes.append("@analysis.js")
  exes = " ".join(exes)
  if os.environ.get("CI"):
    compilation_profile = "release"
  else:
    compilation_profile = "dev"

  build = "unbuffer" \
        + " scripts/dune-wrapper.sh build" \
        + " --profile " + compilation_profile \
        + " --display short" \
        + " -j 8 " \
        + exes
  return run_backend(start, build)

def test_db_env():
  return "DARK_CONFIG_DB_HOST=localhost" \
    " DARK_CONFIG_DB_DBNAME=testdb" \
    " DARK_CONFIG_DB_USER=dark" \
    " DARK_CONFIG_DB_PASSWORD=eapnsdc"

def backend_test():
  start = time.time()
  ci = "--verbose" if os.environ.get("CI") else "--quick"
  rundir = os.environ.get("DARK_CONFIG_RUNDIR")
  return run_test(start,
          f"unbuffer scripts/dune-wrapper.sh build backend/test/test.exe" \
          f" && dropdb --if-exists testdb" \
          f" && createdb testdb" \
          f" && {test_db_env()} unbuffer scripts/run-backend-tests --show-errors {ci}" \
          f" 2>&1")

def rust_build(name):

  if os.environ.get("CI"):
    start = time.time()
    result = run_backend(start, f"cd {name} && cargo fmt -- --check")
    if not result:
      return result

    build_flags = " --release"
  else:
    build_flags = ""

  start = time.time()
  build = f"cd {name} && unbuffer cargo build{build_flags}"
  return run_backend(start, build)

def rust_reload(name):
  start = time.time()
  return run_backend(start, f"scripts/support/run-rust {name}")

def rust_test(name):
  start = time.time()
  result = run_test(start,
      f"cd {name} && {test_db_env()} RUST_BACKTRACE=1 unbuffer cargo test -- --test-threads=1")
  if not result:
      return result

  start = time.time()
  if os.environ.get("CI"):
      clippy_flags = "-D warnings"
  else:
      clippy_flags = ""
  return run_test(start,
      f"cd {name}"
      + f" && unbuffer cargo clippy --all-targets --bin=dark-{name} --tests -- " + clippy_flags)

def reload_server():
  start = time.time()
  runserver = "scripts/support/runserver"
  return run_backend(start, runserver)

def generate_etags():
  start = time.time()
  return run_frontend(start, "./scripts/support/generate-etags")

def reload_browser():
  start = time.time()
  # Sends a signal to another fswatch on your mac
  return run_frontend(start, "touch .browser-trigger")

class Should:
  def __init__(self):
    self.esy_install = False
    self.backend_build = False
    self.backend_test = False
    self.stroller_build = False
    self.stroller_test = False
    self.scheduler_build = False
    self.scheduler_test = False
    self.npm_install = False
    self.client_build = False
    self.client_test = False
    self.sass_compile = False
    self.reload_browser = False
    self.reload_server = False
    self.reload_stroller = False
    self.reload_scheduler = False
    self.generate_etags = False
    self.shellcheck = []

def execute(should):
  success = True
  # Fast path: get the important stuff built first
  if should.esy_install:
    if not esy_install(): success = False
    should.backend_build |= success

  if should.backend_build:
    if not backend_build(): success = False
    should.generate_etags |= success
    should.backend_test |= success
    should.reload_server |= success
    should.reload_browser |= success

  if should.npm_install:
    if not npm_install(): success = False
    should.client_build |= success

  if should.client_build:
    if not client_build(): success = False
    should.client_test |= success
    should.generate_etags |= success
    should.reload_browser |= success

    should.generate_etags |= success
    should.reload_browser |= success

  if should.sass_compile:
    if not sass_compile(): success = False
    should.generate_etags |= success
    should.reload_browser |= success

  if should.generate_etags:
    if not generate_etags(): success = False
    should.reload_browser |= success
    # This should probably cause a restart, but it breaks CI atm
    # should.reload_server |= success

  if should.reload_server:
    if not reload_server(): success = False
    should.reload_browser |= success

  if should.reload_browser:
    if not reload_browser(): success = False

  # After the fast path get tests run
  if should.client_test:
    if not client_test(): success = False

  if should.backend_test:
    if not backend_test(): success = False

  # Rust projects
  if should.stroller_build:
    if not rust_build('stroller'): success = False
    should.stroller_test |= success
    should.reload_stroller |= success
  if should.reload_stroller:
    if not rust_reload('stroller'): success = False
  if should.stroller_test:
    if not rust_test('stroller'): success = False

  if should.scheduler_build:
    if not rust_build('queue-scheduler'): success = False
    should.scheduler_test |= success
    should.reload_scheduler |= success
  if should.reload_scheduler:
    if not rust_reload('queue-scheduler'): success = False
  if should.scheduler_test:
    if not rust_test('queue-scheduler'): success = False


  if should.shellcheck != []:
    if not all([shellcheck(f) for f in should.shellcheck]):
      success = False

  return success


def mark(should, f):
  print("file: " + f, end='')
  # Ocaml
  if ("libshared/" in f) \
          and ((".mli" in f) \
            or (".ml" in f)):
    should.backend_build = True
    should.client_build = True


  elif "esy.json" in f:
    should.esy_install = True

  elif ("backend/test/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f)):
    should.backend_test = True

  elif ("backend/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f) \
                  or ("_tags" in f) \
                  or ("libtarget.js" in f)) \
          or ("dune" in f):
    should.backend_build = True


  elif ("templates/" in f) and (".html" in f):
    should.backend_build = True
  # Touch this to rerun the server
  elif "scripts/support/runserver" in f:
    should.reload_server = True
    should.generate_etags = True

  # Rust
  # Touch this to rerun all rust programs
  elif "scripts/support/run-rust" in f:
    should.reload_stroller = True
    should.reload_scheduler = True

  elif ("stroller/" in f) \
          and (("Cargo.toml" in f) \
                  or ("Cargo.lock" in f) \
                  or (".rs" in f)):
    should.stroller_build = True

  elif ("queue-scheduler/" in f) \
          and (("Cargo.toml" in f) \
                  or ("Cargo.lock" in f) \
                  or (".rs" in f)):
    should.scheduler_build = True

  # JS
  elif "package.json" in f:
    should.npm_install = True
  elif ("client/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f)
                  or ("appsupport.js" in f)):
    # This correctly handles tests and other dirs, which need to be built
    # as part of this step.
    should.client_build = True

  elif "bsconfig.json" in f:
    should.client_build = True

  elif ".scss" in f:
    should.sass_compile = True

  elif ("scripts" in f or ".sh" in f) and is_script(f):
    should.shellcheck += [f]


  elif ".html" in f:
    should.reload_browser = True

  else:
    print("unknown file: " + f, end='')

  return should



def ignore(filename):
  if "runserver" in filename:
    return False
  # substring
  ignores = [ ".git"
            , ".merlin"
            , "integration-tests/tests.js"
            , "rundir/"
            , "_build/"
            , "dark.install"
            , "gmon.out"
            , "backend/serialization/"
            , "backend/static/"
            , "_esy/"
            , "esy.lock"
            , "/home/dark/.esy"
            , "node_modules"
            , "/lib"
            , "build.ninja"
            , "stroller/target"
            , "queue-scheduler/target"
            , ".bs.js"
            , ".bsdeps"
            , ".bsbuild"
            , ".sourcedirs.json"
            , ".md"
            , ".sw"
  ]
  for i in ignores:
    if i in filename:
      return True
  # ocaml build temporary
  if filename[-10:-8] == "/C":
    return True
  # emacs thing
  if "/.#" in filename:
    return True
  # vim thing
  if filename[-1] == "~":
    return True
  return False


files = []
def main():
  for f in sys.argv[1:]:
    if f == "--test":
      global run_tests
      run_tests = True
    elif not ignore(f):
      files.append(f)

  if len(files) > 0:
    pretty_print("Compiling: " + str(files), 43)

    should = Should()
    for f in files:
      mark(should, f)

    if execute(should):
      sys.exit(0)
    else:
      sys.exit(1)

main()
