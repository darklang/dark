#!/usr/bin/env python3.6

import sys
import subprocess
import glob
import time
import os
from pathlib import Path

run_tests = False

# Make io unbuffered
def flush(fn):
  def newfn(x):
    fn(x)
    sys.stdout.flush()
  return newfn
sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)

def run(start, bash):
  proc = subprocess.run(bash, shell=True)
  stop = time.time()
  success = proc.returncode == 0
  if success:
    print(">> Success in " + str(stop-start) + "s")
  else:
    print(">> Failed in " + str(stop-start) + "s")

  return success

###################
# Build logic
###################
def pretty_print(msg, color):
  print('\x1b[6;30;' + str(color) + 'm' + "\n$ " + msg + '\x1b[0m')

def run_frontend(start, bash):
  pretty_print(bash, 44)
  return run(start, bash)

def run_backend(start, bash):
  pretty_print(bash, 42)
  return run(start, bash)

def run_test(start, bash):
  if run_tests:
    pretty_print(bash, 45)
    return run(start, bash)
  else:
    return True

def less_compile():
  start = time.time()
  return run_frontend(start, "lessc server/static/base.less server/static/base.css")


def client2_build():
  start = time.time()
  build = "cd client2 && unbuffer ./node_modules/.bin/bsb -make-world && ./node_modules/.bin/browserify lib/js/src/Main.bs.js --standalone buckle -o ../server/static/bsmain.js"
  result = run_frontend(start, build)
  return result

def client2_install():
  start = time.time()
  build = "cd client2 && unbuffer ../scripts/support/retrying-yarn-install"
  return run_frontend(start, build)

def client2_test():
  start = time.time()
  result = run_test(start, "cd client2 && unbuffer yarn test")
  return result


landmarks = " OCAML_LANDMARKS='time,allocation,on,auto,format=json,output=profile.json' "
def server_build():
  start = time.time()
  global profile
  exes = " ".join([ "bin/main.exe"
                  , "bin/queue_worker.exe"
                  , "bin/cron_checker.exe"
                  , "bin/add_user.exe"
                  , "bin/cleanup_traces.exe"
                  , "bin/darkjs.bc.js"
                  , "@darkjs"
                  ])

  if os.environ.get("CI"):
      compilation_profile = "release"
  else:
      compilation_profile = "dev"

  build = "unbuffer" \
        + " dune build" \
        + " --profile " + compilation_profile \
        + " --display short" \
        + " --root server" \
        + " -j 8 " \
        + exes
  if profile:
    return run_backend(start, landmarks + build)
  else:
    return run_backend(start, build)

def server_test():
  start = time.time()
  ci = "--verbose" if os.environ.get("CI") else "--quick"
  rundir = os.environ.get("DARK_CONFIG_RUN_DIR")
  host = "DARK_CONFIG_DB_HOST=localhost"
  dbname = "DARK_CONFIG_DB_DBNAME=testdb"
  user = "DARK_CONFIG_DB_USER=dark"
  password = "DARK_CONFIG_DB_PASSWORD=eapnsdc"
  env = "DARK_CONFIG_ENV_DISPLAY_NAME=test"
  dbenv = host + " " + dbname + " " + user + " " + password
  return run_test(start,
          "unbuffer dune build --root server test/test.exe"
          + " && dropdb --if-exists testdb"
          + " && createdb testdb"
          + " && cd " + rundir
          + " && " + dbenv
          + " unbuffer ../server/_build/default/test/test.exe"
          + " --show-errors "
          + ci
          + " 2>&1")

def reload_server():
  start = time.time()
  global profile
  runserver = "scripts/support/runserver"
  if profile:
    return run_backend(start, landmarks + runserver)
  else:
    return run_backend(start, runserver)

def generate_etags():
  start = time.time()
  return run_frontend(start, "./scripts/support/generate-etags")

def reload_browser():
  start = time.time()
  # Sends a signal to another fswatch on your mac
  return run_frontend(start, "touch .browser-trigger")

class Should:
  def __init__(self):
    self.server_build = False
    self.server_test = False
    self.client2_install = False
    self.client2_build = False
    self.client2_test = False
    self.less_compile = False
    self.reload_browser = False
    self.reload_server = False
    self.generate_etags = False

def execute(should):
  sb = should.server_build and server_build()
  should.reload_server |= sb

  c2i = should.client2_install and client2_install ()
  should.client2_build |= c2i
  c2b = should.client2_build and client2_build()

  should.client2_test |= c2b
  c2t = should.client2_test and client2_test()

  lc = should.less_compile and less_compile()

  should.generate_etags |= sb or lc
  ge = should.generate_etags and generate_etags()

  should.reload_server |= ge
  rs = should.reload_server and reload_server()

  should.reload_browser |= rs or lc or c2b
  rb = should.reload_browser and reload_browser()

  should.server_test |= sb
  ot = should.server_test and server_test()

  return sb and rs and lc and rb and ot and ge and c2b and c2t




def mark(should, f):
  # Ocaml
  if "test/test.ml" in f:
    should.server_test = True

  elif ("server/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f) \
                  or ("jbuild" in f) \
                  or ("_tags" in f) \
                  or ("libtarget.js" in f)):
    should.server_build = True

  # Frontend
  elif "client2/package.json" in f:
    should.client2_install = True
  elif ("client2/" in f) \
          and ((".mli" in f) \
                  or (".ml" in f)):
    should.client2_build = True

  # Web
  elif ".less" in f:
    should.less_compile = True

  elif ".html" in f:
    should.reload_browser = True

  # Other
  else:
    print("unknown file: " + f, end='')

  return should



def ignore(filename):
  # substring
  ignores = [ ".git"
            , ".merlin"
            , "integration-tests/"
            , "rundir/"
            , "gcp_rundir/"
            , "scripts/"
            , "transaction.yaml"
            , "server/_build/"
            , "server/dark.install"
            , "server/gmon.out"
            , "server/ocamlbuild_output.txt"
            , "server/profile.json"
            , "server/serialization/"
            , "server/static/base.css"
            , "server/static/darkjs.bc.js"
            , "server/static/bsmain.js"
            , "etags.json"
            , "client2/node_modules"
            , "client2/lib"
            , "build.ninja"
            , ".bs.js"
            , ".bsdeps"
            , ".bsbuild"
            , ".sourcedirs.json"
            , ".md"
  ]
  for i in ignores:
    if i in filename:
      return True
  # ocaml build temporary
  if filename[-10:-8] == "/C":
    return True
  # emacs thing
  if "/.#" in filename:
    return True
  return False


profile = False # Run ocaml stuff under the landmarks profiler
files = []
def main():
  for f in sys.argv[1:]:
    if f == "--test":
      global run_tests
      run_tests = True
    elif not ignore(f):
      files.append(f)

  if len(files) > 0:
    pretty_print("Compiling: " + str(files), 43)

    should = Should()
    for f in files:
      mark(should, f)

    if execute(should):
      sys.exit(0)
    else:
      sys.exit(1)

main()
