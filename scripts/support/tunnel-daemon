#!/usr/bin/env bash

# DOC: what is this for?
#
# We run this as its own k8s deployment (at time of writing, scale=1) and route
# all outgoing traffic through it by setting it as a SOCKS5 proxy in
# libhttpclient.ml's use of libcurl. (And and legacy.ml's.)
#
# It currently restricts direct access to the ocaml server (you can't hit
# http://localhost:80/pkill to take out a pod; you have to send requests off-pod
# first, which forces incoming traffic to go through nginx, which 403s /pkill;
# thus, only k8s itself can hit /pkill), as well as to the GCE instance metadata
# (http://metadata, as observed in the security incident of 2020-04-27; we block
# this by disallowing egress to 169.* in a NetworkPolicy on the tunnel. This was
# the security incident of 2020-04-27.)
#
# The tunnel does not currently restrict traffic otherwise; it might be nice
# to block 10.* and thus disallow access to any cluster-internal routes, but at
# least for the moment we can't, as blocking 10.* would mean breaking DNS
# requests from the tunnel service. (ismith is proposing a change that might
# allow us to do that, to come in a subsequent PR.)


set -euox pipefail

# kill all the children on exit
# (otherwise they hang around and keep the docker container running)
trap 'pkill -P $$' EXIT

cat > /etc/ssh/sshd_config <<EOF
ListenAddress localhost
PubkeyAuthentication yes
PasswordAuthentication no
AllowUsers tunnel
EOF

/usr/sbin/sshd

su tunnel <<EOF
# generate a new key
ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

# pre-approve the fingerprint
ssh-keyscan -H localhost >> ~/.ssh/known_hosts
EOF

# -tt because -t fails in local env:
# `Pseudo-terminal will not be allocated because stdin is not a terminal.`,
# and -tt forces allocation of a pseudo-terminal
su tunnel -c "ssh -tt -D *:1080 localhost sleep infinity" &

wait
