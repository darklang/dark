apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: scheduler-deployment
  annotations:
    kubernetes.io/change-cause: {CHANGE_CAUSE}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: scheduler-worker
  replicas: 1
  template:
    metadata:
      labels:
        app: scheduler-worker
    spec:
      containers:
        - name: scheduler-ctr
          image: "gcr.io/balmy-ground-195100/dark-gcp-queue-scheduler:{SCHEDULER_IMAGE}"
          # Resource request intentionally less than resource limit, to ensure
          # this pod is a 'Burstable' pod, ref:
          #  https://medium.com/google-cloud/quality-of-service-class-qos-in-kubernetes-bb76a89eb2c6
          resources:
            requests:
              memory: "250Mi"
              cpu: "100m"
            limits:
              memory: "250Mi"
              cpu: "100m"
          envFrom:
            - configMapRef:
                name: gke-dark-prod
          env:
            - name: DARK_CONFIG_RUNNING_IN_GKE
              value: "true"

#########################
# Postgres proxy config
# To connect to postgres from kubernetes, we need to add a proxy. See
# https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine.
# Note in particular that we needed to create a service account and a
# set of GKE secrets, listed below, to manage this.
#########################
            # connect to sql proxy in the same pod
            - name: DARK_CONFIG_DB_HOST
              value: 127.0.0.1
            - name: DARK_CONFIG_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: DARK_CONFIG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password

        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "500Mi"
              cpu: "150m"
          command: ["/bin/sh",
                    "-c",
                    "/cloud_sql_proxy -dir=/cloudsql -instances=balmy-ground-195100:us-west1:{CLOUDSQL_INSTANCE_NAME}=tcp:5432 -credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true

      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
