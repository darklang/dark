# Service account for the agent
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: honeycomb-serviceaccount
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: honeycomb-serviceaccount
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: honeycomb-serviceaccount
subjects:
- kind: ServiceAccount
  name: honeycomb-serviceaccount
  namespace: default
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: honeycomb-serviceaccount
  namespace: default
rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
    - watch

# ConfigMap specifying which logs the agent should watch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: honeycomb-agent-config
  namespace: default
data:
  config.yaml: |-
    # By default, submit logs from interesting system pods such as the
    # kube API server
    watchers:
      - dataset: kubernetes-logs
        labelSelector: "k8s-app=kube-apiserver"
        namespace: kube-system
        parser: glog
      - dataset: kubernetes-logs
        labelSelector: "k8s-app=kube-scheduler"
        namespace: kube-system
        parser: glog
      - dataset: kubernetes-logs
        labelSelector: "k8s-app=kube-controller-manager"
        namespace: kube-system
        parser: glog
      - dataset: kubernetes-logs
        labelSelector: "k8s-app=kube-proxy"
        namespace: kube-system
        parser: glog
      - dataset: kubernetes-logs
        labelSelector: "k8s-app=dns-controller"
        namespace: kube-system
        parser: glog
      - labelSelector: "app in (bwd-app, qw-worker)"
        containerName: stroller
        dataset: kubernetes-stroller
        parser: json
      - labelSelector: "app=scheduler-worker"
        containerName: scheduler-ctr
        dataset: kubernetes-scheduler
        parser: json
      - labelSelector: "app=bwd-app"
        containerName: bwd-ctr
        dataset: kubernetes-bwd-ocaml
        parser: json
        processors:
        # 'request' is what we now call 'handler_name'; it's in here for the
        # moment so honeycomb knows how to handle both for the brief period when
        # we have logs with the old name and logs with the new name.
        - request_shape:
            field: request
            patterns:
            - /a/:canvas
            - /api/:canvas/save_test
            - /api/:canvas/rpc
            - /api/:canvas/add_op
            - /api/:canvas/initial_load
            - /api/:canvas/execute_function
            - /api/:canvas/get_trace_data
            - /api/:canvas/get_unlocked_dbs
            - /api/:canvas/get_worker_stats
            - /api/:canvas/get_db_stats
            - /api/:canvas/delete_404
            - /api/:canvas/static_assets
            - /canvas/:canvas/events/:event # stroller - not currently routed through nginx
        - request_shape:
            field: handler_name
            patterns:
            - /a/:canvas
            - /api/:canvas/save_test
            - /api/:canvas/rpc
            - /api/:canvas/add_op
            - /api/:canvas/initial_load
            - /api/:canvas/execute_function
            - /api/:canvas/get_trace_data
            - /api/:canvas/get_unlocked_dbs
            - /api/:canvas/get_worker_stats
            - /api/:canvas/get_db_stats
            - /api/:canvas/delete_404
            - /api/:canvas/static_assets
            - /canvas/:canvas/events/:event # stroller - not currently routed through nginx
      - labelSelector: "app=cron-checker"
        containerName: cron-ctr
        dataset: kubernetes-bwd-ocaml
        parser: json
      - labelSelector: "app=qw-worker"
        containerName: qw-ctr
        dataset: kubernetes-bwd-ocaml
        parser: json
      - labelSelector: "app=bwd-app"
        containerName: http-proxy
        dataset: kubernetes-bwd-nginx
        parser:
          name: nginx
          dataset: kubernetes-bwd-nginx
          options:
            config_file: /etc/nginx/conf.d/nginx.conf
            log_format: '$remote_addr - $remote_user [$time_local] $host "$request" $status $bytes_sent $body_bytes_sent $request_time "$http_referer" "$http_user_agent" $request_length "$http_authorization" "$http_x_forwarded_proto" "$http_x_forwarded_for" $server_name "$upstream_http_x_darklang_execution_id" "$http_cookie" "$upstream_http_x_dark_username"'
        processors:
        - request_shape:
            field: request
            patterns:
            - /a/:canvas
            - /api/:canvas/save_test
            - /api/:canvas/rpc
            - /api/:canvas/add_op
            - /api/:canvas/initial_load
            - /api/:canvas/execute_function
            - /api/:canvas/get_trace_data
            - /api/:canvas/get_unlocked_dbs
            - /api/:canvas/get_worker_stats
            - /api/:canvas/get_db_stats
            - /api/:canvas/delete_404
            - /api/:canvas/static_assets
            - /canvas/:canvas/events/:event # stroller - not currently routed through nginx
    verbosity: info
    # splitLogging directs trace, debug, info, and warn log levels to stdout
    # rather than stderr.
    splitLogging: false

# Daemonset
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    k8s-app: honeycomb-agent
    kubernetes.io/cluster-service: 'true'
    version: v1.1
  name: honeycomb-agent-v1.1
  namespace: default
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: honeycomb-agent
        kubernetes.io/cluster-service: 'true'
        version: v1.1
      annotations:
        reloader.stakater.com/auto: "true"
    spec:
      tolerations:
        - operator: Exists
          effect: NoSchedule
      containers:
      - env:
        - name: HONEYCOMB_WRITEKEY
          valueFrom:
            secretKeyRef:
              key: key
              name: honeycomb-writekey
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: honeycombio/honeycomb-kubernetes-agent:1.5.0
        imagePullPolicy: IfNotPresent
        name: honeycomb-agent
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: "/etc/honeycomb"
          name: config
          readOnly: false
        - mountPath: "/var/log"
          name: varlog
          readOnly: false
        - mountPath: "/var/lib/docker/containers"
          name: varlibdockercontainers
          readOnly: true
      serviceAccountName: honeycomb-serviceaccount
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: honeycomb-agent-config
        name: config
      - hostPath:
          path: "/var/log"
        name: varlog
      - hostPath:
          path: "/var/lib/docker/containers"
        name: varlibdockercontainers
---
