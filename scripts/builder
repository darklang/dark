#!/usr/bin/env bash

set -euo pipefail

# This is used, in concert with scripts/build/_build-server, to run Dark
# inside the dev container. There is a strong connection between these files
# and .circleci/config.yml. Generally, if you add something to one of these
# files, there's an equivalent to be added in .circleci/config.yml.

if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  # Because we use `-v`
  echo "We require bash >= 4. Assuming you're on a Mac and have homebrew installed,"
  echo "upgrade by running \`brew install bash\`."
  exit 1
fi

# Sometimes these dirs leak out of the container, causing confusion and
# slowness
rm -Rf _build
rm -Rf _esy
rm -Rf .esy
rm -Rf node_modules
rm -Rf lib
rm -Rf fsharp-backend/src/*/obj
rm -Rf fsharp-backend/tests/*/obj
rm -Rf fsharp-backend/Build

# See Dockerfile for an explanation of uid/gid.
gid="$(id -g)"
# Below is max($gid, 1000); on OS X, the user's group might be staff, with
# gid=20, which conflicts with ubuntu group dialout.
gid=$((gid > 1000 ? gid : 1000))

# --------------
# Build image from clean start
# --------------
if [[ ! -v NEVER_REBUILD_DOCKER ]]; then
  echo "Building docker image"
  # Always build for linux/amd64 (new OSX arm machines have emulation)
  docker buildx build --platform linux/amd64 -t dark --build-arg uid="$(id -u)" --build-arg gid="$gid" .

  echo "Removing running containers"
  c=$(docker ps --filter "name=dark-builder" -q)
  if [[ -n "${c}" ]]; then
    docker kill "${c}";
  fi
fi

# --------------
# --------------
echo "watching for local changes"
RELOAD_BROWSER=""
for i in "$@"
do
  case $i in
      --watch)
	  RELOAD_BROWSER=true
    ;;
  esac
done

if [ -n "$RELOAD_BROWSER" ]; then
    echo "Starting the browser reload script"
    mkdir -p rundir/logs
    scripts/build/_reload-browser > rundir/logs/browser.log 2>&1 &
fi

# --------------
# Mounts
# --------------

MOUNTS="--mount type=bind,src=$PWD,dst=/home/dark/app"

# Avoid docker syncing everything to the host, slowing compiles down by 5x
MOUNTS+=" --mount type=volume,src=dark_build,dst=/home/dark/app/_build"
MOUNTS+=" --mount type=volume,src=dark_dotesy,dst=/home/dark/.esy"
MOUNTS+=" --mount type=volume,src=dark_esy,dst=/home/dark/app/_esy"
MOUNTS+=" --mount type=volume,src=dark_fsharp_build,dst=/home/dark/app/fsharp-backend/Build"
MOUNTS+=" --mount type=volume,src=dark_lib,dst=/home/dark/app/lib"
MOUNTS+=" --mount type=volume,src=dark_node_modules,dst=/home/dark/app/node_modules"
MOUNTS+=" --mount type=volume,src=dark_nuget,dst=/home/dark/.nuget"

if [[ -e "$HOME/.config/gcloud" ]]; then
  MOUNTS="$MOUNTS --mount type=bind,src=$HOME/.config/gcloud,dst=/home/dark/.config/gcloud"
fi
# make sure this exists first, so it doesn't get created as a directory
touch "$HOME/.dark_bash_history"
MOUNTS="$MOUNTS --mount type=bind,src=$HOME/.dark_bash_history,dst=/home/dark/.bash_history"

# --------------
# environment
# --------------

ENV="dev"
for i in "$@"
do
  case $i in
    --prodclone)
    ENV="dev_prodclone"
    ;;
  esac
done

ENV_FILE="config/$ENV"

echo "Using env: $ENV_FILE"

# --------------
# create the network
# --------------
./scripts/devcontainer/_create-dark-dev-network

# --------------
# --------------
echo "Run the build"

# --init here keeps orphaned processes (`<defunct>`, in ps) from
# hanging around forever; see https://tech.fpcomplete.com/rust/pid1
# (above the fold) for a description of the process 1 problem in
# docker, and
# https://docs.docker.com/engine/reference/run/#specify-an-init-process
# for documentation of --init.
# -p 5433:5432 to expose the postgres DB to outside the container
# -p 2345:2345 to expose the cloud_sql_proxy to outside the container
# -p 9000:9000 to expose the F# api server
# -p 7001:7001 to expose the F# bwd server
# -p 8000:8000 to expose the OCaml backend server
# -cap-add & -security-opt to attach a gdb/strace to .net code
docker run \
  --init \
  --rm \
  -i \
  --platform linux/amd64 \
  --dns 8.8.8.8 \
  --dns 8.8.4.4 \
  --name dark-builder \
  --hostname dark-dev \
  --env-file "$ENV_FILE" \
  --env HOST_PWD="$PWD" \
  --env IN_DEV_CONTAINER=true \
  -v pgconf:/etc/postgresql \
  -v pglogs:/var/log/postgresql \
  -v pgdata:/var/lib/postgresql \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -p 8000:8000 \
  -p 9000:9000 \
  -p 11001:11001 \
  -p 5433:5432 \
  -p 2345:2345 \
  --security-opt seccomp=scripts/devcontainer/chrome-seccomp.json \
  -w /home/dark/app \
  --user "$(id -u):$gid" \
  --cap-add=ALL \
  --security-opt seccomp=unconfined \
  $MOUNTS \
  dark \
  scripts/build/_build-server "${@}"
