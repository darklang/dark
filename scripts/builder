#!/usr/bin/env bash

set -euo pipefail

# --------------
# Build image from clean start
# --------------
if [[ ! -v NEVER_REBUILD_DOCKER ]]; then
  echo "Building docker image"
  docker build -t dark .

  echo "Removing running containers"
  c=$(docker ps --filter "ancestor=dark" -q)
  if [[ ! -z "${c}" ]]; then
    docker kill "${c}";
  fi
fi

# --------------
# --------------
echo "watching for local changes"
RELOAD_BROWSER=""
for i in "$@"
do
  case $i in
      --watch)
	  RELOAD_BROWSER=true
    ;;
  esac
done

if [ -n "$RELOAD_BROWSER" ]; then
    echo "Starting the browser reload script"
    mkdir -p rundir/logs
    scripts/support/reload-browser > rundir/logs/browser.log 2>&1 &
fi

# --------------
# Conduit
# --------------
if [ ! -v CI ]; then
  if [ ! -d ../conduit-frontend ]; then
    echo "pulling the conduit frontend"
    pushd ..
    git clone git@github.com:darklang/conduit-frontend
    popd
  fi
fi

# --------------
# Mounts
# --------------

if [ -v CI ]; then
  # see "copy in data" in .circleci/config.yml
  MOUNTS="--volumes-from vols"
else
  MOUNTS="--mount type=bind,src=$PWD,dst=/home/dark/app"
  # Avoid docker syncing everything to the host, slowing compiles down by 5x
  MOUNTS+=" -v /home/dark/app/server/_build"

  if [[ -e "../conduit-frontend" ]]; then
    MOUNTS="$MOUNTS --mount type=bind,src=$PWD/../conduit-frontend,dst=/home/dark/conduit-frontend"
  fi
  if [[ -e "$HOME/.config/gcloud" ]]; then
    MOUNTS="$MOUNTS --mount type=bind,src=$HOME/.config/gcloud,dst=/home/dark/.config/gcloud"
  fi
  # make sure this exists first, so it doesn't get created as a directory
  touch "$HOME/.dark_bash_history"
  MOUNTS="$MOUNTS --mount type=bind,src=$HOME/.dark_bash_history,dst=/home/dark/.bash_history"
fi

# --------------
# fswatch
# --------------
# Avoid hanging when --watch is not called. This runs the `true` command
# instead of fswatch.
FSWATCH="true"
for i in "$@"
do
  case $i in
    --watch)
    FSWATCH="fswatch --event-flag-separator=, -r * -x"

    # Added b/c otherwise --watch infinite-loops on Linux.
    # May be okay on OS X, haven't tried.
    case "$(uname -s)" in
      Linux*) FSWATCH+=" --event=Updated --event=Created"
        ;;
    esac
    ;;
  esac
done

ENV="dev"
for i in "$@"
do
  case $i in
    --prodclone)
    ENV="dev_prodclone"
    ;;
  esac
done
if [ -v CI ]; then
  ENV="circleci"
fi

ENV_FILE="config/$ENV"

echo "Using env: $ENV_FILE"

POLL_FREQ=
if [ -v POLL_FREQUENCY ]; then
  POLL_FREQ="--env POLL_FREQUENCY=$POLL_FREQUENCY"
fi

if [ ! -v CI ]; then
  CI=
fi

./scripts/support/create-dark-dev-network

# --------------
# --------------
echo "Run the build"
$FSWATCH | docker run \
             --rm \
             -i \
             $MOUNTS \
             --privileged \
             --dns 127.0.0.1 \
             --dns 8.8.8.8 \
             --dns 8.8.4.4 \
             --name dark-dev \
             --network dark-dev-net \
             --hostname dark-dev \
             --env-file $ENV_FILE \
             --env HOST_PWD=$PWD \
             --env IN_DEV_CONTAINER=true \
             --env CI=$CI \
             $POLL_FREQ \
             -v pgconf:/etc/postgresql \
             -v pglogs:/var/log/postgresql \
             -v pgdata:/var/lib/postgresql \
             -v /var/run/docker.sock:/var/run/docker.sock \
             -p 8000:8000 \
             -p 8001:8001 \
             -p 8081:8081 \
             --security-opt seccomp=scripts/support/chrome-seccomp.json \
             -w /home/dark/app \
             dark \
             scripts/support/build-server "${@}"
