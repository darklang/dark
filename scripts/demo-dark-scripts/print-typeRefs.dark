(let typeReferences: List<PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference> =
  [ PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TVariable "test"

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TInt
    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TFloat
    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool
    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TUnit
    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TString
    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBytes

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TList
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TInt

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TTuple(
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool,
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool,
      [ PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool ]
    )

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TDict
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TDB
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool

    // PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TCustomType(
    //   PACKAGE.Darklang.LanguageTools.ProgramTypes.FQName.UserProgram
    //     { modules = [ "Mod" ]
    //       name =
    //         PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeName.Name.TypeName "User"
    //       version = 0 },
    //   [ PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool ]
    // )

    // PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TCustomType(
    //   PACKAGE.Darklang.LanguageTools.ProgramTypes.FQName.BuiltIn
    //     { modules = [ "Mod" ]
    //       name =
    //         PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeName.Name.TypeName "User"
    //       version = 0 },
    //   [ PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool ]
    // )

    // PT.TCustomType(
    //   PT.FQName.Package
    //     { owner = "dark"
    //       modules = NonEmptyList.ofList [ "Mod1"; "Mod2" ]
    //       name = PT.TypeName.TypeName "Pack"
    //       version = 0 },
    //   [ PT.TBool ]
    // )

    PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TFn(
      [ PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool ],
      PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeReference.TBool
    ) ]

 let prettyPrinted =
   typeReferences
   |> Builtin.List.map (fun t ->
     PACKAGE.Darklang.PrettyPrinter.ProgramTypes.typeReference t)
   |> Builtin.String.join "\n"

 Builtin.print prettyPrinted

 0)