#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

grey="\033[1;30m"
reset="\033[0m"

TEST=false
PUBLISHED=false

for i in "$@"
do
  case "${i}" in
    --test)
    TEST=true
    shift
    ;;
    --published) PUBLISHED=true ;;
  esac
done

if [[ "$TEST" == "true" ]]; then
  LOG_DB="${DARK_CONFIG_RUNDIR}/logs/test-packages-db.log"
  LOG_CANVAS="${DARK_CONFIG_RUNDIR}/logs/test-packages-canvas.log"
else
  LOG_DB="${DARK_CONFIG_RUNDIR}/logs/packages-db.log"
  LOG_CANVAS="${DARK_CONFIG_RUNDIR}/logs/packages-canvas.log"
fi


# Note: doesn't support release/published
if [[ "$PUBLISHED" == "true" ]]; then
  LOCALEXEC_EXE="backend/Build/out/LocalExec/Release/net7.0/linux-x64/publish/LocalExec"
else
  LOCALEXEC_EXE="backend/Build/out/LocalExec/Debug/net7.0/LocalExec"
fi

echo -e "Loading packages into DB ${grey}($LOG_DB)${reset}"
"${LOCALEXEC_EXE}" load-packages > $LOG_DB 2>&1


# todo: wait until the backend servers are running (ports is ready)
# for name in "${@}"; do
#   echo "Waiting for $name"
#   until curl "localhost:${DARK_CONFIG_BWDSERVER_DANGER_KUBERNETES_PORT}" ; do
#     printf '.'
#     sleep 1
#   done
# done


if [[ "$TEST" != "true" ]]; then
  # make sure the target canvas exists and is cleared
  ./scripts/run-canvas-hack dark-packages

  echo -e "Loading packages into Dark canvas ${grey}($LOG_CANVAS)${reset}"
  ./scripts/run-local-exec load-packages-dark > $LOG_CANVAS 2>&1
fi