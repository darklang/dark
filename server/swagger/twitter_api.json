{
    "basePath": "https://api.twitter.com", 
    "apis": [
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_remove_profile_banner", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success."
                }
            ], 
            "path": "/1.1/account/remove_profile_banner.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_settings", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "trend_location_woeid", 
                            "description": "The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "sleep_time_enabled", 
                            "description": "When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "start_sleep_time", 
                            "description": "The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "end_sleep_time", 
                            "description": "The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "time_zone", 
                            "description": "The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "lang", 
                            "description": "The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the authenticating user's settings."
                }
            ], 
            "path": "/1.1/account/settings.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_delivery_device", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "device", 
                            "description": "Must be one of: sms, none."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "When set to either true, t or 1, each tweet will include a node called \"entities,\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates."
                }
            ], 
            "path": "/1.1/account/update_delivery_device.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_profile", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "name", 
                            "description": "Full name associated with the profile. Maximum of 20 characters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "url", 
                            "description": "URL associated with the profile. Will be prepended with \"http://\" if not present. Maximum of 100 characters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "location", 
                            "description": "The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "description", 
                            "description": "A description of the user owning the account. Maximum of 160 characters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Sets values that users are able to set under the \"Account\" tab of their settings page. Only the parameters specified will be updated."
                }
            ], 
            "path": "/1.1/account/update_profile.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_profile_background_image", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "image", 
                            "description": "The background image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. The image must be provided as raw multipart data, not a URL."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "tile", 
                            "description": "Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "use", 
                            "description": "Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the authenticating user's profile background image. This method can also be used to enable or disable the profile background image."
                }
            ], 
            "path": "/1.1/account/update_profile_background_image.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_profile_banner", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "banner", 
                            "description": "The Base64-encoded or raw image data being uploaded as the user's new profile banner."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "width", 
                            "description": "The width of the preferred section of the image being uploaded in pixels. Use with height, offset_left, and offset_top to select the desired region of the image to use."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "height", 
                            "description": "The height of the preferred section of the image being uploaded in pixels. Use with width, offset_left, and offset_top to select the desired region of the image to use."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "offset_left", 
                            "description": "The number of pixels by which to offset the uploaded image from the left. Use with height, width, and offset_top to select the desired region of the image to use."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "offset_top", 
                            "description": "The number of pixels by which to offset the uploaded image from the top. Use with height, width, and offset_left to select the desired region of the image to use."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Uploads a profile banner on behalf of the authenticating user. For best results, upload an profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners and GET users/profile_banner."
                }
            ], 
            "path": "/1.1/account/update_profile_banner.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_profile_colors", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "profile_background_color", 
                            "description": "Profile background color."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "profile_link_color", 
                            "description": "Profile link color."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "profile_sidebar_border_color", 
                            "description": "Profile sidebar's border color."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "profile_sidebar_fill_color", 
                            "description": "Profile sidebar's background color."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "profile_text_color", 
                            "description": "Profile text color."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff)."
                }
            ], 
            "path": "/1.1/account/update_profile_colors.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_account_update_profile_image", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "image", 
                            "description": "The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image."
                }
            ], 
            "path": "/1.1/account/update_profile_image.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_account_verify_credentials", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid."
                }
            ], 
            "path": "/1.1/account/verify_credentials.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_application_rate_limit_status", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "resources", 
                            "description": "A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the current rate limits for methods belonging to the specified resource families."
                }
            ], 
            "path": "/1.1/application/rate_limit_status.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_blocks_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed."
                }
            ], 
            "path": "/1.1/blocks/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_blocks_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful.  If relationships existed before the block was instated, they will not be restored."
                }
            ], 
            "path": "/1.1/blocks/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_blocks_ids", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns an array of numeric user ids the authenticating user is blocking."
                }
            ], 
            "path": "/1.1/blocks/ids.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_blocks_list", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of user objects that the authenticating user is blocking."
                }
            ], 
            "path": "/1.1/blocks/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_direct_messages", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs."
                }
            ], 
            "path": "/1.1/direct_messages.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_direct_messages_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "id", 
                            "description": "The ID of the direct message to delete."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message."
                }
            ], 
            "path": "/1.1/direct_messages/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_direct_messages_new", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "text", 
                            "description": "The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful."
                }
            ], 
            "path": "/1.1/direct_messages/new.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_direct_messages_sent", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "page", 
                            "description": "Specifies the page of results to retrieve."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will not be included when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs."
                }
            ], 
            "path": "/1.1/direct_messages/sent.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_direct_messages_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "id", 
                            "description": "The ID of the direct message."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient."
                }
            ], 
            "path": "/1.1/direct_messages/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_favorites_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be omitted when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful."
                }
            ], 
            "path": "/1.1/favorites/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_favorites_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be omitted when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful."
                }
            ], 
            "path": "/1.1/favorites/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_favorites_list", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200.  Defaults to 20."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be omitted when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the 20 most recent Tweets favorited by the authenticating or specified user."
                }
            ], 
            "path": "/1.1/favorites/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_followers_ids", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs, JSON and Snowflake."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a cursored collection of user IDs for every user following the specified user."
                }
            ], 
            "path": "/1.1/followers/ids.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_followers_list", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the results to be broken into pages of no more than 20 records at a time. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_user_entities", 
                            "description": "The user object entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a cursored collection of user objects for users following the specified user."
                }
            ], 
            "path": "/1.1/followers/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friends_ids", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs, JSON and Snowflake."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \"friends\")."
                }
            ], 
            "path": "/1.1/friends/ids.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friends_list", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the results to be broken into pages of no more than 20 records at a time. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_user_entities", 
                            "description": "The user object entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their \"friends\")."
                }
            ], 
            "path": "/1.1/friends/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_friendships_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to befriend."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to befriend."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "follow", 
                            "description": "Enable notifications for the target user."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows the authenticating users to follow the user specified in the ID parameter."
                }
            ], 
            "path": "/1.1/friendships/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_friendships_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to unfollow."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to unfollow."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows the authenticating user to unfollow the user specified in the ID parameter."
                }
            ], 
            "path": "/1.1/friendships/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friendships_incoming", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs, JSON and Snowflake."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user."
                }
            ], 
            "path": "/1.1/friendships/incoming.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friendships_lookup", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none."
                }
            ], 
            "path": "/1.1/friendships/lookup.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friendships_no_retweets_ids", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake. This parameter is especially important to use in Javascript environments."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from."
                }
            ], 
            "path": "/1.1/friendships/no_retweets/ids.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friendships_outgoing", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs, JSON and Snowflake."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request."
                }
            ], 
            "path": "/1.1/friendships/outgoing.{format}", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_friendships_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "source_id", 
                            "description": "The user_id of the subject user."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "source_screen_name", 
                            "description": "The screen_name of the subject user."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "target_id", 
                            "description": "The user_id of the target user."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "target_screen_name", 
                            "description": "The screen_name of the target user."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns detailed information about the relationship between two arbitrary users."
                }
            ], 
            "path": "/1.1/friendships/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_friendships_update", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to befriend."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to befriend."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "device", 
                            "description": "Enable/disable device notifications from the target user."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "retweets", 
                            "description": "Enable/disable retweets from the target user."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows one to enable or disable retweets and device notifications from the specified user."
                }
            ], 
            "path": "/1.1/friendships/update.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_geo_id_:place_id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "place_id", 
                            "description": "A place in the world. These IDs can be retrieved from geo/reverse_geocode."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns all the information about a known place."
                }
            ], 
            "path": "/1.1/geo/id/{place_id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_geo_place", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "name", 
                            "description": "The name a place is known as."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "contained_within", 
                            "description": "The place_id within which the new place can be found. Try and be as close as possible with the containing place. For example, for a room in a building, set the contained_within as the building place_id."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "token", 
                            "description": "The token found in the response from geo/similar_places."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "lat", 
                            "description": "The latitude the place is located at. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "long", 
                            "description": "The longitude the place is located at. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "attribute:street_address", 
                            "description": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more About Geo Place Attributes."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "callback", 
                            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Creates a new place object at the given latitude and longitude."
                }
            ], 
            "path": "/1.1/geo/place.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_geo_reverse_geocode", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "lat", 
                            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "long", 
                            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "accuracy", 
                            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "granularity", 
                            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_results", 
                            "description": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "callback", 
                            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status."
                }
            ], 
            "path": "/1.1/geo/reverse_geocode.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_geo_search", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "lat", 
                            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "long", 
                            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "query", 
                            "description": "Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "ip", 
                            "description": "An IP address. Used when attempting to fix geolocation based off of the user's IP address."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "granularity", 
                            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "accuracy", 
                            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_results", 
                            "description": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "contained_within", 
                            "description": "This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you would specify a place_id of \"5a110d312052166f\""
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "attribute:street_address", 
                            "description": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "callback", 
                            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status."
                }
            ], 
            "path": "/1.1/geo/search.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_geo_similar_places", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "lat", 
                            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "long", 
                            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "name", 
                            "description": "The name a place is known as."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "contained_within", 
                            "description": "This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you would specify a place_id of \"5a110d312052166f\""
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "attribute:street_address", 
                            "description": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "callback", 
                            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Locates places near the given coordinates which are similar in name."
                }
            ], 
            "path": "/1.1/geo/similar_places.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_help_configuration", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths."
                }
            ], 
            "path": "/1.1/help/configuration.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_help_languages", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests."
                }
            ], 
            "path": "/1.1/help/languages.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_help_privacy", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns Twitter's Privacy Policy."
                }
            ], 
            "path": "/1.1/help/privacy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_help_tos", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road."
                }
            ], 
            "path": "/1.1/help/tos.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "name", 
                            "description": "The name for the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "mode", 
                            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "description", 
                            "description": "The description to give the list."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Creates a new list for the authenticated user. Note that you can't create more than 20 lists per account."
                }
            ], 
            "path": "/1.1/lists/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Deletes the specified list. The authenticated user must own the list to be able to destroy it."
                }
            ], 
            "path": "/1.1/lists/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_list", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "reverse", 
                            "description": "Set this to true if you would like owned lists to be returned first.  See description above for information on how this parameter works."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used."
                }
            ], 
            "path": "/1.1/lists/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_members", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the collection of list members to be broken into \"pages\" of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list."
                }
            ], 
            "path": "/1.1/lists/members.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_members_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 500 members."
                }
            ], 
            "path": "/1.1/lists/members/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_members_create_all", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method."
                }
            ], 
            "path": "/1.1/lists/members/create_all.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_members_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list."
                }
            ], 
            "path": "/1.1/lists/members/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_members_destroy_all", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method."
                }
            ], 
            "path": "/1.1/lists/members/destroy_all.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_members_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Check if the specified user is a member of the specified list."
                }
            ], 
            "path": "/1.1/lists/members/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_memberships", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See Using cursors to navigate collections for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "filter_to_owned_lists", 
                            "description": "When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned."
                }
            ], 
            "path": "/1.1/lists/memberships.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_ownerships", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See Using cursors to navigate collections for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists."
                }
            ], 
            "path": "/1.1/lists/ownerships.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list."
                }
            ], 
            "path": "/1.1/lists/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_statuses", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of results to retrieve per \"page.\""
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "Entities are ON by default in API 1.1, each tweet includes a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities=false"
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_rts", 
                            "description": "When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets."
                }
            ], 
            "path": "/1.1/lists/statuses.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_subscribers", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list."
                }
            ], 
            "path": "/1.1/lists/subscribers.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_subscribers_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Subscribes the authenticated user to the specified list."
                }
            ], 
            "path": "/1.1/lists/subscribers/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_subscribers_destroy", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Unsubscribes the authenticated user from the specified list."
                }
            ], 
            "path": "/1.1/lists/subscribers/destroy.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_subscribers_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber."
                }
            ], 
            "path": "/1.1/lists/subscribers/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_lists_subscriptions", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See Using cursors to navigate collections for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.  Does not include the user's own lists."
                }
            ], 
            "path": "/1.1/lists/subscriptions.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_lists_update", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "list_id", 
                            "description": "The numerical id of the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "slug", 
                            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "name", 
                            "description": "The name for the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "mode", 
                            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "description", 
                            "description": "The description to give the list."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_screen_name", 
                            "description": "The screen name of the user who owns the list being requested by a slug."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "owner_id", 
                            "description": "The user ID of the user who owns the list being requested by a slug."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the specified list. The authenticated user must own the list to be able to update it."
                }
            ], 
            "path": "/1.1/lists/update.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_saved_searches_create", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "query", 
                            "description": "The query of the search the user would like to save."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Create a new saved search for the authenticated user. A user may only have 25 saved searches."
                }
            ], 
            "path": "/1.1/saved_searches/create.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_saved_searches_destroy_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "id", 
                            "description": "The ID of the saved search."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed."
                }
            ], 
            "path": "/1.1/saved_searches/destroy/{id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_saved_searches_list", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns the authenticated user's saved search queries."
                }
            ], 
            "path": "/1.1/saved_searches/list.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_saved_searches_show_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "id", 
                            "description": "The ID of the saved search."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested."
                }
            ], 
            "path": "/1.1/saved_searches/show/{id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_search_tweets", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "q", 
                            "description": "A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators.  Queries may additionally be limited by complexity."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "geocode", 
                            "description": "Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius modifier."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "lang", 
                            "description": "Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "locale", 
                            "description": "Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "result_type", 
                            "description": "Optional. Specifies what type of search results you would prefer to receive. The current default is \"mixed.\" Valid values include: \u00a0\u00a0* mixed: Include both popular and real time results in the response. \u00a0\u00a0* recent: return only the most recent results in the response \u00a0\u00a0* popular: return only the most popular results in the response."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \"rpp\" parameter in the old Search API."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "until", 
                            "description": "Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "callback", 
                            "description": "If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of relevant Tweets matching a specified query."
                }
            ], 
            "path": "/1.1/search/tweets.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_site", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "follow", 
                            "description": "A comma separated list of user IDs, indicating the users to return statuses for in the stream. See the follow parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "delimited", 
                            "description": "Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stall_warnings", 
                            "description": "Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "with", 
                            "description": "Specifies whether to return information for just the users specified in the follow parameter, or include messages from accounts they follow. See the with parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "replies", 
                            "description": "Specifies whether to return additional @replies. See the replies parameter documentation for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": null
                }
            ], 
            "path": "/1.1/site.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_statuses_destroy_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful."
                }
            ], 
            "path": "/1.1/statuses/destroy/{id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_statuses_filter", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "follow see", 
                            "description": "A comma separated list of user IDs, indicating the users to return statuses for in the stream. See the follow parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "track see", 
                            "description": "Keywords to track. Phrases of keywords are specified by a comma-separated list.  See the track parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "locations see", 
                            "description": "Specifies a set of bounding boxes to track. See the locations parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "delimited", 
                            "description": "Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "stall_warnings", 
                            "description": "Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": null
                }
            ], 
            "path": "/1.1/statuses/filter.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_firehose", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "The number of messages to backfill.  See the count parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "delimited", 
                            "description": "Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stall_warnings", 
                            "description": "Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "This endpoint requires special permission to access."
                }
            ], 
            "path": "/1.1/statuses/firehose.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_home_timeline", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200.  Defaults to 20."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "exclude_replies", 
                            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "contributor_details", 
                            "description": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service."
                }
            ], 
            "path": "/1.1/statuses/home_timeline.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_mentions_timeline", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "contributor_details", 
                            "description": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user."
                }
            ], 
            "path": "/1.1/statuses/mentions_timeline.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_oembed", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "id", 
                            "description": "The Tweet/status ID to return embed code for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "url", 
                            "description": "The URL of the Tweet/status to be embedded."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "maxwidth", 
                            "description": "The maximum width in pixels that the embed should be rendered at.  This value is constrained to be between 250 and 550 pixels."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "hide_media", 
                            "description": "Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media.  When set to either true, t or 1 images will not be expanded.  Defaults to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "hide_thread", 
                            "description": "Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply.   When set to either true, t or 1 the original Tweet will not be shown.  Defaults to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "omit_script", 
                            "description": "Specifies whether the embedded Tweet HTML should include a <script> element pointing to widgets.js.  In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included.   When set to either true, t or 1 the <script> element will not be included in the embed HTML, meaning that pages must include a reference to  widgets.js manually.  Defaults to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "align", 
                            "description": "Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page.  Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "related", 
                            "description": "A value for the TWT related parameter, as described in Web Intents.  This value will be forwarded to all Web Intents calls."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "lang", 
                            "description": "Language code for the rendered embed.  This will affect the text and localization of the rendered HTML."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns information allowing the creation of an embedded representation of a Tweet on third party sites.  See the oEmbed specification for information about the response format."
                }
            ], 
            "path": "/1.1/statuses/oembed.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_statuses_retweet_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Retweets a tweet. Returns the original tweet with retweet details embedded."
                }
            ], 
            "path": "/1.1/statuses/retweet/{id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_retweeters_ids", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "cursor", 
                            "description": "Causes the list of IDs to be broken into pages of no more than 100 IDs at a time. The number of IDs returned is not guaranteed to be 100 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information. While this method supports the cursor parameter, the entire result set can be returned in a single cursored collection. Using the count parameter with this method will not provide segmented cursors for use with this parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stringify_ids", 
                            "description": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter."
                }
            ], 
            "path": "/1.1/statuses/retweeters/ids.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_retweets_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired status."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns up to 100 of the first retweets of a given tweet."
                }
            ], 
            "path": "/1.1/statuses/retweets/{id}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_retweets_of_me", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100. If omitted, 20 will be assumed."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The tweet entities node will be disincluded when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_user_entities", 
                            "description": "The user entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the most recent tweets authored by the authenticating user that have been retweeted by others. This timeline is a subset of the user's GET statuses/user_timeline."
                }
            ], 
            "path": "/1.1/statuses/retweets_of_me.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_sample", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "delimited", 
                            "description": "Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stall_warnings", 
                            "description": "Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": null
                }
            ], 
            "path": "/1.1/statuses/sample.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_show_:id", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "id", 
                            "description": "The numerical ID of the desired Tweet."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_my_retweet", 
                            "description": "When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the tweet."
                }
            ], 
            "path": "/1.1/statuses/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_statuses_update", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "status", 
                            "description": "The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link wrapping may effect character counts."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "in_reply_to_status_id", 
                            "description": "The ID of an existing status that the update is in reply to."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "lat", 
                            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "long", 
                            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "place_id", 
                            "description": "A place in the world. These IDs can be retrieved from GET geo/reverse_geocode."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "display_coordinates", 
                            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the authenticating user's current status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media."
                }
            ], 
            "path": "/1.1/statuses/update.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_statuses_update_with_media", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "status", 
                            "description": "The text of your status update. URL encode as necessary.  t.co link wrapping may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "media[]", 
                            "description": "Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "possibly_sensitive", 
                            "description": "Set to true for content which may not be suitable for every audience."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "in_reply_to_status_id", 
                            "description": "The ID of an existing status that the update is in reply to."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "lat", 
                            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "long", 
                            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "place_id", 
                            "description": "A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "display_coordinates", 
                            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Updates the authenticating user's current status and attaches media for upload. In other words, it creates a Tweet with a picture attached."
                }
            ], 
            "path": "/1.1/statuses/update_with_media.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_statuses_user_timeline", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "since_id", 
                            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "Specifies the number of tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "max_id", 
                            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "trim_user", 
                            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "exclude_replies", 
                            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "contributor_details", 
                            "description": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_rts", 
                            "description": "When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters."
                }
            ], 
            "path": "/1.1/statuses/user_timeline.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_trends_available", 
                    "parameters": [], 
                    "responseClass": "complex", 
                    "summary": "Returns the locations that Twitter has trending topic information for."
                }
            ], 
            "path": "/1.1/trends/available.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_trends_closest", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "lat", 
                            "description": "If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "long", 
                            "description": "If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the locations that Twitter has trending topic information for, closest to a specified location."
                }
            ], 
            "path": "/1.1/trends/closest.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_trends_place", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "id", 
                            "description": "The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "exclude", 
                            "description": "Setting this equal to hashtags will remove all hashtags from the trends list."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns the top 10 trending topics for a specific WOEID, if trending information is available for it."
                }
            ], 
            "path": "/1.1/trends/place.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_user", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "delimited", 
                            "description": "Specifies whether messages should be length-delimited. See the delimited parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "stall_warnings", 
                            "description": "Specifies whether stall warnings should be delivered. See the stall_warnings parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "with", 
                            "description": "Specifies whether to return information for just the authenticating user, or include messages from accounts the user follows. See the with parameter documentation the with parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "replies", 
                            "description": "Specifies whether to return additional @replies. See the replies parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "track", 
                            "description": "Includes additional Tweets matching the specified keywords.  Phrases of keywords are specified by a comma-separated list.  See the track parameter documentation the track parameter documentation for more information."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "locations", 
                            "description": "Includes additional Tweets falling within the specified bounding boxes.  See the locations parameter documentation for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": null
                }
            ], 
            "path": "/1.1/user.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_contributees", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of users that the specified user can \"contribute\" to."
                }
            ], 
            "path": "/1.1/users/contributees.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_contributors", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "skip_status", 
                            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a collection of users who can contribute to the specified account."
                }
            ], 
            "path": "/1.1/users/contributors.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_lookup", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request.  You are strongly encouraged to use a POST for larger requests."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node that may appear within embedded statuses will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters."
                }
            ], 
            "path": "/1.1/users/lookup.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_profile_banner", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a map of the available size variations of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners."
                }
            ], 
            "path": "/1.1/users/profile_banner.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_users_report_spam", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "The ID or screen_name of the user you want to report as a spammer. Helpful for disambiguating when a valid screen name is also a user ID."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "user_id", 
                            "description": "The ID of the user you want to report as a spammer. Helpful for disambiguating when a valid user ID is also a valid screen name."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user."
                }
            ], 
            "path": "/1.1/users/report_spam.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_search", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "q", 
                            "description": "The search query to run against people search."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "page", 
                            "description": "Specifies the page of results to retrieve."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "count", 
                            "description": "The number of potential user results to retrieve per page. This value has a maximum of 20."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded from embedded tweet objects when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported."
                }
            ], 
            "path": "/1.1/users/search.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_show", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "user_id", 
                            "description": "The ID of the user for whom to return results for. Either an id or screen_name is required for this method."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": true, 
                            "name": "screen_name", 
                            "description": "The screen name of the user for whom to return results for. Either a id or screen_name is required for this method."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "include_entities", 
                            "description": "The entities node will be disincluded when set to false."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible."
                }
            ], 
            "path": "/1.1/users/show.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_suggestions", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "lang", 
                            "description": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category."
                }
            ], 
            "path": "/1.1/users/suggestions.{format}", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_suggestions_:slug", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "slug", 
                            "description": "The short name of list or a category"
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "lang", 
                            "description": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Access the users in a given category of the Twitter suggested user list."
                }
            ], 
            "path": "/1.1/users/suggestions/{slug}.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_users_suggestions_:slug_members", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "path", 
                            "required": true, 
                            "name": "slug", 
                            "description": "The short name of list or a category"
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user."
                }
            ], 
            "path": "/1.1/users/suggestions/{slug}/members.json", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_oauth_access_token", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "x_auth_password", 
                            "description": "The password of the user for which to obtain a token for. Required when using xAuth"
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "x_auth_username", 
                            "description": "The username of the user to obtain a token for. Required when using xAuth"
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "x_auth_mode", 
                            "description": "Set this value to client_auth, without the quotes. Required when using xAuth"
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "oauth_verifier", 
                            "description": "If using the OAuth web-flow, set this parameter to the value of the oauth_verifier returned in the callback URL. If you are using out-of-band OAuth, set this value to the pin-code. When using xAuth, this value should not be included."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a Consumer application to exchange the OAuth Request Token for an OAuth Access Token. This method fulfills Section 6.3 of the OAuth 1.0 authentication flow."
                }
            ], 
            "path": "/oauth/access_token", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_oauth_authenticate", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "force_login", 
                            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "Prefills the username input box of the OAuth login screen with the given value."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a Consumer application to use an OAuth request_token to request user authorization."
                }
            ], 
            "path": "/oauth/authenticate", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "GET", 
                    "nickname": "get_oauth_authorize", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "force_login", 
                            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "query", 
                            "required": false, 
                            "name": "screen_name", 
                            "description": "Prefills the username input box of the OAuth login screen with the given value."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a Consumer application to use an OAuth Request Token to request user authorization. This method fulfills Section 6.2 of the OAuth 1.0 authentication flow. Desktop applications must use this method (and cannot use GET oauth/authenticate)."
                }
            ], 
            "path": "/oauth/authorize", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_oauth_request_token", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "oauth_callback", 
                            "description": "For OAuth 1.0a compliance this parameter is required. The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account. Set this to oob for out-of-band pin mode. This is also how you specify custom callbacks for use in desktop/mobile applications."
                        }, 
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": false, 
                            "name": "x_auth_access_type", 
                            "description": "Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a Consumer application to obtain an OAuth Request Token to request user authorization. This method fulfills Section 6.1 of the OAuth 1.0 authentication flow."
                }
            ], 
            "path": "/oauth/request_token", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_oauth2_invalidate_token", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "access_token", 
                            "description": "The value of the bearer token to revoke."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a registered application to revoke an issued OAuth 2 Bearer Token by presenting its client credentials. Once a Bearer Token has been invalidated, new creation attempts will yield a different Bearer Token and usage of the invalidated token will no longer be allowed."
                }
            ], 
            "path": "/oauth2/invalidate_token", 
            "description": ""
        }, 
        {
            "operations": [
                {
                    "httpMethod": "POST", 
                    "nickname": "post_oauth2_token", 
                    "parameters": [
                        {
                            "dataType": "string", 
                            "paramType": "form", 
                            "required": true, 
                            "name": "grant_type", 
                            "description": "Specifies the type of grant being requested by the application. At this time, only client_credentials is allowed. See Application-only authentication for more information."
                        }
                    ], 
                    "responseClass": "complex", 
                    "summary": "Allows a registered application to obtain an OAuth 2 Bearer Token, which can be used to make API requests on an application's own behalf, without a user context. This is called Application-only authentication."
                }
            ], 
            "path": "/oauth2/token", 
            "description": ""
        }
    ], 
    "swaggerVersion": "1.1", 
    "apiVersion": "1.1", 
    "description": "Twitter"
}
